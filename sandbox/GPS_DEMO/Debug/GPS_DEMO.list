
GPS_DEMO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000781c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000460  08007930  08007930  00017930  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d90  08007d90  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007d90  08007d90  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007d90  08007d90  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007d98  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000788  200001f0  08007f88  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000978  08007f88  00020978  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   000099cc  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f40  00000000  00000000  00029c28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a68  00000000  00000000  0002bb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000822  00000000  00000000  0002c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001858e  00000000  00000000  0002cdf2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c621  00000000  00000000  00045380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00086aec  00000000  00000000  000519a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003e5c  00000000  00000000  000d8490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000dc2ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007914 	.word	0x08007914

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	08007914 	.word	0x08007914

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2f>:
 8000a88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a90:	bf24      	itt	cs
 8000a92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a9a:	d90d      	bls.n	8000ab8 <__aeabi_d2f+0x30>
 8000a9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aa0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000aa4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000aa8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ab0:	bf08      	it	eq
 8000ab2:	f020 0001 	biceq.w	r0, r0, #1
 8000ab6:	4770      	bx	lr
 8000ab8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000abc:	d121      	bne.n	8000b02 <__aeabi_d2f+0x7a>
 8000abe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ac2:	bfbc      	itt	lt
 8000ac4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ac8:	4770      	bxlt	lr
 8000aca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ace:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ad2:	f1c2 0218 	rsb	r2, r2, #24
 8000ad6:	f1c2 0c20 	rsb	ip, r2, #32
 8000ada:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ade:	fa20 f002 	lsr.w	r0, r0, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	f040 0001 	orrne.w	r0, r0, #1
 8000ae8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000af0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000af4:	ea40 000c 	orr.w	r0, r0, ip
 8000af8:	fa23 f302 	lsr.w	r3, r3, r2
 8000afc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b00:	e7cc      	b.n	8000a9c <__aeabi_d2f+0x14>
 8000b02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b06:	d107      	bne.n	8000b18 <__aeabi_d2f+0x90>
 8000b08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b0c:	bf1e      	ittt	ne
 8000b0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b16:	4770      	bxne	lr
 8000b18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop

08000b28 <decodeGGA>:
   @Returns 0 on success
   @ returns 1, 2 depending on where the return statement is excuted, check function for more details
*/

int decodeGGA (char *GGAbuffer, GGASTRUCT *gga)
{
 8000b28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000b2c:	b08c      	sub	sp, #48	; 0x30
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
 8000b32:	6039      	str	r1, [r7, #0]
	inx = 0;
 8000b34:	4b5b      	ldr	r3, [pc, #364]	; (8000ca4 <decodeGGA+0x17c>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000b3e:	e004      	b.n	8000b4a <decodeGGA+0x22>
 8000b40:	4b58      	ldr	r3, [pc, #352]	; (8000ca4 <decodeGGA+0x17c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	3301      	adds	r3, #1
 8000b46:	4a57      	ldr	r2, [pc, #348]	; (8000ca4 <decodeGGA+0x17c>)
 8000b48:	6013      	str	r3, [r2, #0]
 8000b4a:	4b56      	ldr	r3, [pc, #344]	; (8000ca4 <decodeGGA+0x17c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	461a      	mov	r2, r3
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	4413      	add	r3, r2
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b2c      	cmp	r3, #44	; 0x2c
 8000b58:	d1f2      	bne.n	8000b40 <decodeGGA+0x18>
	inx++;
 8000b5a:	4b52      	ldr	r3, [pc, #328]	; (8000ca4 <decodeGGA+0x17c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	3301      	adds	r3, #1
 8000b60:	4a50      	ldr	r2, [pc, #320]	; (8000ca4 <decodeGGA+0x17c>)
 8000b62:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // After time ','
 8000b64:	e004      	b.n	8000b70 <decodeGGA+0x48>
 8000b66:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <decodeGGA+0x17c>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	4a4d      	ldr	r2, [pc, #308]	; (8000ca4 <decodeGGA+0x17c>)
 8000b6e:	6013      	str	r3, [r2, #0]
 8000b70:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <decodeGGA+0x17c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b2c      	cmp	r3, #44	; 0x2c
 8000b7e:	d1f2      	bne.n	8000b66 <decodeGGA+0x3e>
	inx++;
 8000b80:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <decodeGGA+0x17c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	3301      	adds	r3, #1
 8000b86:	4a47      	ldr	r2, [pc, #284]	; (8000ca4 <decodeGGA+0x17c>)
 8000b88:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after latitude ','
 8000b8a:	e004      	b.n	8000b96 <decodeGGA+0x6e>
 8000b8c:	4b45      	ldr	r3, [pc, #276]	; (8000ca4 <decodeGGA+0x17c>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	3301      	adds	r3, #1
 8000b92:	4a44      	ldr	r2, [pc, #272]	; (8000ca4 <decodeGGA+0x17c>)
 8000b94:	6013      	str	r3, [r2, #0]
 8000b96:	4b43      	ldr	r3, [pc, #268]	; (8000ca4 <decodeGGA+0x17c>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	461a      	mov	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	781b      	ldrb	r3, [r3, #0]
 8000ba2:	2b2c      	cmp	r3, #44	; 0x2c
 8000ba4:	d1f2      	bne.n	8000b8c <decodeGGA+0x64>
	inx++;
 8000ba6:	4b3f      	ldr	r3, [pc, #252]	; (8000ca4 <decodeGGA+0x17c>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a3d      	ldr	r2, [pc, #244]	; (8000ca4 <decodeGGA+0x17c>)
 8000bae:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after NS ','
 8000bb0:	e004      	b.n	8000bbc <decodeGGA+0x94>
 8000bb2:	4b3c      	ldr	r3, [pc, #240]	; (8000ca4 <decodeGGA+0x17c>)
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	4a3a      	ldr	r2, [pc, #232]	; (8000ca4 <decodeGGA+0x17c>)
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b39      	ldr	r3, [pc, #228]	; (8000ca4 <decodeGGA+0x17c>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	2b2c      	cmp	r3, #44	; 0x2c
 8000bca:	d1f2      	bne.n	8000bb2 <decodeGGA+0x8a>
	inx++;
 8000bcc:	4b35      	ldr	r3, [pc, #212]	; (8000ca4 <decodeGGA+0x17c>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	4a34      	ldr	r2, [pc, #208]	; (8000ca4 <decodeGGA+0x17c>)
 8000bd4:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after longitude ','
 8000bd6:	e004      	b.n	8000be2 <decodeGGA+0xba>
 8000bd8:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <decodeGGA+0x17c>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	3301      	adds	r3, #1
 8000bde:	4a31      	ldr	r2, [pc, #196]	; (8000ca4 <decodeGGA+0x17c>)
 8000be0:	6013      	str	r3, [r2, #0]
 8000be2:	4b30      	ldr	r3, [pc, #192]	; (8000ca4 <decodeGGA+0x17c>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	461a      	mov	r2, r3
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4413      	add	r3, r2
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b2c      	cmp	r3, #44	; 0x2c
 8000bf0:	d1f2      	bne.n	8000bd8 <decodeGGA+0xb0>
	inx++;
 8000bf2:	4b2c      	ldr	r3, [pc, #176]	; (8000ca4 <decodeGGA+0x17c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	4a2a      	ldr	r2, [pc, #168]	; (8000ca4 <decodeGGA+0x17c>)
 8000bfa:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;  // after EW ','
 8000bfc:	e004      	b.n	8000c08 <decodeGGA+0xe0>
 8000bfe:	4b29      	ldr	r3, [pc, #164]	; (8000ca4 <decodeGGA+0x17c>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	4a27      	ldr	r2, [pc, #156]	; (8000ca4 <decodeGGA+0x17c>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b26      	ldr	r3, [pc, #152]	; (8000ca4 <decodeGGA+0x17c>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4413      	add	r3, r2
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b2c      	cmp	r3, #44	; 0x2c
 8000c16:	d1f2      	bne.n	8000bfe <decodeGGA+0xd6>
	inx++;  // reached the character to identify the fix
 8000c18:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <decodeGGA+0x17c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	4a21      	ldr	r2, [pc, #132]	; (8000ca4 <decodeGGA+0x17c>)
 8000c20:	6013      	str	r3, [r2, #0]
	if ((GGAbuffer[inx] == '1') || (GGAbuffer[inx] == '2') || (GGAbuffer[inx] == '6'))   // 0 indicates no fix yet
 8000c22:	4b20      	ldr	r3, [pc, #128]	; (8000ca4 <decodeGGA+0x17c>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	461a      	mov	r2, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	2b31      	cmp	r3, #49	; 0x31
 8000c30:	d00f      	beq.n	8000c52 <decodeGGA+0x12a>
 8000c32:	4b1c      	ldr	r3, [pc, #112]	; (8000ca4 <decodeGGA+0x17c>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	2b32      	cmp	r3, #50	; 0x32
 8000c40:	d007      	beq.n	8000c52 <decodeGGA+0x12a>
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <decodeGGA+0x17c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	461a      	mov	r2, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	4413      	add	r3, r2
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	2b36      	cmp	r3, #54	; 0x36
 8000c50:	d106      	bne.n	8000c60 <decodeGGA+0x138>
	{
		gga->isfixValid = 1;   // fix available
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	61da      	str	r2, [r3, #28]
		inx = 0;   // reset the index. We will start from the inx=0 and extract information now
 8000c58:	4b12      	ldr	r3, [pc, #72]	; (8000ca4 <decodeGGA+0x17c>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	601a      	str	r2, [r3, #0]
	else
	{
		gga->isfixValid = 0;   // If the fix is not available
		return 1;  // return error
	}
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c5e:	e009      	b.n	8000c74 <decodeGGA+0x14c>
		gga->isfixValid = 0;   // If the fix is not available
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	2200      	movs	r2, #0
 8000c64:	61da      	str	r2, [r3, #28]
		return 1;  // return error
 8000c66:	2301      	movs	r3, #1
 8000c68:	e2f2      	b.n	8001250 <decodeGGA+0x728>
	while (GGAbuffer[inx] != ',') inx++;  // 1st ','
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <decodeGGA+0x17c>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	4a0c      	ldr	r2, [pc, #48]	; (8000ca4 <decodeGGA+0x17c>)
 8000c72:	6013      	str	r3, [r2, #0]
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <decodeGGA+0x17c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4413      	add	r3, r2
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b2c      	cmp	r3, #44	; 0x2c
 8000c82:	d1f2      	bne.n	8000c6a <decodeGGA+0x142>


/*********************** Get TIME ***************************/
//(Update the GMT Offset at the top of this file)

	inx++;   // reach the first number in time
 8000c84:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <decodeGGA+0x17c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	4a06      	ldr	r2, [pc, #24]	; (8000ca4 <decodeGGA+0x17c>)
 8000c8c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	220c      	movs	r2, #12
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f003 fe49 	bl	800492e <memset>
	i=0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000ca0:	e016      	b.n	8000cd0 <decodeGGA+0x1a8>
 8000ca2:	bf00      	nop
 8000ca4:	2000020c 	.word	0x2000020c
	{
		buffer[i] = GGAbuffer[inx];
 8000ca8:	4ba7      	ldr	r3, [pc, #668]	; (8000f48 <decodeGGA+0x420>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	4413      	add	r3, r2
 8000cb2:	7819      	ldrb	r1, [r3, #0]
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	4413      	add	r3, r2
 8000cbc:	460a      	mov	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
		i++;
 8000cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc2:	3301      	adds	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000cc6:	4ba0      	ldr	r3, [pc, #640]	; (8000f48 <decodeGGA+0x420>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	4a9e      	ldr	r2, [pc, #632]	; (8000f48 <decodeGGA+0x420>)
 8000cce:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after time ','
 8000cd0:	4b9d      	ldr	r3, [pc, #628]	; (8000f48 <decodeGGA+0x420>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	4413      	add	r3, r2
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	2b2c      	cmp	r3, #44	; 0x2c
 8000cde:	d1e3      	bne.n	8000ca8 <decodeGGA+0x180>
	}

	hr = (atoi(buffer)/10000) + GMT/100;   // get the hours from the 6 digit number
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f003 f825 	bl	8003d34 <atoi>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a97      	ldr	r2, [pc, #604]	; (8000f4c <decodeGGA+0x424>)
 8000cee:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf2:	1312      	asrs	r2, r2, #12
 8000cf4:	17db      	asrs	r3, r3, #31
 8000cf6:	1ad2      	subs	r2, r2, r3
 8000cf8:	4b95      	ldr	r3, [pc, #596]	; (8000f50 <decodeGGA+0x428>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4995      	ldr	r1, [pc, #596]	; (8000f54 <decodeGGA+0x42c>)
 8000cfe:	fb81 0103 	smull	r0, r1, r1, r3
 8000d02:	1149      	asrs	r1, r1, #5
 8000d04:	17db      	asrs	r3, r3, #31
 8000d06:	1acb      	subs	r3, r1, r3
 8000d08:	4413      	add	r3, r2
 8000d0a:	4a93      	ldr	r2, [pc, #588]	; (8000f58 <decodeGGA+0x430>)
 8000d0c:	6013      	str	r3, [r2, #0]

	min = ((atoi(buffer)/100)%100) + GMT%100;  // get the minutes from the 6 digit number
 8000d0e:	f107 030c 	add.w	r3, r7, #12
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 f80e 	bl	8003d34 <atoi>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a8e      	ldr	r2, [pc, #568]	; (8000f54 <decodeGGA+0x42c>)
 8000d1c:	fb82 1203 	smull	r1, r2, r2, r3
 8000d20:	1152      	asrs	r2, r2, #5
 8000d22:	17db      	asrs	r3, r3, #31
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	4a8b      	ldr	r2, [pc, #556]	; (8000f54 <decodeGGA+0x42c>)
 8000d28:	fb82 1203 	smull	r1, r2, r2, r3
 8000d2c:	1151      	asrs	r1, r2, #5
 8000d2e:	17da      	asrs	r2, r3, #31
 8000d30:	1a8a      	subs	r2, r1, r2
 8000d32:	2164      	movs	r1, #100	; 0x64
 8000d34:	fb01 f202 	mul.w	r2, r1, r2
 8000d38:	1a9a      	subs	r2, r3, r2
 8000d3a:	4b85      	ldr	r3, [pc, #532]	; (8000f50 <decodeGGA+0x428>)
 8000d3c:	6819      	ldr	r1, [r3, #0]
 8000d3e:	4b85      	ldr	r3, [pc, #532]	; (8000f54 <decodeGGA+0x42c>)
 8000d40:	fb83 0301 	smull	r0, r3, r3, r1
 8000d44:	1158      	asrs	r0, r3, #5
 8000d46:	17cb      	asrs	r3, r1, #31
 8000d48:	1ac3      	subs	r3, r0, r3
 8000d4a:	2064      	movs	r0, #100	; 0x64
 8000d4c:	fb00 f303 	mul.w	r3, r0, r3
 8000d50:	1acb      	subs	r3, r1, r3
 8000d52:	4413      	add	r3, r2
 8000d54:	4a81      	ldr	r2, [pc, #516]	; (8000f5c <decodeGGA+0x434>)
 8000d56:	6013      	str	r3, [r2, #0]

	// adjust time.. This part still needs to be tested
	if (min > 59) 
 8000d58:	4b80      	ldr	r3, [pc, #512]	; (8000f5c <decodeGGA+0x434>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	2b3b      	cmp	r3, #59	; 0x3b
 8000d5e:	dd09      	ble.n	8000d74 <decodeGGA+0x24c>
	{
		min = min-60;
 8000d60:	4b7e      	ldr	r3, [pc, #504]	; (8000f5c <decodeGGA+0x434>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	3b3c      	subs	r3, #60	; 0x3c
 8000d66:	4a7d      	ldr	r2, [pc, #500]	; (8000f5c <decodeGGA+0x434>)
 8000d68:	6013      	str	r3, [r2, #0]
		hr++;
 8000d6a:	4b7b      	ldr	r3, [pc, #492]	; (8000f58 <decodeGGA+0x430>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	3301      	adds	r3, #1
 8000d70:	4a79      	ldr	r2, [pc, #484]	; (8000f58 <decodeGGA+0x430>)
 8000d72:	6013      	str	r3, [r2, #0]
	}
	if (hr<0)
 8000d74:	4b78      	ldr	r3, [pc, #480]	; (8000f58 <decodeGGA+0x430>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	da09      	bge.n	8000d90 <decodeGGA+0x268>
	{
		hr=24+hr;
 8000d7c:	4b76      	ldr	r3, [pc, #472]	; (8000f58 <decodeGGA+0x430>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	3318      	adds	r3, #24
 8000d82:	4a75      	ldr	r2, [pc, #468]	; (8000f58 <decodeGGA+0x430>)
 8000d84:	6013      	str	r3, [r2, #0]
		daychange--;
 8000d86:	4b76      	ldr	r3, [pc, #472]	; (8000f60 <decodeGGA+0x438>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	3b01      	subs	r3, #1
 8000d8c:	4a74      	ldr	r2, [pc, #464]	; (8000f60 <decodeGGA+0x438>)
 8000d8e:	6013      	str	r3, [r2, #0]
	}
	if (hr>=24)
 8000d90:	4b71      	ldr	r3, [pc, #452]	; (8000f58 <decodeGGA+0x430>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	2b17      	cmp	r3, #23
 8000d96:	dd09      	ble.n	8000dac <decodeGGA+0x284>
	{
		hr=hr-24;
 8000d98:	4b6f      	ldr	r3, [pc, #444]	; (8000f58 <decodeGGA+0x430>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	3b18      	subs	r3, #24
 8000d9e:	4a6e      	ldr	r2, [pc, #440]	; (8000f58 <decodeGGA+0x430>)
 8000da0:	6013      	str	r3, [r2, #0]
		daychange++;
 8000da2:	4b6f      	ldr	r3, [pc, #444]	; (8000f60 <decodeGGA+0x438>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	3301      	adds	r3, #1
 8000da8:	4a6d      	ldr	r2, [pc, #436]	; (8000f60 <decodeGGA+0x438>)
 8000daa:	6013      	str	r3, [r2, #0]
	}

	// Store the time in the GGA structure
	gga->tim.hour = hr;
 8000dac:	4b6a      	ldr	r3, [pc, #424]	; (8000f58 <decodeGGA+0x430>)
 8000dae:	681a      	ldr	r2, [r3, #0]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	611a      	str	r2, [r3, #16]
	gga->tim.min = min;
 8000db4:	4b69      	ldr	r3, [pc, #420]	; (8000f5c <decodeGGA+0x434>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	615a      	str	r2, [r3, #20]
	gga->tim.sec = atoi(buffer)%100;
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f002 ffb7 	bl	8003d34 <atoi>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	4b62      	ldr	r3, [pc, #392]	; (8000f54 <decodeGGA+0x42c>)
 8000dca:	fb83 1302 	smull	r1, r3, r3, r2
 8000dce:	1159      	asrs	r1, r3, #5
 8000dd0:	17d3      	asrs	r3, r2, #31
 8000dd2:	1acb      	subs	r3, r1, r3
 8000dd4:	2164      	movs	r1, #100	; 0x64
 8000dd6:	fb01 f303 	mul.w	r3, r1, r3
 8000dda:	1ad3      	subs	r3, r2, r3
 8000ddc:	683a      	ldr	r2, [r7, #0]
 8000dde:	6193      	str	r3, [r2, #24]

/***************** Get LATITUDE  **********************/
	inx++;   // Reach the first number in the lattitude
 8000de0:	4b59      	ldr	r3, [pc, #356]	; (8000f48 <decodeGGA+0x420>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	3301      	adds	r3, #1
 8000de6:	4a58      	ldr	r2, [pc, #352]	; (8000f48 <decodeGGA+0x420>)
 8000de8:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000dea:	f107 030c 	add.w	r3, r7, #12
 8000dee:	220c      	movs	r2, #12
 8000df0:	2100      	movs	r1, #0
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fd9b 	bl	800492e <memset>
	i=0;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000dfc:	e013      	b.n	8000e26 <decodeGGA+0x2fe>
	{
		buffer[i] = GGAbuffer[inx];
 8000dfe:	4b52      	ldr	r3, [pc, #328]	; (8000f48 <decodeGGA+0x420>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4413      	add	r3, r2
 8000e08:	7819      	ldrb	r1, [r3, #0]
 8000e0a:	f107 020c 	add.w	r2, r7, #12
 8000e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e10:	4413      	add	r3, r2
 8000e12:	460a      	mov	r2, r1
 8000e14:	701a      	strb	r2, [r3, #0]
		i++;
 8000e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e18:	3301      	adds	r3, #1
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000e1c:	4b4a      	ldr	r3, [pc, #296]	; (8000f48 <decodeGGA+0x420>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	3301      	adds	r3, #1
 8000e22:	4a49      	ldr	r2, [pc, #292]	; (8000f48 <decodeGGA+0x420>)
 8000e24:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')   // copy upto the we reach the after lattitude ','
 8000e26:	4b48      	ldr	r3, [pc, #288]	; (8000f48 <decodeGGA+0x420>)
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	461a      	mov	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	4413      	add	r3, r2
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	2b2c      	cmp	r3, #44	; 0x2c
 8000e34:	d1e3      	bne.n	8000dfe <decodeGGA+0x2d6>
	}
	if (strlen(buffer) < 6) return 2;  // If the buffer length is not appropriate, return error
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff f988 	bl	8000150 <strlen>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d801      	bhi.n	8000e4a <decodeGGA+0x322>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e202      	b.n	8001250 <decodeGGA+0x728>
	int16_t num = (atoi(buffer));   // change the buffer to the number. It will only convert upto decimal
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f002 ff70 	bl	8003d34 <atoi>
 8000e54:	4603      	mov	r3, r0
 8000e56:	84fb      	strh	r3, [r7, #38]	; 0x26
	int j = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;   // Figure out how many digits before the decimal
 8000e5c:	e002      	b.n	8000e64 <decodeGGA+0x33c>
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	3301      	adds	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e64:	f107 020c 	add.w	r2, r7, #12
 8000e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e6a:	4413      	add	r3, r2
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b2e      	cmp	r3, #46	; 0x2e
 8000e70:	d1f5      	bne.n	8000e5e <decodeGGA+0x336>
	j++;
 8000e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e74:	3301      	adds	r3, #1
 8000e76:	62bb      	str	r3, [r7, #40]	; 0x28
	int declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000e78:	f107 030c 	add.w	r3, r7, #12
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff f967 	bl	8000150 <strlen>
 8000e82:	4602      	mov	r2, r0
 8000e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e86:	1ad3      	subs	r3, r2, r3
 8000e88:	623b      	str	r3, [r7, #32]
	int dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e8c:	f107 020c 	add.w	r2, r7, #12
 8000e90:	4413      	add	r3, r2
 8000e92:	4618      	mov	r0, r3
 8000e94:	f002 ff4e 	bl	8003d34 <atoi>
 8000e98:	61f8      	str	r0, [r7, #28]
	float lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000e9a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff fab0 	bl	8000404 <__aeabi_i2d>
 8000ea4:	f04f 0200 	mov.w	r2, #0
 8000ea8:	4b2e      	ldr	r3, [pc, #184]	; (8000f64 <decodeGGA+0x43c>)
 8000eaa:	f7ff fc3f 	bl	800072c <__aeabi_ddiv>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	4690      	mov	r8, r2
 8000eb4:	4699      	mov	r9, r3
 8000eb6:	69f8      	ldr	r0, [r7, #28]
 8000eb8:	f7ff faa4 	bl	8000404 <__aeabi_i2d>
 8000ebc:	4604      	mov	r4, r0
 8000ebe:	460d      	mov	r5, r1
 8000ec0:	6a3b      	ldr	r3, [r7, #32]
 8000ec2:	3302      	adds	r3, #2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fa9d 	bl	8000404 <__aeabi_i2d>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	460b      	mov	r3, r1
 8000ece:	f04f 0000 	mov.w	r0, #0
 8000ed2:	4925      	ldr	r1, [pc, #148]	; (8000f68 <decodeGGA+0x440>)
 8000ed4:	f005 fe16 	bl	8006b04 <pow>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	460b      	mov	r3, r1
 8000edc:	4620      	mov	r0, r4
 8000ede:	4629      	mov	r1, r5
 8000ee0:	f7ff fc24 	bl	800072c <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4640      	mov	r0, r8
 8000eea:	4649      	mov	r1, r9
 8000eec:	f7ff f93e 	bl	800016c <__adddf3>
 8000ef0:	4602      	mov	r2, r0
 8000ef2:	460b      	mov	r3, r1
 8000ef4:	4610      	mov	r0, r2
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	f7ff fdc6 	bl	8000a88 <__aeabi_d2f>
 8000efc:	4603      	mov	r3, r0
 8000efe:	61bb      	str	r3, [r7, #24]
	gga->lcation.latitude = lat;  // save the lattitude data into the strucure
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	601a      	str	r2, [r3, #0]
	inx++;  
 8000f06:	4b10      	ldr	r3, [pc, #64]	; (8000f48 <decodeGGA+0x420>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	3301      	adds	r3, #1
 8000f0c:	4a0e      	ldr	r2, [pc, #56]	; (8000f48 <decodeGGA+0x420>)
 8000f0e:	6013      	str	r3, [r2, #0]
	gga->lcation.NS = GGAbuffer[inx];  // save the N/S into the structure
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <decodeGGA+0x420>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	461a      	mov	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	781a      	ldrb	r2, [r3, #0]
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	711a      	strb	r2, [r3, #4]


/***********************  GET LONGITUDE **********************/
	inx++;  // ',' after NS character
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <decodeGGA+0x420>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3301      	adds	r3, #1
 8000f26:	4a08      	ldr	r2, [pc, #32]	; (8000f48 <decodeGGA+0x420>)
 8000f28:	6013      	str	r3, [r2, #0]
	inx++;  // Reach the first number in the longitude
 8000f2a:	4b07      	ldr	r3, [pc, #28]	; (8000f48 <decodeGGA+0x420>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	4a05      	ldr	r2, [pc, #20]	; (8000f48 <decodeGGA+0x420>)
 8000f32:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 8000f34:	f107 030c 	add.w	r3, r7, #12
 8000f38:	220c      	movs	r2, #12
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f003 fcf6 	bl	800492e <memset>
	i=0;
 8000f42:	2300      	movs	r3, #0
 8000f44:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f46:	e025      	b.n	8000f94 <decodeGGA+0x46c>
 8000f48:	2000020c 	.word	0x2000020c
 8000f4c:	68db8bad 	.word	0x68db8bad
 8000f50:	20000000 	.word	0x20000000
 8000f54:	51eb851f 	.word	0x51eb851f
 8000f58:	20000210 	.word	0x20000210
 8000f5c:	20000214 	.word	0x20000214
 8000f60:	20000224 	.word	0x20000224
 8000f64:	40590000 	.word	0x40590000
 8000f68:	40240000 	.word	0x40240000
	{
		buffer[i] = GGAbuffer[inx];
 8000f6c:	4b88      	ldr	r3, [pc, #544]	; (8001190 <decodeGGA+0x668>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	461a      	mov	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4413      	add	r3, r2
 8000f76:	7819      	ldrb	r1, [r3, #0]
 8000f78:	f107 020c 	add.w	r2, r7, #12
 8000f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7e:	4413      	add	r3, r2
 8000f80:	460a      	mov	r2, r1
 8000f82:	701a      	strb	r2, [r3, #0]
		i++;
 8000f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f86:	3301      	adds	r3, #1
 8000f88:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8000f8a:	4b81      	ldr	r3, [pc, #516]	; (8001190 <decodeGGA+0x668>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	3301      	adds	r3, #1
 8000f90:	4a7f      	ldr	r2, [pc, #508]	; (8001190 <decodeGGA+0x668>)
 8000f92:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the we reach the after longitude ','
 8000f94:	4b7e      	ldr	r3, [pc, #504]	; (8001190 <decodeGGA+0x668>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	461a      	mov	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b2c      	cmp	r3, #44	; 0x2c
 8000fa2:	d1e3      	bne.n	8000f6c <decodeGGA+0x444>
	}
	num = (atoi(buffer));  // change the buffer to the number. It will only convert upto decimal
 8000fa4:	f107 030c 	add.w	r3, r7, #12
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f002 fec3 	bl	8003d34 <atoi>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;  // Figure out how many digits before the decimal
 8000fb6:	e002      	b.n	8000fbe <decodeGGA+0x496>
 8000fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fba:	3301      	adds	r3, #1
 8000fbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fbe:	f107 020c 	add.w	r2, r7, #12
 8000fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fc4:	4413      	add	r3, r2
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b2e      	cmp	r3, #46	; 0x2e
 8000fca:	d1f5      	bne.n	8000fb8 <decodeGGA+0x490>
	j++;
 8000fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fce:	3301      	adds	r3, #1
 8000fd0:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;  // calculate the number of digit after decimal
 8000fd2:	f107 030c 	add.w	r3, r7, #12
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f7ff f8ba 	bl	8000150 <strlen>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe0:	1ad3      	subs	r3, r2, r3
 8000fe2:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);  // conver the decimal part a a separate number
 8000fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fe6:	f107 020c 	add.w	r2, r7, #12
 8000fea:	4413      	add	r3, r2
 8000fec:	4618      	mov	r0, r3
 8000fee:	f002 fea1 	bl	8003d34 <atoi>
 8000ff2:	61f8      	str	r0, [r7, #28]
	lat = (num/100.0) + (dec/pow(10, (declen+2)));  // 1234.56789 = 12.3456789
 8000ff4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fa03 	bl	8000404 <__aeabi_i2d>
 8000ffe:	f04f 0200 	mov.w	r2, #0
 8001002:	4b64      	ldr	r3, [pc, #400]	; (8001194 <decodeGGA+0x66c>)
 8001004:	f7ff fb92 	bl	800072c <__aeabi_ddiv>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	4690      	mov	r8, r2
 800100e:	4699      	mov	r9, r3
 8001010:	69f8      	ldr	r0, [r7, #28]
 8001012:	f7ff f9f7 	bl	8000404 <__aeabi_i2d>
 8001016:	4604      	mov	r4, r0
 8001018:	460d      	mov	r5, r1
 800101a:	6a3b      	ldr	r3, [r7, #32]
 800101c:	3302      	adds	r3, #2
 800101e:	4618      	mov	r0, r3
 8001020:	f7ff f9f0 	bl	8000404 <__aeabi_i2d>
 8001024:	4602      	mov	r2, r0
 8001026:	460b      	mov	r3, r1
 8001028:	f04f 0000 	mov.w	r0, #0
 800102c:	495a      	ldr	r1, [pc, #360]	; (8001198 <decodeGGA+0x670>)
 800102e:	f005 fd69 	bl	8006b04 <pow>
 8001032:	4602      	mov	r2, r0
 8001034:	460b      	mov	r3, r1
 8001036:	4620      	mov	r0, r4
 8001038:	4629      	mov	r1, r5
 800103a:	f7ff fb77 	bl	800072c <__aeabi_ddiv>
 800103e:	4602      	mov	r2, r0
 8001040:	460b      	mov	r3, r1
 8001042:	4640      	mov	r0, r8
 8001044:	4649      	mov	r1, r9
 8001046:	f7ff f891 	bl	800016c <__adddf3>
 800104a:	4602      	mov	r2, r0
 800104c:	460b      	mov	r3, r1
 800104e:	4610      	mov	r0, r2
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff fd19 	bl	8000a88 <__aeabi_d2f>
 8001056:	4603      	mov	r3, r0
 8001058:	61bb      	str	r3, [r7, #24]
	gga->lcation.longitude = lat;  // save the longitude data into the strucure
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	609a      	str	r2, [r3, #8]
	inx++;
 8001060:	4b4b      	ldr	r3, [pc, #300]	; (8001190 <decodeGGA+0x668>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	3301      	adds	r3, #1
 8001066:	4a4a      	ldr	r2, [pc, #296]	; (8001190 <decodeGGA+0x668>)
 8001068:	6013      	str	r3, [r2, #0]
	gga->lcation.EW = GGAbuffer[inx];  // save the E/W into the structure
 800106a:	4b49      	ldr	r3, [pc, #292]	; (8001190 <decodeGGA+0x668>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	461a      	mov	r2, r3
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4413      	add	r3, r2
 8001074:	781a      	ldrb	r2, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	731a      	strb	r2, [r3, #12]

/**************************************************/
	// skip positition fix
	inx++;   // ',' after E/W
 800107a:	4b45      	ldr	r3, [pc, #276]	; (8001190 <decodeGGA+0x668>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	3301      	adds	r3, #1
 8001080:	4a43      	ldr	r2, [pc, #268]	; (8001190 <decodeGGA+0x668>)
 8001082:	6013      	str	r3, [r2, #0]
	inx++;   // position fix
 8001084:	4b42      	ldr	r3, [pc, #264]	; (8001190 <decodeGGA+0x668>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	3301      	adds	r3, #1
 800108a:	4a41      	ldr	r2, [pc, #260]	; (8001190 <decodeGGA+0x668>)
 800108c:	6013      	str	r3, [r2, #0]
	inx++;   // ',' after position fix;
 800108e:	4b40      	ldr	r3, [pc, #256]	; (8001190 <decodeGGA+0x668>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	4a3e      	ldr	r2, [pc, #248]	; (8001190 <decodeGGA+0x668>)
 8001096:	6013      	str	r3, [r2, #0]

	// number of sattelites
	inx++;  // Reach the first number in the satellites
 8001098:	4b3d      	ldr	r3, [pc, #244]	; (8001190 <decodeGGA+0x668>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	3301      	adds	r3, #1
 800109e:	4a3c      	ldr	r2, [pc, #240]	; (8001190 <decodeGGA+0x668>)
 80010a0:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 80010a2:	f107 030c 	add.w	r3, r7, #12
 80010a6:	220c      	movs	r2, #12
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f003 fc3f 	bl	800492e <memset>
	i=0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80010b4:	e013      	b.n	80010de <decodeGGA+0x5b6>
	{
		buffer[i] = GGAbuffer[inx];
 80010b6:	4b36      	ldr	r3, [pc, #216]	; (8001190 <decodeGGA+0x668>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	461a      	mov	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	4413      	add	r3, r2
 80010c0:	7819      	ldrb	r1, [r3, #0]
 80010c2:	f107 020c 	add.w	r2, r7, #12
 80010c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c8:	4413      	add	r3, r2
 80010ca:	460a      	mov	r2, r1
 80010cc:	701a      	strb	r2, [r3, #0]
		i++;
 80010ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d0:	3301      	adds	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 80010d4:	4b2e      	ldr	r3, [pc, #184]	; (8001190 <decodeGGA+0x668>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	3301      	adds	r3, #1
 80010da:	4a2d      	ldr	r2, [pc, #180]	; (8001190 <decodeGGA+0x668>)
 80010dc:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')  // copy upto the ',' after number of satellites
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <decodeGGA+0x668>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	461a      	mov	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4413      	add	r3, r2
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	2b2c      	cmp	r3, #44	; 0x2c
 80010ec:	d1e3      	bne.n	80010b6 <decodeGGA+0x58e>
	}
	gga->numofsat = atoi(buffer);   // convert the buffer to number and save into the structure
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4618      	mov	r0, r3
 80010f4:	f002 fe1e 	bl	8003d34 <atoi>
 80010f8:	4602      	mov	r2, r0
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	629a      	str	r2, [r3, #40]	; 0x28


	/***************** skip HDOP  *********************/
	inx++;
 80010fe:	4b24      	ldr	r3, [pc, #144]	; (8001190 <decodeGGA+0x668>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	3301      	adds	r3, #1
 8001104:	4a22      	ldr	r2, [pc, #136]	; (8001190 <decodeGGA+0x668>)
 8001106:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',') inx++;
 8001108:	e004      	b.n	8001114 <decodeGGA+0x5ec>
 800110a:	4b21      	ldr	r3, [pc, #132]	; (8001190 <decodeGGA+0x668>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	3301      	adds	r3, #1
 8001110:	4a1f      	ldr	r2, [pc, #124]	; (8001190 <decodeGGA+0x668>)
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <decodeGGA+0x668>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	461a      	mov	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b2c      	cmp	r3, #44	; 0x2c
 8001122:	d1f2      	bne.n	800110a <decodeGGA+0x5e2>


	/*************** Altitude calculation ********************/
	inx++;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <decodeGGA+0x668>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	3301      	adds	r3, #1
 800112a:	4a19      	ldr	r2, [pc, #100]	; (8001190 <decodeGGA+0x668>)
 800112c:	6013      	str	r3, [r2, #0]
	memset(buffer, '\0', 12);
 800112e:	f107 030c 	add.w	r3, r7, #12
 8001132:	220c      	movs	r2, #12
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f003 fbf9 	bl	800492e <memset>
	i=0;
 800113c:	2300      	movs	r3, #0
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (GGAbuffer[inx] != ',')
 8001140:	e013      	b.n	800116a <decodeGGA+0x642>
	{
		buffer[i] = GGAbuffer[inx];
 8001142:	4b13      	ldr	r3, [pc, #76]	; (8001190 <decodeGGA+0x668>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	461a      	mov	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4413      	add	r3, r2
 800114c:	7819      	ldrb	r1, [r3, #0]
 800114e:	f107 020c 	add.w	r2, r7, #12
 8001152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001154:	4413      	add	r3, r2
 8001156:	460a      	mov	r2, r1
 8001158:	701a      	strb	r2, [r3, #0]
		i++;
 800115a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800115c:	3301      	adds	r3, #1
 800115e:	62fb      	str	r3, [r7, #44]	; 0x2c
		inx++;
 8001160:	4b0b      	ldr	r3, [pc, #44]	; (8001190 <decodeGGA+0x668>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	3301      	adds	r3, #1
 8001166:	4a0a      	ldr	r2, [pc, #40]	; (8001190 <decodeGGA+0x668>)
 8001168:	6013      	str	r3, [r2, #0]
	while (GGAbuffer[inx] != ',')
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <decodeGGA+0x668>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	4413      	add	r3, r2
 8001174:	781b      	ldrb	r3, [r3, #0]
 8001176:	2b2c      	cmp	r3, #44	; 0x2c
 8001178:	d1e3      	bne.n	8001142 <decodeGGA+0x61a>
	}
	num = (atoi(buffer));
 800117a:	f107 030c 	add.w	r3, r7, #12
 800117e:	4618      	mov	r0, r3
 8001180:	f002 fdd8 	bl	8003d34 <atoi>
 8001184:	4603      	mov	r3, r0
 8001186:	84fb      	strh	r3, [r7, #38]	; 0x26
	j = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	62bb      	str	r3, [r7, #40]	; 0x28
	while (buffer[j] != '.') j++;
 800118c:	e009      	b.n	80011a2 <decodeGGA+0x67a>
 800118e:	bf00      	nop
 8001190:	2000020c 	.word	0x2000020c
 8001194:	40590000 	.word	0x40590000
 8001198:	40240000 	.word	0x40240000
 800119c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800119e:	3301      	adds	r3, #1
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80011a2:	f107 020c 	add.w	r2, r7, #12
 80011a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011a8:	4413      	add	r3, r2
 80011aa:	781b      	ldrb	r3, [r3, #0]
 80011ac:	2b2e      	cmp	r3, #46	; 0x2e
 80011ae:	d1f5      	bne.n	800119c <decodeGGA+0x674>
	j++;
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	3301      	adds	r3, #1
 80011b4:	62bb      	str	r3, [r7, #40]	; 0x28
	declen = (strlen(buffer))-j;
 80011b6:	f107 030c 	add.w	r3, r7, #12
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7fe ffc8 	bl	8000150 <strlen>
 80011c0:	4602      	mov	r2, r0
 80011c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	623b      	str	r3, [r7, #32]
	dec = atoi ((char *) buffer+j);
 80011c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	4413      	add	r3, r2
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 fdaf 	bl	8003d34 <atoi>
 80011d6:	61f8      	str	r0, [r7, #28]
	lat = (num) + (dec/pow(10, (declen)));
 80011d8:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80011dc:	4618      	mov	r0, r3
 80011de:	f7ff f911 	bl	8000404 <__aeabi_i2d>
 80011e2:	4604      	mov	r4, r0
 80011e4:	460d      	mov	r5, r1
 80011e6:	69f8      	ldr	r0, [r7, #28]
 80011e8:	f7ff f90c 	bl	8000404 <__aeabi_i2d>
 80011ec:	4680      	mov	r8, r0
 80011ee:	4689      	mov	r9, r1
 80011f0:	6a38      	ldr	r0, [r7, #32]
 80011f2:	f7ff f907 	bl	8000404 <__aeabi_i2d>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f04f 0000 	mov.w	r0, #0
 80011fe:	4917      	ldr	r1, [pc, #92]	; (800125c <decodeGGA+0x734>)
 8001200:	f005 fc80 	bl	8006b04 <pow>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4640      	mov	r0, r8
 800120a:	4649      	mov	r1, r9
 800120c:	f7ff fa8e 	bl	800072c <__aeabi_ddiv>
 8001210:	4602      	mov	r2, r0
 8001212:	460b      	mov	r3, r1
 8001214:	4620      	mov	r0, r4
 8001216:	4629      	mov	r1, r5
 8001218:	f7fe ffa8 	bl	800016c <__adddf3>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4610      	mov	r0, r2
 8001222:	4619      	mov	r1, r3
 8001224:	f7ff fc30 	bl	8000a88 <__aeabi_d2f>
 8001228:	4603      	mov	r3, r0
 800122a:	61bb      	str	r3, [r7, #24]
	gga->alt.altitude = lat;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	621a      	str	r2, [r3, #32]

	inx++;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <decodeGGA+0x738>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	3301      	adds	r3, #1
 8001238:	4a09      	ldr	r2, [pc, #36]	; (8001260 <decodeGGA+0x738>)
 800123a:	6013      	str	r3, [r2, #0]
	gga->alt.unit = GGAbuffer[inx];
 800123c:	4b08      	ldr	r3, [pc, #32]	; (8001260 <decodeGGA+0x738>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	781a      	ldrb	r2, [r3, #0]
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	return 0;
 800124e:	2300      	movs	r3, #0

}
 8001250:	4618      	mov	r0, r3
 8001252:	3730      	adds	r7, #48	; 0x30
 8001254:	46bd      	mov	sp, r7
 8001256:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800125a:	bf00      	nop
 800125c:	40240000 	.word	0x40240000
 8001260:	2000020c 	.word	0x2000020c

08001264 <decodeRMC>:


int decodeRMC (char *RMCbuffer, RMCSTRUCT *rmc)
{
 8001264:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001268:	b090      	sub	sp, #64	; 0x40
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	6039      	str	r1, [r7, #0]
	inx = 0;
 8001270:	4b92      	ldr	r3, [pc, #584]	; (80014bc <decodeRMC+0x258>)
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
	char buffer[12];
	int i = 0;
 8001276:	2300      	movs	r3, #0
 8001278:	63fb      	str	r3, [r7, #60]	; 0x3c
	while (RMCbuffer[inx] != ',') inx++;  // 1st ,
 800127a:	e004      	b.n	8001286 <decodeRMC+0x22>
 800127c:	4b8f      	ldr	r3, [pc, #572]	; (80014bc <decodeRMC+0x258>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	4a8e      	ldr	r2, [pc, #568]	; (80014bc <decodeRMC+0x258>)
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	4b8d      	ldr	r3, [pc, #564]	; (80014bc <decodeRMC+0x258>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	461a      	mov	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2b2c      	cmp	r3, #44	; 0x2c
 8001294:	d1f2      	bne.n	800127c <decodeRMC+0x18>
	inx++;
 8001296:	4b89      	ldr	r3, [pc, #548]	; (80014bc <decodeRMC+0x258>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a87      	ldr	r2, [pc, #540]	; (80014bc <decodeRMC+0x258>)
 800129e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // After time ,
 80012a0:	e004      	b.n	80012ac <decodeRMC+0x48>
 80012a2:	4b86      	ldr	r3, [pc, #536]	; (80014bc <decodeRMC+0x258>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	3301      	adds	r3, #1
 80012a8:	4a84      	ldr	r2, [pc, #528]	; (80014bc <decodeRMC+0x258>)
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	4b83      	ldr	r3, [pc, #524]	; (80014bc <decodeRMC+0x258>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4413      	add	r3, r2
 80012b6:	781b      	ldrb	r3, [r3, #0]
 80012b8:	2b2c      	cmp	r3, #44	; 0x2c
 80012ba:	d1f2      	bne.n	80012a2 <decodeRMC+0x3e>
	inx++;
 80012bc:	4b7f      	ldr	r3, [pc, #508]	; (80014bc <decodeRMC+0x258>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	3301      	adds	r3, #1
 80012c2:	4a7e      	ldr	r2, [pc, #504]	; (80014bc <decodeRMC+0x258>)
 80012c4:	6013      	str	r3, [r2, #0]
	if (RMCbuffer[inx] == 'A')  // Here 'A' Indicates the data is valid, and 'V' indicates invalid data
 80012c6:	4b7d      	ldr	r3, [pc, #500]	; (80014bc <decodeRMC+0x258>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	461a      	mov	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	4413      	add	r3, r2
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b41      	cmp	r3, #65	; 0x41
 80012d4:	d10d      	bne.n	80012f2 <decodeRMC+0x8e>
	{
		rmc->isValid = 1;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	2201      	movs	r2, #1
 80012da:	615a      	str	r2, [r3, #20]
	else
	{
		rmc->isValid =0;
		return 1;
	}
	inx++;
 80012dc:	4b77      	ldr	r3, [pc, #476]	; (80014bc <decodeRMC+0x258>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	4a76      	ldr	r2, [pc, #472]	; (80014bc <decodeRMC+0x258>)
 80012e4:	6013      	str	r3, [r2, #0]
	inx++;
 80012e6:	4b75      	ldr	r3, [pc, #468]	; (80014bc <decodeRMC+0x258>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	3301      	adds	r3, #1
 80012ec:	4a73      	ldr	r2, [pc, #460]	; (80014bc <decodeRMC+0x258>)
 80012ee:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012f0:	e009      	b.n	8001306 <decodeRMC+0xa2>
		rmc->isValid =0;
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	2200      	movs	r2, #0
 80012f6:	615a      	str	r2, [r3, #20]
		return 1;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e1d5      	b.n	80016a8 <decodeRMC+0x444>
	while (RMCbuffer[inx] != ',') inx++;  // after latitude,
 80012fc:	4b6f      	ldr	r3, [pc, #444]	; (80014bc <decodeRMC+0x258>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	3301      	adds	r3, #1
 8001302:	4a6e      	ldr	r2, [pc, #440]	; (80014bc <decodeRMC+0x258>)
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b6d      	ldr	r3, [pc, #436]	; (80014bc <decodeRMC+0x258>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	461a      	mov	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b2c      	cmp	r3, #44	; 0x2c
 8001314:	d1f2      	bne.n	80012fc <decodeRMC+0x98>
	inx++;
 8001316:	4b69      	ldr	r3, [pc, #420]	; (80014bc <decodeRMC+0x258>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	4a67      	ldr	r2, [pc, #412]	; (80014bc <decodeRMC+0x258>)
 800131e:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after NS ,
 8001320:	e004      	b.n	800132c <decodeRMC+0xc8>
 8001322:	4b66      	ldr	r3, [pc, #408]	; (80014bc <decodeRMC+0x258>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	3301      	adds	r3, #1
 8001328:	4a64      	ldr	r2, [pc, #400]	; (80014bc <decodeRMC+0x258>)
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b63      	ldr	r3, [pc, #396]	; (80014bc <decodeRMC+0x258>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	461a      	mov	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4413      	add	r3, r2
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b2c      	cmp	r3, #44	; 0x2c
 800133a:	d1f2      	bne.n	8001322 <decodeRMC+0xbe>
	inx++;
 800133c:	4b5f      	ldr	r3, [pc, #380]	; (80014bc <decodeRMC+0x258>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	3301      	adds	r3, #1
 8001342:	4a5e      	ldr	r2, [pc, #376]	; (80014bc <decodeRMC+0x258>)
 8001344:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after longitude ,
 8001346:	e004      	b.n	8001352 <decodeRMC+0xee>
 8001348:	4b5c      	ldr	r3, [pc, #368]	; (80014bc <decodeRMC+0x258>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a5b      	ldr	r2, [pc, #364]	; (80014bc <decodeRMC+0x258>)
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	4b5a      	ldr	r3, [pc, #360]	; (80014bc <decodeRMC+0x258>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	461a      	mov	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	4413      	add	r3, r2
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	2b2c      	cmp	r3, #44	; 0x2c
 8001360:	d1f2      	bne.n	8001348 <decodeRMC+0xe4>
	inx++;
 8001362:	4b56      	ldr	r3, [pc, #344]	; (80014bc <decodeRMC+0x258>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	3301      	adds	r3, #1
 8001368:	4a54      	ldr	r2, [pc, #336]	; (80014bc <decodeRMC+0x258>)
 800136a:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',') inx++;  // after EW ,
 800136c:	e004      	b.n	8001378 <decodeRMC+0x114>
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <decodeRMC+0x258>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	3301      	adds	r3, #1
 8001374:	4a51      	ldr	r2, [pc, #324]	; (80014bc <decodeRMC+0x258>)
 8001376:	6013      	str	r3, [r2, #0]
 8001378:	4b50      	ldr	r3, [pc, #320]	; (80014bc <decodeRMC+0x258>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4413      	add	r3, r2
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b2c      	cmp	r3, #44	; 0x2c
 8001386:	d1f2      	bne.n	800136e <decodeRMC+0x10a>

	// Get Speed
	inx++;
 8001388:	4b4c      	ldr	r3, [pc, #304]	; (80014bc <decodeRMC+0x258>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3301      	adds	r3, #1
 800138e:	4a4b      	ldr	r2, [pc, #300]	; (80014bc <decodeRMC+0x258>)
 8001390:	6013      	str	r3, [r2, #0]
	i=0;
 8001392:	2300      	movs	r3, #0
 8001394:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 8001396:	f107 0308 	add.w	r3, r7, #8
 800139a:	220c      	movs	r2, #12
 800139c:	2100      	movs	r1, #0
 800139e:	4618      	mov	r0, r3
 80013a0:	f003 fac5 	bl	800492e <memset>
	while (RMCbuffer[inx] != ',')
 80013a4:	e013      	b.n	80013ce <decodeRMC+0x16a>
	{
		buffer[i] = RMCbuffer[inx];
 80013a6:	4b45      	ldr	r3, [pc, #276]	; (80014bc <decodeRMC+0x258>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4413      	add	r3, r2
 80013b0:	7819      	ldrb	r1, [r3, #0]
 80013b2:	f107 0208 	add.w	r2, r7, #8
 80013b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
		i++;
 80013be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80013c0:	3301      	adds	r3, #1
 80013c2:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80013c4:	4b3d      	ldr	r3, [pc, #244]	; (80014bc <decodeRMC+0x258>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	3301      	adds	r3, #1
 80013ca:	4a3c      	ldr	r2, [pc, #240]	; (80014bc <decodeRMC+0x258>)
 80013cc:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80013ce:	4b3b      	ldr	r3, [pc, #236]	; (80014bc <decodeRMC+0x258>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	461a      	mov	r2, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	4413      	add	r3, r2
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b2c      	cmp	r3, #44	; 0x2c
 80013dc:	d1e3      	bne.n	80013a6 <decodeRMC+0x142>
	}

	if (strlen (buffer) > 0){          // if the speed have some data
 80013de:	f107 0308 	add.w	r3, r7, #8
 80013e2:	781b      	ldrb	r3, [r3, #0]
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d055      	beq.n	8001494 <decodeRMC+0x230>
		int16_t num = (atoi(buffer));  // convert the data into the number
 80013e8:	f107 0308 	add.w	r3, r7, #8
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 fca1 	bl	8003d34 <atoi>
 80013f2:	4603      	mov	r3, r0
 80013f4:	867b      	strh	r3, [r7, #50]	; 0x32
		int j = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	63bb      	str	r3, [r7, #56]	; 0x38
		while (buffer[j] != '.') j++;   // same as above
 80013fa:	e002      	b.n	8001402 <decodeRMC+0x19e>
 80013fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013fe:	3301      	adds	r3, #1
 8001400:	63bb      	str	r3, [r7, #56]	; 0x38
 8001402:	f107 0208 	add.w	r2, r7, #8
 8001406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001408:	4413      	add	r3, r2
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b2e      	cmp	r3, #46	; 0x2e
 800140e:	d1f5      	bne.n	80013fc <decodeRMC+0x198>
		j++;
 8001410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001412:	3301      	adds	r3, #1
 8001414:	63bb      	str	r3, [r7, #56]	; 0x38
		int declen = (strlen(buffer))-j;
 8001416:	f107 0308 	add.w	r3, r7, #8
 800141a:	4618      	mov	r0, r3
 800141c:	f7fe fe98 	bl	8000150 <strlen>
 8001420:	4602      	mov	r2, r0
 8001422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	62fb      	str	r3, [r7, #44]	; 0x2c
		int dec = atoi ((char *) buffer+j);
 8001428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800142a:	f107 0208 	add.w	r2, r7, #8
 800142e:	4413      	add	r3, r2
 8001430:	4618      	mov	r0, r3
 8001432:	f002 fc7f 	bl	8003d34 <atoi>
 8001436:	62b8      	str	r0, [r7, #40]	; 0x28
		float lat = num + (dec/pow(10, (declen)));
 8001438:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800143c:	4618      	mov	r0, r3
 800143e:	f7fe ffe1 	bl	8000404 <__aeabi_i2d>
 8001442:	4604      	mov	r4, r0
 8001444:	460d      	mov	r5, r1
 8001446:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001448:	f7fe ffdc 	bl	8000404 <__aeabi_i2d>
 800144c:	4680      	mov	r8, r0
 800144e:	4689      	mov	r9, r1
 8001450:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001452:	f7fe ffd7 	bl	8000404 <__aeabi_i2d>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	f04f 0000 	mov.w	r0, #0
 800145e:	4918      	ldr	r1, [pc, #96]	; (80014c0 <decodeRMC+0x25c>)
 8001460:	f005 fb50 	bl	8006b04 <pow>
 8001464:	4602      	mov	r2, r0
 8001466:	460b      	mov	r3, r1
 8001468:	4640      	mov	r0, r8
 800146a:	4649      	mov	r1, r9
 800146c:	f7ff f95e 	bl	800072c <__aeabi_ddiv>
 8001470:	4602      	mov	r2, r0
 8001472:	460b      	mov	r3, r1
 8001474:	4620      	mov	r0, r4
 8001476:	4629      	mov	r1, r5
 8001478:	f7fe fe78 	bl	800016c <__adddf3>
 800147c:	4602      	mov	r2, r0
 800147e:	460b      	mov	r3, r1
 8001480:	4610      	mov	r0, r2
 8001482:	4619      	mov	r1, r3
 8001484:	f7ff fb00 	bl	8000a88 <__aeabi_d2f>
 8001488:	4603      	mov	r3, r0
 800148a:	627b      	str	r3, [r7, #36]	; 0x24
		rmc->speed = lat;
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001490:	60da      	str	r2, [r3, #12]
 8001492:	e003      	b.n	800149c <decodeRMC+0x238>
	}
	else rmc->speed = 0;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	60da      	str	r2, [r3, #12]

	// Get Course
	inx++;
 800149c:	4b07      	ldr	r3, [pc, #28]	; (80014bc <decodeRMC+0x258>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	3301      	adds	r3, #1
 80014a2:	4a06      	ldr	r2, [pc, #24]	; (80014bc <decodeRMC+0x258>)
 80014a4:	6013      	str	r3, [r2, #0]
	i=0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80014aa:	f107 0308 	add.w	r3, r7, #8
 80014ae:	220c      	movs	r2, #12
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f003 fa3b 	bl	800492e <memset>
	while (RMCbuffer[inx] != ',')
 80014b8:	e018      	b.n	80014ec <decodeRMC+0x288>
 80014ba:	bf00      	nop
 80014bc:	2000020c 	.word	0x2000020c
 80014c0:	40240000 	.word	0x40240000
	{
		buffer[i] = RMCbuffer[inx];
 80014c4:	4b7b      	ldr	r3, [pc, #492]	; (80016b4 <decodeRMC+0x450>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	461a      	mov	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4413      	add	r3, r2
 80014ce:	7819      	ldrb	r1, [r3, #0]
 80014d0:	f107 0208 	add.w	r2, r7, #8
 80014d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014d6:	4413      	add	r3, r2
 80014d8:	460a      	mov	r2, r1
 80014da:	701a      	strb	r2, [r3, #0]
		i++;
 80014dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80014de:	3301      	adds	r3, #1
 80014e0:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80014e2:	4b74      	ldr	r3, [pc, #464]	; (80016b4 <decodeRMC+0x450>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	3301      	adds	r3, #1
 80014e8:	4a72      	ldr	r2, [pc, #456]	; (80016b4 <decodeRMC+0x450>)
 80014ea:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 80014ec:	4b71      	ldr	r3, [pc, #452]	; (80016b4 <decodeRMC+0x450>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	461a      	mov	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4413      	add	r3, r2
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2b2c      	cmp	r3, #44	; 0x2c
 80014fa:	d1e3      	bne.n	80014c4 <decodeRMC+0x260>
	}

	if (strlen (buffer) > 0){  // if the course have some data
 80014fc:	f107 0308 	add.w	r3, r7, #8
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d055      	beq.n	80015b2 <decodeRMC+0x34e>
		int16_t num = (atoi(buffer));   // convert the course data into the number
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fc12 	bl	8003d34 <atoi>
 8001510:	4603      	mov	r3, r0
 8001512:	847b      	strh	r3, [r7, #34]	; 0x22
		int j = 0;
 8001514:	2300      	movs	r3, #0
 8001516:	637b      	str	r3, [r7, #52]	; 0x34
		while (buffer[j] != '.') j++;   // same as above
 8001518:	e002      	b.n	8001520 <decodeRMC+0x2bc>
 800151a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800151c:	3301      	adds	r3, #1
 800151e:	637b      	str	r3, [r7, #52]	; 0x34
 8001520:	f107 0208 	add.w	r2, r7, #8
 8001524:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001526:	4413      	add	r3, r2
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	2b2e      	cmp	r3, #46	; 0x2e
 800152c:	d1f5      	bne.n	800151a <decodeRMC+0x2b6>
		j++;
 800152e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001530:	3301      	adds	r3, #1
 8001532:	637b      	str	r3, [r7, #52]	; 0x34
		int declen = (strlen(buffer))-j;
 8001534:	f107 0308 	add.w	r3, r7, #8
 8001538:	4618      	mov	r0, r3
 800153a:	f7fe fe09 	bl	8000150 <strlen>
 800153e:	4602      	mov	r2, r0
 8001540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	61fb      	str	r3, [r7, #28]
		int dec = atoi ((char *) buffer+j);
 8001546:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001548:	f107 0208 	add.w	r2, r7, #8
 800154c:	4413      	add	r3, r2
 800154e:	4618      	mov	r0, r3
 8001550:	f002 fbf0 	bl	8003d34 <atoi>
 8001554:	61b8      	str	r0, [r7, #24]
		float lat = num + (dec/pow(10, (declen)));
 8001556:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800155a:	4618      	mov	r0, r3
 800155c:	f7fe ff52 	bl	8000404 <__aeabi_i2d>
 8001560:	4604      	mov	r4, r0
 8001562:	460d      	mov	r5, r1
 8001564:	69b8      	ldr	r0, [r7, #24]
 8001566:	f7fe ff4d 	bl	8000404 <__aeabi_i2d>
 800156a:	4680      	mov	r8, r0
 800156c:	4689      	mov	r9, r1
 800156e:	69f8      	ldr	r0, [r7, #28]
 8001570:	f7fe ff48 	bl	8000404 <__aeabi_i2d>
 8001574:	4602      	mov	r2, r0
 8001576:	460b      	mov	r3, r1
 8001578:	f04f 0000 	mov.w	r0, #0
 800157c:	494e      	ldr	r1, [pc, #312]	; (80016b8 <decodeRMC+0x454>)
 800157e:	f005 fac1 	bl	8006b04 <pow>
 8001582:	4602      	mov	r2, r0
 8001584:	460b      	mov	r3, r1
 8001586:	4640      	mov	r0, r8
 8001588:	4649      	mov	r1, r9
 800158a:	f7ff f8cf 	bl	800072c <__aeabi_ddiv>
 800158e:	4602      	mov	r2, r0
 8001590:	460b      	mov	r3, r1
 8001592:	4620      	mov	r0, r4
 8001594:	4629      	mov	r1, r5
 8001596:	f7fe fde9 	bl	800016c <__adddf3>
 800159a:	4602      	mov	r2, r0
 800159c:	460b      	mov	r3, r1
 800159e:	4610      	mov	r0, r2
 80015a0:	4619      	mov	r1, r3
 80015a2:	f7ff fa71 	bl	8000a88 <__aeabi_d2f>
 80015a6:	4603      	mov	r3, r0
 80015a8:	617b      	str	r3, [r7, #20]
		rmc->course = lat;
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	697a      	ldr	r2, [r7, #20]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	e003      	b.n	80015ba <decodeRMC+0x356>
	}
	else
		{
			rmc->course = 0;
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	611a      	str	r2, [r3, #16]
		}

	// Get Date
	inx++;
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <decodeRMC+0x450>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	3301      	adds	r3, #1
 80015c0:	4a3c      	ldr	r2, [pc, #240]	; (80016b4 <decodeRMC+0x450>)
 80015c2:	6013      	str	r3, [r2, #0]
	i=0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	memset(buffer, '\0', 12);
 80015c8:	f107 0308 	add.w	r3, r7, #8
 80015cc:	220c      	movs	r2, #12
 80015ce:	2100      	movs	r1, #0
 80015d0:	4618      	mov	r0, r3
 80015d2:	f003 f9ac 	bl	800492e <memset>
	while (RMCbuffer[inx] != ',')
 80015d6:	e013      	b.n	8001600 <decodeRMC+0x39c>
	{
		buffer[i] = RMCbuffer[inx];
 80015d8:	4b36      	ldr	r3, [pc, #216]	; (80016b4 <decodeRMC+0x450>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	7819      	ldrb	r1, [r3, #0]
 80015e4:	f107 0208 	add.w	r2, r7, #8
 80015e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015ea:	4413      	add	r3, r2
 80015ec:	460a      	mov	r2, r1
 80015ee:	701a      	strb	r2, [r3, #0]
		i++;
 80015f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80015f2:	3301      	adds	r3, #1
 80015f4:	63fb      	str	r3, [r7, #60]	; 0x3c
		inx++;
 80015f6:	4b2f      	ldr	r3, [pc, #188]	; (80016b4 <decodeRMC+0x450>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	3301      	adds	r3, #1
 80015fc:	4a2d      	ldr	r2, [pc, #180]	; (80016b4 <decodeRMC+0x450>)
 80015fe:	6013      	str	r3, [r2, #0]
	while (RMCbuffer[inx] != ',')
 8001600:	4b2c      	ldr	r3, [pc, #176]	; (80016b4 <decodeRMC+0x450>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	461a      	mov	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4413      	add	r3, r2
 800160a:	781b      	ldrb	r3, [r3, #0]
 800160c:	2b2c      	cmp	r3, #44	; 0x2c
 800160e:	d1e3      	bne.n	80015d8 <decodeRMC+0x374>
	}

	// Date in the format 280222
	day = atoi(buffer)/10000;  // extract 28
 8001610:	f107 0308 	add.w	r3, r7, #8
 8001614:	4618      	mov	r0, r3
 8001616:	f002 fb8d 	bl	8003d34 <atoi>
 800161a:	4603      	mov	r3, r0
 800161c:	4a27      	ldr	r2, [pc, #156]	; (80016bc <decodeRMC+0x458>)
 800161e:	fb82 1203 	smull	r1, r2, r2, r3
 8001622:	1312      	asrs	r2, r2, #12
 8001624:	17db      	asrs	r3, r3, #31
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	4a25      	ldr	r2, [pc, #148]	; (80016c0 <decodeRMC+0x45c>)
 800162a:	6013      	str	r3, [r2, #0]
	mon = (atoi(buffer)/100)%100;  // extract 02
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	4618      	mov	r0, r3
 8001632:	f002 fb7f 	bl	8003d34 <atoi>
 8001636:	4603      	mov	r3, r0
 8001638:	4a22      	ldr	r2, [pc, #136]	; (80016c4 <decodeRMC+0x460>)
 800163a:	fb82 1203 	smull	r1, r2, r2, r3
 800163e:	1152      	asrs	r2, r2, #5
 8001640:	17db      	asrs	r3, r3, #31
 8001642:	1ad2      	subs	r2, r2, r3
 8001644:	4b1f      	ldr	r3, [pc, #124]	; (80016c4 <decodeRMC+0x460>)
 8001646:	fb83 1302 	smull	r1, r3, r3, r2
 800164a:	1159      	asrs	r1, r3, #5
 800164c:	17d3      	asrs	r3, r2, #31
 800164e:	1acb      	subs	r3, r1, r3
 8001650:	2164      	movs	r1, #100	; 0x64
 8001652:	fb01 f303 	mul.w	r3, r1, r3
 8001656:	1ad3      	subs	r3, r2, r3
 8001658:	4a1b      	ldr	r2, [pc, #108]	; (80016c8 <decodeRMC+0x464>)
 800165a:	6013      	str	r3, [r2, #0]
	yr = atoi(buffer)%100;  // extract 22
 800165c:	f107 0308 	add.w	r3, r7, #8
 8001660:	4618      	mov	r0, r3
 8001662:	f002 fb67 	bl	8003d34 <atoi>
 8001666:	4602      	mov	r2, r0
 8001668:	4b16      	ldr	r3, [pc, #88]	; (80016c4 <decodeRMC+0x460>)
 800166a:	fb83 1302 	smull	r1, r3, r3, r2
 800166e:	1159      	asrs	r1, r3, #5
 8001670:	17d3      	asrs	r3, r2, #31
 8001672:	1acb      	subs	r3, r1, r3
 8001674:	2164      	movs	r1, #100	; 0x64
 8001676:	fb01 f303 	mul.w	r3, r1, r3
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	4a13      	ldr	r2, [pc, #76]	; (80016cc <decodeRMC+0x468>)
 800167e:	6013      	str	r3, [r2, #0]

	day = day+daychange;   // correction due to GMT shift
 8001680:	4b0f      	ldr	r3, [pc, #60]	; (80016c0 <decodeRMC+0x45c>)
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	4b12      	ldr	r3, [pc, #72]	; (80016d0 <decodeRMC+0x46c>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4413      	add	r3, r2
 800168a:	4a0d      	ldr	r2, [pc, #52]	; (80016c0 <decodeRMC+0x45c>)
 800168c:	6013      	str	r3, [r2, #0]

	// save the data into the structure
	rmc->date.Day = day;
 800168e:	4b0c      	ldr	r3, [pc, #48]	; (80016c0 <decodeRMC+0x45c>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	601a      	str	r2, [r3, #0]
	rmc->date.Mon = mon;
 8001696:	4b0c      	ldr	r3, [pc, #48]	; (80016c8 <decodeRMC+0x464>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	605a      	str	r2, [r3, #4]
	rmc->date.Yr = yr;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <decodeRMC+0x468>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	609a      	str	r2, [r3, #8]

	return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	3740      	adds	r7, #64	; 0x40
 80016ac:	46bd      	mov	sp, r7
 80016ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80016b2:	bf00      	nop
 80016b4:	2000020c 	.word	0x2000020c
 80016b8:	40240000 	.word	0x40240000
 80016bc:	68db8bad 	.word	0x68db8bad
 80016c0:	20000218 	.word	0x20000218
 80016c4:	51eb851f 	.word	0x51eb851f
 80016c8:	2000021c 	.word	0x2000021c
 80016cc:	20000220 	.word	0x20000220
 80016d0:	20000224 	.word	0x20000224

080016d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b086      	sub	sp, #24
 80016d8:	af02      	add	r7, sp, #8
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f023 030f 	bic.w	r3, r3, #15
 80016e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	011b      	lsls	r3, r3, #4
 80016ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	f043 030c 	orr.w	r3, r3, #12
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80016f6:	7bfb      	ldrb	r3, [r7, #15]
 80016f8:	f043 0308 	orr.w	r3, r3, #8
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8001700:	7bbb      	ldrb	r3, [r7, #14]
 8001702:	f043 030c 	orr.w	r3, r3, #12
 8001706:	b2db      	uxtb	r3, r3
 8001708:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	f043 0308 	orr.w	r3, r3, #8
 8001710:	b2db      	uxtb	r3, r3
 8001712:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001714:	f107 0208 	add.w	r2, r7, #8
 8001718:	2364      	movs	r3, #100	; 0x64
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2304      	movs	r3, #4
 800171e:	214e      	movs	r1, #78	; 0x4e
 8001720:	4803      	ldr	r0, [pc, #12]	; (8001730 <lcd_send_cmd+0x5c>)
 8001722:	f001 fb0b 	bl	8002d3c <HAL_I2C_Master_Transmit>
}
 8001726:	bf00      	nop
 8001728:	3710      	adds	r7, #16
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000228 	.word	0x20000228

08001734 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af02      	add	r7, sp, #8
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f023 030f 	bic.w	r3, r3, #15
 8001744:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800174c:	7bfb      	ldrb	r3, [r7, #15]
 800174e:	f043 030d 	orr.w	r3, r3, #13
 8001752:	b2db      	uxtb	r3, r3
 8001754:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	f043 0309 	orr.w	r3, r3, #9
 800175c:	b2db      	uxtb	r3, r3
 800175e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8001760:	7bbb      	ldrb	r3, [r7, #14]
 8001762:	f043 030d 	orr.w	r3, r3, #13
 8001766:	b2db      	uxtb	r3, r3
 8001768:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	f043 0309 	orr.w	r3, r3, #9
 8001770:	b2db      	uxtb	r3, r3
 8001772:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001774:	f107 0208 	add.w	r2, r7, #8
 8001778:	2364      	movs	r3, #100	; 0x64
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2304      	movs	r3, #4
 800177e:	214e      	movs	r1, #78	; 0x4e
 8001780:	4803      	ldr	r0, [pc, #12]	; (8001790 <lcd_send_data+0x5c>)
 8001782:	f001 fadb 	bl	8002d3c <HAL_I2C_Master_Transmit>
}
 8001786:	bf00      	nop
 8001788:	3710      	adds	r7, #16
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	20000228 	.word	0x20000228

08001794 <lcd_put_cur>:
		lcd_send_data (' ');
	}
}

void lcd_put_cur(int row, int col)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
 800179c:	6039      	str	r1, [r7, #0]
    switch (row)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d003      	beq.n	80017ac <lcd_put_cur+0x18>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d005      	beq.n	80017b6 <lcd_put_cur+0x22>
 80017aa:	e009      	b.n	80017c0 <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b2:	603b      	str	r3, [r7, #0]
            break;
 80017b4:	e004      	b.n	80017c0 <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80017bc:	603b      	str	r3, [r7, #0]
            break;
 80017be:	bf00      	nop
    }

    lcd_send_cmd (col);
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	4618      	mov	r0, r3
 80017c6:	f7ff ff85 	bl	80016d4 <lcd_send_cmd>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <lcd_init>:


void lcd_init (void)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 80017d6:	2032      	movs	r0, #50	; 0x32
 80017d8:	f000 feb6 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017dc:	2030      	movs	r0, #48	; 0x30
 80017de:	f7ff ff79 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80017e2:	2005      	movs	r0, #5
 80017e4:	f000 feb0 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017e8:	2030      	movs	r0, #48	; 0x30
 80017ea:	f7ff ff73 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80017ee:	2001      	movs	r0, #1
 80017f0:	f000 feaa 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x30);
 80017f4:	2030      	movs	r0, #48	; 0x30
 80017f6:	f7ff ff6d 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(10);
 80017fa:	200a      	movs	r0, #10
 80017fc:	f000 fea4 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8001800:	2020      	movs	r0, #32
 8001802:	f7ff ff67 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(10);
 8001806:	200a      	movs	r0, #10
 8001808:	f000 fe9e 	bl	8002548 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 800180c:	2028      	movs	r0, #40	; 0x28
 800180e:	f7ff ff61 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 8001812:	2001      	movs	r0, #1
 8001814:	f000 fe98 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001818:	2008      	movs	r0, #8
 800181a:	f7ff ff5b 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800181e:	2001      	movs	r0, #1
 8001820:	f000 fe92 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8001824:	2001      	movs	r0, #1
 8001826:	f7ff ff55 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 fe8c 	bl	8002548 <HAL_Delay>
	HAL_Delay(1);
 8001830:	2001      	movs	r0, #1
 8001832:	f000 fe89 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001836:	2006      	movs	r0, #6
 8001838:	f7ff ff4c 	bl	80016d4 <lcd_send_cmd>
	HAL_Delay(1);
 800183c:	2001      	movs	r0, #1
 800183e:	f000 fe83 	bl	8002548 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8001842:	200c      	movs	r0, #12
 8001844:	f7ff ff46 	bl	80016d4 <lcd_send_cmd>
}
 8001848:	bf00      	nop
 800184a:	bd80      	pop	{r7, pc}

0800184c <lcd_send_string>:

void lcd_send_string (char *str)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8001854:	e006      	b.n	8001864 <lcd_send_string+0x18>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	1c5a      	adds	r2, r3, #1
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff68 	bl	8001734 <lcd_send_data>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f4      	bne.n	8001856 <lcd_send_string+0xa>
}
 800186c:	bf00      	nop
 800186e:	bf00      	nop
 8001870:	3708      	adds	r7, #8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
	...

08001878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800187a:	b087      	sub	sp, #28
 800187c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800187e:	f000 fe01 	bl	8002484 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001882:	f000 f901 	bl	8001a88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001886:	f000 f99d 	bl	8001bc4 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800188a:	f000 f971 	bl	8001b70 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800188e:	f000 f941 	bl	8001b14 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  lcd_init();
 8001892:	f7ff ff9e 	bl	80017d2 <lcd_init>

  Ringbuf_init();
 8001896:	f000 fbbf 	bl	8002018 <Ringbuf_init>
  HAL_Delay (500);
 800189a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800189e:	f000 fe53 	bl	8002548 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if (Wait_for("GGA") == 1)
 80018a2:	4868      	ldr	r0, [pc, #416]	; (8001a44 <main+0x1cc>)
 80018a4:	f000 fce2 	bl	800226c <Wait_for>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d115      	bne.n	80018da <main+0x62>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the GGA is being received
 80018ae:	4b66      	ldr	r3, [pc, #408]	; (8001a48 <main+0x1d0>)
 80018b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b4:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", GGA);
 80018b6:	4965      	ldr	r1, [pc, #404]	; (8001a4c <main+0x1d4>)
 80018b8:	4865      	ldr	r0, [pc, #404]	; (8001a50 <main+0x1d8>)
 80018ba:	f000 fc57 	bl	800216c <Copy_upto>
		  if (decodeGGA(GGA, &gpsData.ggastruct) == 0) flagGGA = 2;  // 2 indicates the data is valid
 80018be:	4965      	ldr	r1, [pc, #404]	; (8001a54 <main+0x1dc>)
 80018c0:	4862      	ldr	r0, [pc, #392]	; (8001a4c <main+0x1d4>)
 80018c2:	f7ff f931 	bl	8000b28 <decodeGGA>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d103      	bne.n	80018d4 <main+0x5c>
 80018cc:	4b62      	ldr	r3, [pc, #392]	; (8001a58 <main+0x1e0>)
 80018ce:	2202      	movs	r2, #2
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	e002      	b.n	80018da <main+0x62>
		  else flagGGA = 1;  // 1 indicates the data is invalid
 80018d4:	4b60      	ldr	r3, [pc, #384]	; (8001a58 <main+0x1e0>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
	  }

	  if (Wait_for("RMC") == 1)
 80018da:	4860      	ldr	r0, [pc, #384]	; (8001a5c <main+0x1e4>)
 80018dc:	f000 fcc6 	bl	800226c <Wait_for>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d115      	bne.n	8001912 <main+0x9a>
	  {

		  VCCTimeout = 5000;  // Reset the VCC Timeout indicating the RMC is being received
 80018e6:	4b58      	ldr	r3, [pc, #352]	; (8001a48 <main+0x1d0>)
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	601a      	str	r2, [r3, #0]

		  Copy_upto("*", RMC);
 80018ee:	495c      	ldr	r1, [pc, #368]	; (8001a60 <main+0x1e8>)
 80018f0:	4857      	ldr	r0, [pc, #348]	; (8001a50 <main+0x1d8>)
 80018f2:	f000 fc3b 	bl	800216c <Copy_upto>
		  if (decodeRMC(RMC, &gpsData.rmcstruct) == 0) flagRMC = 2;  // 2 indicates the data is valid
 80018f6:	495b      	ldr	r1, [pc, #364]	; (8001a64 <main+0x1ec>)
 80018f8:	4859      	ldr	r0, [pc, #356]	; (8001a60 <main+0x1e8>)
 80018fa:	f7ff fcb3 	bl	8001264 <decodeRMC>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d103      	bne.n	800190c <main+0x94>
 8001904:	4b58      	ldr	r3, [pc, #352]	; (8001a68 <main+0x1f0>)
 8001906:	2202      	movs	r2, #2
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	e002      	b.n	8001912 <main+0x9a>
		  else flagRMC = 1;  // 1 indicates the data is invalid
 800190c:	4b56      	ldr	r3, [pc, #344]	; (8001a68 <main+0x1f0>)
 800190e:	2201      	movs	r2, #1
 8001910:	601a      	str	r2, [r3, #0]
	  }

	  if ((flagGGA == 2) | (flagRMC == 2))
 8001912:	4b51      	ldr	r3, [pc, #324]	; (8001a58 <main+0x1e0>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	2b02      	cmp	r3, #2
 8001918:	bf0c      	ite	eq
 800191a:	2301      	moveq	r3, #1
 800191c:	2300      	movne	r3, #0
 800191e:	b2da      	uxtb	r2, r3
 8001920:	4b51      	ldr	r3, [pc, #324]	; (8001a68 <main+0x1f0>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2b02      	cmp	r3, #2
 8001926:	bf0c      	ite	eq
 8001928:	2301      	moveq	r3, #1
 800192a:	2300      	movne	r3, #0
 800192c:	b2db      	uxtb	r3, r3
 800192e:	4313      	orrs	r3, r2
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d046      	beq.n	80019c4 <main+0x14c>
	  {
		  lcd_put_cur(0, 0);
 8001936:	2100      	movs	r1, #0
 8001938:	2000      	movs	r0, #0
 800193a:	f7ff ff2b 	bl	8001794 <lcd_put_cur>
		  sprintf (lcdBuffer, "%02d:%02d:%02d, %02d%02d%02d", gpsData.ggastruct.tim.hour, \
 800193e:	4b45      	ldr	r3, [pc, #276]	; (8001a54 <main+0x1dc>)
 8001940:	691c      	ldr	r4, [r3, #16]
 8001942:	4b44      	ldr	r3, [pc, #272]	; (8001a54 <main+0x1dc>)
 8001944:	695d      	ldr	r5, [r3, #20]
 8001946:	4b43      	ldr	r3, [pc, #268]	; (8001a54 <main+0x1dc>)
 8001948:	699b      	ldr	r3, [r3, #24]
 800194a:	4a42      	ldr	r2, [pc, #264]	; (8001a54 <main+0x1dc>)
 800194c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800194e:	4941      	ldr	r1, [pc, #260]	; (8001a54 <main+0x1dc>)
 8001950:	6b09      	ldr	r1, [r1, #48]	; 0x30
 8001952:	4840      	ldr	r0, [pc, #256]	; (8001a54 <main+0x1dc>)
 8001954:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8001956:	9003      	str	r0, [sp, #12]
 8001958:	9102      	str	r1, [sp, #8]
 800195a:	9201      	str	r2, [sp, #4]
 800195c:	9300      	str	r3, [sp, #0]
 800195e:	462b      	mov	r3, r5
 8001960:	4622      	mov	r2, r4
 8001962:	4942      	ldr	r1, [pc, #264]	; (8001a6c <main+0x1f4>)
 8001964:	4842      	ldr	r0, [pc, #264]	; (8001a70 <main+0x1f8>)
 8001966:	f002 ff7f 	bl	8004868 <siprintf>
				  gpsData.ggastruct.tim.min, gpsData.ggastruct.tim.sec, gpsData.rmcstruct.date.Day, \
				  gpsData.rmcstruct.date.Mon, gpsData.rmcstruct.date.Yr);
		  lcd_send_string(lcdBuffer);
 800196a:	4841      	ldr	r0, [pc, #260]	; (8001a70 <main+0x1f8>)
 800196c:	f7ff ff6e 	bl	800184c <lcd_send_string>
		  memset(lcdBuffer, '\0', 50);
 8001970:	2232      	movs	r2, #50	; 0x32
 8001972:	2100      	movs	r1, #0
 8001974:	483e      	ldr	r0, [pc, #248]	; (8001a70 <main+0x1f8>)
 8001976:	f002 ffda 	bl	800492e <memset>
		  lcd_put_cur(1, 0);
 800197a:	2100      	movs	r1, #0
 800197c:	2001      	movs	r0, #1
 800197e:	f7ff ff09 	bl	8001794 <lcd_put_cur>
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 8001982:	4b34      	ldr	r3, [pc, #208]	; (8001a54 <main+0x1dc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f7fe fd4e 	bl	8000428 <__aeabi_f2d>
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	4b30      	ldr	r3, [pc, #192]	; (8001a54 <main+0x1dc>)
 8001992:	791b      	ldrb	r3, [r3, #4]
 8001994:	461e      	mov	r6, r3
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 8001996:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <main+0x1dc>)
 8001998:	689b      	ldr	r3, [r3, #8]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fd44 	bl	8000428 <__aeabi_f2d>
 80019a0:	4602      	mov	r2, r0
 80019a2:	460b      	mov	r3, r1
				  gpsData.ggastruct.lcation.longitude, gpsData.ggastruct.lcation.EW);
 80019a4:	492b      	ldr	r1, [pc, #172]	; (8001a54 <main+0x1dc>)
 80019a6:	7b09      	ldrb	r1, [r1, #12]
		  sprintf (lcdBuffer, "%.2f%c, %.2f%c  ", gpsData.ggastruct.lcation.latitude, gpsData.ggastruct.lcation.NS,\
 80019a8:	9104      	str	r1, [sp, #16]
 80019aa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80019ae:	9600      	str	r6, [sp, #0]
 80019b0:	4622      	mov	r2, r4
 80019b2:	462b      	mov	r3, r5
 80019b4:	492f      	ldr	r1, [pc, #188]	; (8001a74 <main+0x1fc>)
 80019b6:	482e      	ldr	r0, [pc, #184]	; (8001a70 <main+0x1f8>)
 80019b8:	f002 ff56 	bl	8004868 <siprintf>
		  lcd_send_string(lcdBuffer);
 80019bc:	482c      	ldr	r0, [pc, #176]	; (8001a70 <main+0x1f8>)
 80019be:	f7ff ff45 	bl	800184c <lcd_send_string>
 80019c2:	e01f      	b.n	8001a04 <main+0x18c>
	  }

	  else if ((flagGGA == 1) | (flagRMC == 1))
 80019c4:	4b24      	ldr	r3, [pc, #144]	; (8001a58 <main+0x1e0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <main+0x1f0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	bf0c      	ite	eq
 80019da:	2301      	moveq	r3, #1
 80019dc:	2300      	movne	r3, #0
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	4313      	orrs	r3, r2
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d00d      	beq.n	8001a04 <main+0x18c>
	  {
		  // Instead of clearing the display, it's better if we print spaces.
		  // This will avoid the "refreshing" part
		  lcd_put_cur(0, 0);
 80019e8:	2100      	movs	r1, #0
 80019ea:	2000      	movs	r0, #0
 80019ec:	f7ff fed2 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("   NO FIX YET   ");
 80019f0:	4821      	ldr	r0, [pc, #132]	; (8001a78 <main+0x200>)
 80019f2:	f7ff ff2b 	bl	800184c <lcd_send_string>
		  lcd_put_cur(1, 0);
 80019f6:	2100      	movs	r1, #0
 80019f8:	2001      	movs	r0, #1
 80019fa:	f7ff fecb 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("   Please wait  ");
 80019fe:	481f      	ldr	r0, [pc, #124]	; (8001a7c <main+0x204>)
 8001a00:	f7ff ff24 	bl	800184c <lcd_send_string>
	  }

	  if (VCCTimeout <= 0)
 8001a04:	4b10      	ldr	r3, [pc, #64]	; (8001a48 <main+0x1d0>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	f73f af4a 	bgt.w	80018a2 <main+0x2a>
	  {
		  VCCTimeout = 5000;  // Reset the timeout
 8001a0e:	4b0e      	ldr	r3, [pc, #56]	; (8001a48 <main+0x1d0>)
 8001a10:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a14:	601a      	str	r2, [r3, #0]

		  //reset flags
		  flagGGA =flagRMC =0;
 8001a16:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <main+0x1f0>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	601a      	str	r2, [r3, #0]
 8001a1c:	4b12      	ldr	r3, [pc, #72]	; (8001a68 <main+0x1f0>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a0d      	ldr	r2, [pc, #52]	; (8001a58 <main+0x1e0>)
 8001a22:	6013      	str	r3, [r2, #0]

		  // You are here means the VCC is less, or maybe there is some connection issue
		  // Check the VCC, also you can try connecting to the external 5V

		  lcd_put_cur(0, 0);
 8001a24:	2100      	movs	r1, #0
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7ff feb4 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("    VCC Issue   ");
 8001a2c:	4814      	ldr	r0, [pc, #80]	; (8001a80 <main+0x208>)
 8001a2e:	f7ff ff0d 	bl	800184c <lcd_send_string>
		  lcd_put_cur(1, 0);
 8001a32:	2100      	movs	r1, #0
 8001a34:	2001      	movs	r0, #1
 8001a36:	f7ff fead 	bl	8001794 <lcd_put_cur>
		  lcd_send_string("Check Connection");
 8001a3a:	4812      	ldr	r0, [pc, #72]	; (8001a84 <main+0x20c>)
 8001a3c:	f7ff ff06 	bl	800184c <lcd_send_string>
	  if (Wait_for("GGA") == 1)
 8001a40:	e72f      	b.n	80018a2 <main+0x2a>
 8001a42:	bf00      	nop
 8001a44:	08007930 	.word	0x08007930
 8001a48:	20000004 	.word	0x20000004
 8001a4c:	200002c0 	.word	0x200002c0
 8001a50:	08007934 	.word	0x08007934
 8001a54:	20000388 	.word	0x20000388
 8001a58:	200003cc 	.word	0x200003cc
 8001a5c:	08007938 	.word	0x08007938
 8001a60:	20000324 	.word	0x20000324
 8001a64:	200003b4 	.word	0x200003b4
 8001a68:	200003d0 	.word	0x200003d0
 8001a6c:	0800793c 	.word	0x0800793c
 8001a70:	200003d4 	.word	0x200003d4
 8001a74:	0800795c 	.word	0x0800795c
 8001a78:	08007970 	.word	0x08007970
 8001a7c:	08007984 	.word	0x08007984
 8001a80:	08007998 	.word	0x08007998
 8001a84:	080079ac 	.word	0x080079ac

08001a88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b090      	sub	sp, #64	; 0x40
 8001a8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a8e:	f107 0318 	add.w	r3, r7, #24
 8001a92:	2228      	movs	r2, #40	; 0x28
 8001a94:	2100      	movs	r1, #0
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 ff49 	bl	800492e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]
 8001aa2:	605a      	str	r2, [r3, #4]
 8001aa4:	609a      	str	r2, [r3, #8]
 8001aa6:	60da      	str	r2, [r3, #12]
 8001aa8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ab2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001abc:	2302      	movs	r3, #2
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ac4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001ac6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001aca:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001acc:	f107 0318 	add.w	r3, r7, #24
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f001 fc39 	bl	8003348 <HAL_RCC_OscConfig>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001adc:	f000 f8a0 	bl	8001c20 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae0:	230f      	movs	r3, #15
 8001ae2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ae4:	2302      	movs	r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001af6:	1d3b      	adds	r3, r7, #4
 8001af8:	2102      	movs	r1, #2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fea6 	bl	800384c <HAL_RCC_ClockConfig>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001b06:	f000 f88b 	bl	8001c20 <Error_Handler>
  }
}
 8001b0a:	bf00      	nop
 8001b0c:	3740      	adds	r7, #64	; 0x40
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b18:	4b12      	ldr	r3, [pc, #72]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b1a:	4a13      	ldr	r2, [pc, #76]	; (8001b68 <MX_I2C1_Init+0x54>)
 8001b1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b1e:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b20:	4a12      	ldr	r2, [pc, #72]	; (8001b6c <MX_I2C1_Init+0x58>)
 8001b22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b24:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b2a:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b30:	4b0c      	ldr	r3, [pc, #48]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b32:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b36:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b38:	4b0a      	ldr	r3, [pc, #40]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b44:	4b07      	ldr	r3, [pc, #28]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b4a:	4b06      	ldr	r3, [pc, #24]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b50:	4804      	ldr	r0, [pc, #16]	; (8001b64 <MX_I2C1_Init+0x50>)
 8001b52:	f000 ffaf 	bl	8002ab4 <HAL_I2C_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b5c:	f000 f860 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000228 	.word	0x20000228
 8001b68:	40005400 	.word	0x40005400
 8001b6c:	000186a0 	.word	0x000186a0

08001b70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b76:	4a12      	ldr	r2, [pc, #72]	; (8001bc0 <MX_USART1_UART_Init+0x50>)
 8001b78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b88:	4b0c      	ldr	r3, [pc, #48]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b8e:	4b0b      	ldr	r3, [pc, #44]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b96:	220c      	movs	r2, #12
 8001b98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b9a:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ba6:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_USART1_UART_Init+0x4c>)
 8001ba8:	f001 ffe8 	bl	8003b7c <HAL_UART_Init>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bb2:	f000 f835 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bb6:	bf00      	nop
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	2000027c 	.word	0x2000027c
 8001bc0:	40013800 	.word	0x40013800

08001bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b085      	sub	sp, #20
 8001bc8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bca:	4b14      	ldr	r3, [pc, #80]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001bcc:	699b      	ldr	r3, [r3, #24]
 8001bce:	4a13      	ldr	r2, [pc, #76]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001bd0:	f043 0320 	orr.w	r3, r3, #32
 8001bd4:	6193      	str	r3, [r2, #24]
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	60fb      	str	r3, [r7, #12]
 8001be0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be2:	4b0e      	ldr	r3, [pc, #56]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001be4:	699b      	ldr	r3, [r3, #24]
 8001be6:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001be8:	f043 0304 	orr.w	r3, r3, #4
 8001bec:	6193      	str	r3, [r2, #24]
 8001bee:	4b0b      	ldr	r3, [pc, #44]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001bf0:	699b      	ldr	r3, [r3, #24]
 8001bf2:	f003 0304 	and.w	r3, r3, #4
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bfa:	4b08      	ldr	r3, [pc, #32]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	4a07      	ldr	r2, [pc, #28]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001c00:	f043 0308 	orr.w	r3, r3, #8
 8001c04:	6193      	str	r3, [r2, #24]
 8001c06:	4b05      	ldr	r3, [pc, #20]	; (8001c1c <MX_GPIO_Init+0x58>)
 8001c08:	699b      	ldr	r3, [r3, #24]
 8001c0a:	f003 0308 	and.w	r3, r3, #8
 8001c0e:	607b      	str	r3, [r7, #4]
 8001c10:	687b      	ldr	r3, [r7, #4]

}
 8001c12:	bf00      	nop
 8001c14:	3714      	adds	r7, #20
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bc80      	pop	{r7}
 8001c1a:	4770      	bx	lr
 8001c1c:	40021000 	.word	0x40021000

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c32:	4b15      	ldr	r3, [pc, #84]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c34:	699b      	ldr	r3, [r3, #24]
 8001c36:	4a14      	ldr	r2, [pc, #80]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c38:	f043 0301 	orr.w	r3, r3, #1
 8001c3c:	6193      	str	r3, [r2, #24]
 8001c3e:	4b12      	ldr	r3, [pc, #72]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c40:	699b      	ldr	r3, [r3, #24]
 8001c42:	f003 0301 	and.w	r3, r3, #1
 8001c46:	60bb      	str	r3, [r7, #8]
 8001c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c4c:	69db      	ldr	r3, [r3, #28]
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c54:	61d3      	str	r3, [r2, #28]
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_MspInit+0x5c>)
 8001c58:	69db      	ldr	r3, [r3, #28]
 8001c5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c62:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <HAL_MspInit+0x60>)
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	60fb      	str	r3, [r7, #12]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c6e:	60fb      	str	r3, [r7, #12]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c76:	60fb      	str	r3, [r7, #12]
 8001c78:	4a04      	ldr	r2, [pc, #16]	; (8001c8c <HAL_MspInit+0x60>)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c7e:	bf00      	nop
 8001c80:	3714      	adds	r7, #20
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40021000 	.word	0x40021000
 8001c8c:	40010000 	.word	0x40010000

08001c90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b08a      	sub	sp, #40	; 0x28
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c98:	f107 0314 	add.w	r3, r7, #20
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	605a      	str	r2, [r3, #4]
 8001ca2:	609a      	str	r2, [r3, #8]
 8001ca4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a1d      	ldr	r2, [pc, #116]	; (8001d20 <HAL_I2C_MspInit+0x90>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d132      	bne.n	8001d16 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b1c      	ldr	r3, [pc, #112]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a1b      	ldr	r2, [pc, #108]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b19      	ldr	r3, [pc, #100]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	613b      	str	r3, [r7, #16]
 8001cc6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ccc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001cce:	2312      	movs	r3, #18
 8001cd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cd2:	2303      	movs	r3, #3
 8001cd4:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	4812      	ldr	r0, [pc, #72]	; (8001d28 <HAL_I2C_MspInit+0x98>)
 8001cde:	f000 fd65 	bl	80027ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001ce2:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <HAL_I2C_MspInit+0x9c>)
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8001ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cea:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001cee:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf2:	f043 0302 	orr.w	r3, r3, #2
 8001cf6:	627b      	str	r3, [r7, #36]	; 0x24
 8001cf8:	4a0c      	ldr	r2, [pc, #48]	; (8001d2c <HAL_I2C_MspInit+0x9c>)
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cfe:	4b09      	ldr	r3, [pc, #36]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a08      	ldr	r2, [pc, #32]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d04:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <HAL_I2C_MspInit+0x94>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d12:	60fb      	str	r3, [r7, #12]
 8001d14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d16:	bf00      	nop
 8001d18:	3728      	adds	r7, #40	; 0x28
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	40005400 	.word	0x40005400
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40010c00 	.word	0x40010c00
 8001d2c:	40010000 	.word	0x40010000

08001d30 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a26      	ldr	r2, [pc, #152]	; (8001de4 <HAL_UART_MspInit+0xb4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d145      	bne.n	8001ddc <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d50:	4b25      	ldr	r3, [pc, #148]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d52:	699b      	ldr	r3, [r3, #24]
 8001d54:	4a24      	ldr	r2, [pc, #144]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d56:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d5a:	6193      	str	r3, [r2, #24]
 8001d5c:	4b22      	ldr	r3, [pc, #136]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d64:	613b      	str	r3, [r7, #16]
 8001d66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d6a:	699b      	ldr	r3, [r3, #24]
 8001d6c:	4a1e      	ldr	r2, [pc, #120]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d6e:	f043 0308 	orr.w	r3, r3, #8
 8001d72:	6193      	str	r3, [r2, #24]
 8001d74:	4b1c      	ldr	r3, [pc, #112]	; (8001de8 <HAL_UART_MspInit+0xb8>)
 8001d76:	699b      	ldr	r3, [r3, #24]
 8001d78:	f003 0308 	and.w	r3, r3, #8
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d80:	2340      	movs	r3, #64	; 0x40
 8001d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d84:	2302      	movs	r3, #2
 8001d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d8c:	f107 0314 	add.w	r3, r7, #20
 8001d90:	4619      	mov	r1, r3
 8001d92:	4816      	ldr	r0, [pc, #88]	; (8001dec <HAL_UART_MspInit+0xbc>)
 8001d94:	f000 fd0a 	bl	80027ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001d98:	2380      	movs	r3, #128	; 0x80
 8001d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da0:	2300      	movs	r3, #0
 8001da2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da4:	f107 0314 	add.w	r3, r7, #20
 8001da8:	4619      	mov	r1, r3
 8001daa:	4810      	ldr	r0, [pc, #64]	; (8001dec <HAL_UART_MspInit+0xbc>)
 8001dac:	f000 fcfe 	bl	80027ac <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_USART1_ENABLE();
 8001db0:	4b0f      	ldr	r3, [pc, #60]	; (8001df0 <HAL_UART_MspInit+0xc0>)
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	627b      	str	r3, [r7, #36]	; 0x24
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001dbc:	627b      	str	r3, [r7, #36]	; 0x24
 8001dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc0:	f043 0304 	orr.w	r3, r3, #4
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <HAL_UART_MspInit+0xc0>)
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	6053      	str	r3, [r2, #4]

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001dcc:	2200      	movs	r2, #0
 8001dce:	2100      	movs	r1, #0
 8001dd0:	2025      	movs	r0, #37	; 0x25
 8001dd2:	f000 fcb4 	bl	800273e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001dd6:	2025      	movs	r0, #37	; 0x25
 8001dd8:	f000 fccd 	bl	8002776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ddc:	bf00      	nop
 8001dde:	3728      	adds	r7, #40	; 0x28
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	40013800 	.word	0x40013800
 8001de8:	40021000 	.word	0x40021000
 8001dec:	40010c00 	.word	0x40010c00
 8001df0:	40010000 	.word	0x40010000

08001df4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <NMI_Handler+0x4>

08001dfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <HardFault_Handler+0x4>

08001e00 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler+0x4>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <BusFault_Handler+0x4>

08001e0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <UsageFault_Handler+0x4>

08001e12 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e16:	bf00      	nop
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr

08001e1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	bc80      	pop	{r7}
 8001e28:	4770      	bx	lr

08001e2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e2e:	bf00      	nop
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr
	...

08001e38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(timeout >0)  timeout--;
 8001e3c:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <SysTick_Handler+0x38>)
 8001e3e:	881b      	ldrh	r3, [r3, #0]
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d006      	beq.n	8001e54 <SysTick_Handler+0x1c>
 8001e46:	4b0a      	ldr	r3, [pc, #40]	; (8001e70 <SysTick_Handler+0x38>)
 8001e48:	881b      	ldrh	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	b29a      	uxth	r2, r3
 8001e50:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <SysTick_Handler+0x38>)
 8001e52:	801a      	strh	r2, [r3, #0]
	if (VCCTimeout>0) VCCTimeout--;
 8001e54:	4b07      	ldr	r3, [pc, #28]	; (8001e74 <SysTick_Handler+0x3c>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	dd04      	ble.n	8001e66 <SysTick_Handler+0x2e>
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <SysTick_Handler+0x3c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	3b01      	subs	r3, #1
 8001e62:	4a04      	ldr	r2, [pc, #16]	; (8001e74 <SysTick_Handler+0x3c>)
 8001e64:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e66:	f000 fb53 	bl	8002510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	2000040c 	.word	0x2000040c
 8001e74:	20000004 	.word	0x20000004

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	Uart_isr(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f000 fa7d 	bl	800237c <Uart_isr>
  /* USER CODE END USART1_IRQn 0 */
//  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	2000027c 	.word	0x2000027c

08001e8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
	return 1;
 8001e90:	2301      	movs	r3, #1
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc80      	pop	{r7}
 8001e98:	4770      	bx	lr

08001e9a <_kill>:

int _kill(int pid, int sig)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
 8001ea2:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ea4:	f002 fd96 	bl	80049d4 <__errno>
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	2216      	movs	r2, #22
 8001eac:	601a      	str	r2, [r3, #0]
	return -1;
 8001eae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3708      	adds	r7, #8
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_exit>:

void _exit (int status)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b082      	sub	sp, #8
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001ec2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffe7 	bl	8001e9a <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ecc:	e7fe      	b.n	8001ecc <_exit+0x12>

08001ece <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b086      	sub	sp, #24
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	60b9      	str	r1, [r7, #8]
 8001ed8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	2300      	movs	r3, #0
 8001edc:	617b      	str	r3, [r7, #20]
 8001ede:	e00a      	b.n	8001ef6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ee0:	f3af 8000 	nop.w
 8001ee4:	4601      	mov	r1, r0
 8001ee6:	68bb      	ldr	r3, [r7, #8]
 8001ee8:	1c5a      	adds	r2, r3, #1
 8001eea:	60ba      	str	r2, [r7, #8]
 8001eec:	b2ca      	uxtb	r2, r1
 8001eee:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	3301      	adds	r3, #1
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	697a      	ldr	r2, [r7, #20]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	dbf0      	blt.n	8001ee0 <_read+0x12>
	}

return len;
 8001efe:	687b      	ldr	r3, [r7, #4]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b086      	sub	sp, #24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]
 8001f18:	e009      	b.n	8001f2e <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	60ba      	str	r2, [r7, #8]
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	429a      	cmp	r2, r3
 8001f34:	dbf1      	blt.n	8001f1a <_write+0x12>
	}
	return len;
 8001f36:	687b      	ldr	r3, [r7, #4]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3718      	adds	r7, #24
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_close>:

int _close(int file)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
	return -1;
 8001f48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	370c      	adds	r7, #12
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bc80      	pop	{r7}
 8001f54:	4770      	bx	lr

08001f56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f66:	605a      	str	r2, [r3, #4]
	return 0;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bc80      	pop	{r7}
 8001f72:	4770      	bx	lr

08001f74 <_isatty>:

int _isatty(int file)
{
 8001f74:	b480      	push	{r7}
 8001f76:	b083      	sub	sp, #12
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	return 1;
 8001f7c:	2301      	movs	r3, #1
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	370c      	adds	r7, #12
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bc80      	pop	{r7}
 8001f86:	4770      	bx	lr

08001f88 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b085      	sub	sp, #20
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
	return 0;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3714      	adds	r7, #20
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr

08001fa0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b086      	sub	sp, #24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa8:	4a14      	ldr	r2, [pc, #80]	; (8001ffc <_sbrk+0x5c>)
 8001faa:	4b15      	ldr	r3, [pc, #84]	; (8002000 <_sbrk+0x60>)
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fb4:	4b13      	ldr	r3, [pc, #76]	; (8002004 <_sbrk+0x64>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d102      	bne.n	8001fc2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <_sbrk+0x64>)
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <_sbrk+0x68>)
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fc2:	4b10      	ldr	r3, [pc, #64]	; (8002004 <_sbrk+0x64>)
 8001fc4:	681a      	ldr	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4413      	add	r3, r2
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d207      	bcs.n	8001fe0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fd0:	f002 fd00 	bl	80049d4 <__errno>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fde:	e009      	b.n	8001ff4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fe0:	4b08      	ldr	r3, [pc, #32]	; (8002004 <_sbrk+0x64>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	; (8002004 <_sbrk+0x64>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4413      	add	r3, r2
 8001fee:	4a05      	ldr	r2, [pc, #20]	; (8002004 <_sbrk+0x64>)
 8001ff0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	20005000 	.word	0x20005000
 8002000:	00000400 	.word	0x00000400
 8002004:	20000408 	.word	0x20000408
 8002008:	20000978 	.word	0x20000978

0800200c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002010:	bf00      	nop
 8002012:	46bd      	mov	sp, r7
 8002014:	bc80      	pop	{r7}
 8002016:	4770      	bx	lr

08002018 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 800201c:	4b0c      	ldr	r3, [pc, #48]	; (8002050 <Ringbuf_init+0x38>)
 800201e:	4a0d      	ldr	r2, [pc, #52]	; (8002054 <Ringbuf_init+0x3c>)
 8002020:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 8002022:	4b0d      	ldr	r3, [pc, #52]	; (8002058 <Ringbuf_init+0x40>)
 8002024:	4a0d      	ldr	r2, [pc, #52]	; (800205c <Ringbuf_init+0x44>)
 8002026:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8002028:	4b0d      	ldr	r3, [pc, #52]	; (8002060 <Ringbuf_init+0x48>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	695a      	ldr	r2, [r3, #20]
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <Ringbuf_init+0x48>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f042 0201 	orr.w	r2, r2, #1
 8002036:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8002038:	4b09      	ldr	r3, [pc, #36]	; (8002060 <Ringbuf_init+0x48>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	4b08      	ldr	r3, [pc, #32]	; (8002060 <Ringbuf_init+0x48>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	46bd      	mov	sp, r7
 800204c:	bc80      	pop	{r7}
 800204e:	4770      	bx	lr
 8002050:	20000820 	.word	0x20000820
 8002054:	20000410 	.word	0x20000410
 8002058:	20000824 	.word	0x20000824
 800205c:	20000618 	.word	0x20000618
 8002060:	2000027c 	.word	0x2000027c

08002064 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	4603      	mov	r3, r0
 800206c:	6039      	str	r1, [r7, #0]
 800206e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002076:	3301      	adds	r3, #1
 8002078:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800207c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	429a      	cmp	r2, r3
 8002088:	d009      	beq.n	800209e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	79f9      	ldrb	r1, [r7, #7]
 8002094:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8002096:	68fa      	ldr	r2, [r7, #12]
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800209e:	bf00      	nop
 80020a0:	3714      	adds	r7, #20
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bc80      	pop	{r7}
 80020a6:	4770      	bx	lr

080020a8 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 80020ae:	4b13      	ldr	r3, [pc, #76]	; (80020fc <Uart_read+0x54>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <Uart_read+0x54>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020be:	429a      	cmp	r2, r3
 80020c0:	d102      	bne.n	80020c8 <Uart_read+0x20>
  {
    return -1;
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c6:	e013      	b.n	80020f0 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 80020c8:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <Uart_read+0x54>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <Uart_read+0x54>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020d4:	5cd3      	ldrb	r3, [r2, r3]
 80020d6:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80020d8:	4b08      	ldr	r3, [pc, #32]	; (80020fc <Uart_read+0x54>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80020e0:	1c5a      	adds	r2, r3, #1
 80020e2:	4b06      	ldr	r3, [pc, #24]	; (80020fc <Uart_read+0x54>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020ea:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    return c;
 80020ee:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	370c      	adds	r7, #12
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc80      	pop	{r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	20000820 	.word	0x20000820

08002100 <IsDataAvailable>:
}

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8002104:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <IsDataAvailable+0x30>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800210c:	b29a      	uxth	r2, r3
 800210e:	4b08      	ldr	r3, [pc, #32]	; (8002130 <IsDataAvailable+0x30>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002116:	b29b      	uxth	r3, r3
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	b29b      	uxth	r3, r3
 800211c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8002120:	b29b      	uxth	r3, r3
 8002122:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8002126:	4618      	mov	r0, r3
 8002128:	46bd      	mov	sp, r7
 800212a:	bc80      	pop	{r7}
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	20000820 	.word	0x20000820

08002134 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8002134:	b480      	push	{r7}
 8002136:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8002138:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <Uart_peek+0x34>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8002140:	4b09      	ldr	r3, [pc, #36]	; (8002168 <Uart_peek+0x34>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002148:	429a      	cmp	r2, r3
 800214a:	d102      	bne.n	8002152 <Uart_peek+0x1e>
  {
    return -1;
 800214c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002150:	e006      	b.n	8002160 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8002152:	4b05      	ldr	r3, [pc, #20]	; (8002168 <Uart_peek+0x34>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	4b04      	ldr	r3, [pc, #16]	; (8002168 <Uart_peek+0x34>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800215e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	bc80      	pop	{r7}
 8002166:	4770      	bx	lr
 8002168:	20000820 	.word	0x20000820

0800216c <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
 8002174:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8002176:	2300      	movs	r3, #0
 8002178:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7fd ffe8 	bl	8000150 <strlen>
 8002180:	4603      	mov	r3, r0
 8002182:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 8002184:	2300      	movs	r3, #0
 8002186:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 8002188:	e01e      	b.n	80021c8 <Copy_upto+0x5c>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 800218a:	4b36      	ldr	r3, [pc, #216]	; (8002264 <Copy_upto+0xf8>)
 800218c:	6819      	ldr	r1, [r3, #0]
 800218e:	4b35      	ldr	r3, [pc, #212]	; (8002264 <Copy_upto+0xf8>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	4403      	add	r3, r0
 800219c:	5c8a      	ldrb	r2, [r1, r2]
 800219e:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80021a0:	4b30      	ldr	r3, [pc, #192]	; (8002264 <Copy_upto+0xf8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80021a8:	1c5a      	adds	r2, r3, #1
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <Copy_upto+0xf8>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021b2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	3301      	adds	r3, #1
 80021ba:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 80021bc:	bf00      	nop
 80021be:	f7ff ff9f 	bl	8002100 <IsDataAvailable>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d0fa      	beq.n	80021be <Copy_upto+0x52>
	while (Uart_peek() != string[so_far])
 80021c8:	f7ff ffb4 	bl	8002134 <Uart_peek>
 80021cc:	4601      	mov	r1, r0
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	781b      	ldrb	r3, [r3, #0]
 80021d6:	4299      	cmp	r1, r3
 80021d8:	d1d7      	bne.n	800218a <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 80021da:	e027      	b.n	800222c <Copy_upto+0xc0>
	{
		so_far++;
 80021dc:	697b      	ldr	r3, [r7, #20]
 80021de:	3301      	adds	r3, #1
 80021e0:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 80021e2:	f7ff ff61 	bl	80020a8 <Uart_read>
 80021e6:	4601      	mov	r1, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	613a      	str	r2, [r7, #16]
 80021ee:	461a      	mov	r2, r3
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	b2ca      	uxtb	r2, r1
 80021f6:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 80021f8:	697a      	ldr	r2, [r7, #20]
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d101      	bne.n	8002204 <Copy_upto+0x98>
 8002200:	2301      	movs	r3, #1
 8002202:	e02a      	b.n	800225a <Copy_upto+0xee>
		timeout = TIMEOUT_DEF;
 8002204:	4b18      	ldr	r3, [pc, #96]	; (8002268 <Copy_upto+0xfc>)
 8002206:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800220a:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800220c:	bf00      	nop
 800220e:	f7ff ff77 	bl	8002100 <IsDataAvailable>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d103      	bne.n	8002220 <Copy_upto+0xb4>
 8002218:	4b13      	ldr	r3, [pc, #76]	; (8002268 <Copy_upto+0xfc>)
 800221a:	881b      	ldrh	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1f6      	bne.n	800220e <Copy_upto+0xa2>
		if (timeout == 0) return 0;
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <Copy_upto+0xfc>)
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <Copy_upto+0xc0>
 8002228:	2300      	movs	r3, #0
 800222a:	e016      	b.n	800225a <Copy_upto+0xee>
	while (Uart_peek() == string [so_far])
 800222c:	f7ff ff82 	bl	8002134 <Uart_peek>
 8002230:	4601      	mov	r1, r0
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	4299      	cmp	r1, r3
 800223c:	d0ce      	beq.n	80021dc <Copy_upto+0x70>
	}

	if (so_far != len)
 800223e:	697a      	ldr	r2, [r7, #20]
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	429a      	cmp	r2, r3
 8002244:	d002      	beq.n	800224c <Copy_upto+0xe0>
	{
		so_far = 0;
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
		goto again;
 800224a:	e79d      	b.n	8002188 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d101      	bne.n	8002258 <Copy_upto+0xec>
 8002254:	2301      	movs	r3, #1
 8002256:	e000      	b.n	800225a <Copy_upto+0xee>
	else return 0;
 8002258:	2300      	movs	r3, #0
}
 800225a:	4618      	mov	r0, r3
 800225c:	3718      	adds	r7, #24
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000820 	.word	0x20000820
 8002268:	2000040c 	.word	0x2000040c

0800226c <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8002274:	2300      	movs	r3, #0
 8002276:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7fd ff69 	bl	8000150 <strlen>
 800227e:	4603      	mov	r3, r0
 8002280:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 8002282:	4b3c      	ldr	r3, [pc, #240]	; (8002374 <Wait_for+0x108>)
 8002284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002288:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 800228a:	bf00      	nop
 800228c:	f7ff ff38 	bl	8002100 <IsDataAvailable>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d103      	bne.n	800229e <Wait_for+0x32>
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <Wait_for+0x108>)
 8002298:	881b      	ldrh	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f6      	bne.n	800228c <Wait_for+0x20>
	if (timeout == 0) return 0;
 800229e:	4b35      	ldr	r3, [pc, #212]	; (8002374 <Wait_for+0x108>)
 80022a0:	881b      	ldrh	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d119      	bne.n	80022da <Wait_for+0x6e>
 80022a6:	2300      	movs	r3, #0
 80022a8:	e060      	b.n	800236c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80022aa:	4b33      	ldr	r3, [pc, #204]	; (8002378 <Wait_for+0x10c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80022b2:	4b31      	ldr	r3, [pc, #196]	; (8002378 <Wait_for+0x10c>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d00b      	beq.n	80022d6 <Wait_for+0x6a>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80022be:	4b2e      	ldr	r3, [pc, #184]	; (8002378 <Wait_for+0x10c>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022c6:	1c5a      	adds	r2, r3, #1
 80022c8:	4b2b      	ldr	r3, [pc, #172]	; (8002378 <Wait_for+0x10c>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80022d0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80022d4:	e001      	b.n	80022da <Wait_for+0x6e>
		}

		else
		{
			return 0;
 80022d6:	2300      	movs	r3, #0
 80022d8:	e048      	b.n	800236c <Wait_for+0x100>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 80022da:	f7ff ff2b 	bl	8002134 <Uart_peek>
 80022de:	4601      	mov	r1, r0
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	4299      	cmp	r1, r3
 80022ea:	d1de      	bne.n	80022aa <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 80022ec:	e027      	b.n	800233e <Wait_for+0xd2>
	{
		// now we will peek for the other letters too
		so_far++;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	3301      	adds	r3, #1
 80022f2:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 80022f4:	4b20      	ldr	r3, [pc, #128]	; (8002378 <Wait_for+0x10c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80022fc:	1c5a      	adds	r2, r3, #1
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <Wait_for+0x10c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002306:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		if (so_far == len) return 1;
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	68bb      	ldr	r3, [r7, #8]
 800230e:	429a      	cmp	r2, r3
 8002310:	d101      	bne.n	8002316 <Wait_for+0xaa>
 8002312:	2301      	movs	r3, #1
 8002314:	e02a      	b.n	800236c <Wait_for+0x100>
		timeout = TIMEOUT_DEF;
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <Wait_for+0x108>)
 8002318:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800231c:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800231e:	bf00      	nop
 8002320:	f7ff feee 	bl	8002100 <IsDataAvailable>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d103      	bne.n	8002332 <Wait_for+0xc6>
 800232a:	4b12      	ldr	r3, [pc, #72]	; (8002374 <Wait_for+0x108>)
 800232c:	881b      	ldrh	r3, [r3, #0]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1f6      	bne.n	8002320 <Wait_for+0xb4>
		if (timeout == 0) return 0;
 8002332:	4b10      	ldr	r3, [pc, #64]	; (8002374 <Wait_for+0x108>)
 8002334:	881b      	ldrh	r3, [r3, #0]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <Wait_for+0xd2>
 800233a:	2300      	movs	r3, #0
 800233c:	e016      	b.n	800236c <Wait_for+0x100>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800233e:	f7ff fef9 	bl	8002134 <Uart_peek>
 8002342:	4601      	mov	r1, r0
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	4413      	add	r3, r2
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	4299      	cmp	r1, r3
 800234e:	d0ce      	beq.n	80022ee <Wait_for+0x82>
	}

	if (so_far != len)
 8002350:	68fa      	ldr	r2, [r7, #12]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	429a      	cmp	r2, r3
 8002356:	d002      	beq.n	800235e <Wait_for+0xf2>
	{
		so_far = 0;
 8002358:	2300      	movs	r3, #0
 800235a:	60fb      	str	r3, [r7, #12]
		goto again;
 800235c:	e791      	b.n	8002282 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	429a      	cmp	r2, r3
 8002364:	d101      	bne.n	800236a <Wait_for+0xfe>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <Wait_for+0x100>
	else return 0;
 800236a:	2300      	movs	r3, #0
}
 800236c:	4618      	mov	r0, r3
 800236e:	3710      	adds	r7, #16
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	2000040c 	.word	0x2000040c
 8002378:	20000820 	.word	0x20000820

0800237c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d013      	beq.n	80023c6 <Uart_isr+0x4a>
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	f003 0320 	and.w	r3, r3, #32
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d00e      	beq.n	80023c6 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <Uart_isr+0xb4>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	4611      	mov	r1, r2
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fe50 	bl	8002064 <store_char>
        return;
 80023c4:	e031      	b.n	800242a <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d02c      	beq.n	800242a <Uart_isr+0xae>
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d027      	beq.n	800242a <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 80023da:	4b16      	ldr	r3, [pc, #88]	; (8002434 <Uart_isr+0xb8>)
 80023dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80023e0:	4b14      	ldr	r3, [pc, #80]	; (8002434 <Uart_isr+0xb8>)
 80023e2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80023e6:	429a      	cmp	r2, r3
 80023e8:	d108      	bne.n	80023fc <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023f8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80023fa:	e015      	b.n	8002428 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80023fc:	4b0d      	ldr	r3, [pc, #52]	; (8002434 <Uart_isr+0xb8>)
 80023fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8002402:	4a0c      	ldr	r2, [pc, #48]	; (8002434 <Uart_isr+0xb8>)
 8002404:	5cd3      	ldrb	r3, [r2, r3]
 8002406:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 8002408:	4b0a      	ldr	r3, [pc, #40]	; (8002434 <Uart_isr+0xb8>)
 800240a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800240e:	3301      	adds	r3, #1
 8002410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002414:	4a07      	ldr	r2, [pc, #28]	; (8002434 <Uart_isr+0xb8>)
 8002416:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	7bba      	ldrb	r2, [r7, #14]
 8002426:	605a      	str	r2, [r3, #4]
    	return;
 8002428:	bf00      	nop
    }
}
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}
 8002430:	20000820 	.word	0x20000820
 8002434:	20000618 	.word	0x20000618

08002438 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002438:	480c      	ldr	r0, [pc, #48]	; (800246c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800243a:	490d      	ldr	r1, [pc, #52]	; (8002470 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800243c:	4a0d      	ldr	r2, [pc, #52]	; (8002474 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800243e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002440:	e002      	b.n	8002448 <LoopCopyDataInit>

08002442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002446:	3304      	adds	r3, #4

08002448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800244a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800244c:	d3f9      	bcc.n	8002442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800244e:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002450:	4c0a      	ldr	r4, [pc, #40]	; (800247c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002454:	e001      	b.n	800245a <LoopFillZerobss>

08002456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002458:	3204      	adds	r2, #4

0800245a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800245a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800245c:	d3fb      	bcc.n	8002456 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800245e:	f7ff fdd5 	bl	800200c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002462:	f002 fabd 	bl	80049e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002466:	f7ff fa07 	bl	8001878 <main>
  bx lr
 800246a:	4770      	bx	lr
  ldr r0, =_sdata
 800246c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002470:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002474:	08007d98 	.word	0x08007d98
  ldr r2, =_sbss
 8002478:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800247c:	20000978 	.word	0x20000978

08002480 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002480:	e7fe      	b.n	8002480 <ADC1_2_IRQHandler>
	...

08002484 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002488:	4b08      	ldr	r3, [pc, #32]	; (80024ac <HAL_Init+0x28>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a07      	ldr	r2, [pc, #28]	; (80024ac <HAL_Init+0x28>)
 800248e:	f043 0310 	orr.w	r3, r3, #16
 8002492:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002494:	2003      	movs	r0, #3
 8002496:	f000 f947 	bl	8002728 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249a:	200f      	movs	r0, #15
 800249c:	f000 f808 	bl	80024b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a0:	f7ff fbc4 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a4:	2300      	movs	r3, #0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	bf00      	nop
 80024ac:	40022000 	.word	0x40022000

080024b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b082      	sub	sp, #8
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024b8:	4b12      	ldr	r3, [pc, #72]	; (8002504 <HAL_InitTick+0x54>)
 80024ba:	681a      	ldr	r2, [r3, #0]
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x58>)
 80024be:	781b      	ldrb	r3, [r3, #0]
 80024c0:	4619      	mov	r1, r3
 80024c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 f95f 	bl	8002792 <HAL_SYSTICK_Config>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e00e      	b.n	80024fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b0f      	cmp	r3, #15
 80024e2:	d80a      	bhi.n	80024fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e4:	2200      	movs	r2, #0
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024ec:	f000 f927 	bl	800273e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f0:	4a06      	ldr	r2, [pc, #24]	; (800250c <HAL_InitTick+0x5c>)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	e000      	b.n	80024fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3708      	adds	r7, #8
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20000008 	.word	0x20000008
 8002508:	20000010 	.word	0x20000010
 800250c:	2000000c 	.word	0x2000000c

08002510 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_IncTick+0x1c>)
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	461a      	mov	r2, r3
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <HAL_IncTick+0x20>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4413      	add	r3, r2
 8002520:	4a03      	ldr	r2, [pc, #12]	; (8002530 <HAL_IncTick+0x20>)
 8002522:	6013      	str	r3, [r2, #0]
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	bc80      	pop	{r7}
 800252a:	4770      	bx	lr
 800252c:	20000010 	.word	0x20000010
 8002530:	20000828 	.word	0x20000828

08002534 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  return uwTick;
 8002538:	4b02      	ldr	r3, [pc, #8]	; (8002544 <HAL_GetTick+0x10>)
 800253a:	681b      	ldr	r3, [r3, #0]
}
 800253c:	4618      	mov	r0, r3
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	20000828 	.word	0x20000828

08002548 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b084      	sub	sp, #16
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002550:	f7ff fff0 	bl	8002534 <HAL_GetTick>
 8002554:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002560:	d005      	beq.n	800256e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002562:	4b0a      	ldr	r3, [pc, #40]	; (800258c <HAL_Delay+0x44>)
 8002564:	781b      	ldrb	r3, [r3, #0]
 8002566:	461a      	mov	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	4413      	add	r3, r2
 800256c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800256e:	bf00      	nop
 8002570:	f7ff ffe0 	bl	8002534 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	68fa      	ldr	r2, [r7, #12]
 800257c:	429a      	cmp	r2, r3
 800257e:	d8f7      	bhi.n	8002570 <HAL_Delay+0x28>
  {
  }
}
 8002580:	bf00      	nop
 8002582:	bf00      	nop
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	20000010 	.word	0x20000010

08002590 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002590:	b480      	push	{r7}
 8002592:	b085      	sub	sp, #20
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f003 0307 	and.w	r3, r3, #7
 800259e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025a0:	4b0c      	ldr	r3, [pc, #48]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025a6:	68ba      	ldr	r2, [r7, #8]
 80025a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80025ac:	4013      	ands	r3, r2
 80025ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80025bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025c2:	4a04      	ldr	r2, [pc, #16]	; (80025d4 <__NVIC_SetPriorityGrouping+0x44>)
 80025c4:	68bb      	ldr	r3, [r7, #8]
 80025c6:	60d3      	str	r3, [r2, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bc80      	pop	{r7}
 80025d0:	4770      	bx	lr
 80025d2:	bf00      	nop
 80025d4:	e000ed00 	.word	0xe000ed00

080025d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025dc:	4b04      	ldr	r3, [pc, #16]	; (80025f0 <__NVIC_GetPriorityGrouping+0x18>)
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	0a1b      	lsrs	r3, r3, #8
 80025e2:	f003 0307 	and.w	r3, r3, #7
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bc80      	pop	{r7}
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	4603      	mov	r3, r0
 80025fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	2b00      	cmp	r3, #0
 8002604:	db0b      	blt.n	800261e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	f003 021f 	and.w	r2, r3, #31
 800260c:	4906      	ldr	r1, [pc, #24]	; (8002628 <__NVIC_EnableIRQ+0x34>)
 800260e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002612:	095b      	lsrs	r3, r3, #5
 8002614:	2001      	movs	r0, #1
 8002616:	fa00 f202 	lsl.w	r2, r0, r2
 800261a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800261e:	bf00      	nop
 8002620:	370c      	adds	r7, #12
 8002622:	46bd      	mov	sp, r7
 8002624:	bc80      	pop	{r7}
 8002626:	4770      	bx	lr
 8002628:	e000e100 	.word	0xe000e100

0800262c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	4603      	mov	r3, r0
 8002634:	6039      	str	r1, [r7, #0]
 8002636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263c:	2b00      	cmp	r3, #0
 800263e:	db0a      	blt.n	8002656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	b2da      	uxtb	r2, r3
 8002644:	490c      	ldr	r1, [pc, #48]	; (8002678 <__NVIC_SetPriority+0x4c>)
 8002646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800264a:	0112      	lsls	r2, r2, #4
 800264c:	b2d2      	uxtb	r2, r2
 800264e:	440b      	add	r3, r1
 8002650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002654:	e00a      	b.n	800266c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	4908      	ldr	r1, [pc, #32]	; (800267c <__NVIC_SetPriority+0x50>)
 800265c:	79fb      	ldrb	r3, [r7, #7]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	3b04      	subs	r3, #4
 8002664:	0112      	lsls	r2, r2, #4
 8002666:	b2d2      	uxtb	r2, r2
 8002668:	440b      	add	r3, r1
 800266a:	761a      	strb	r2, [r3, #24]
}
 800266c:	bf00      	nop
 800266e:	370c      	adds	r7, #12
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr
 8002676:	bf00      	nop
 8002678:	e000e100 	.word	0xe000e100
 800267c:	e000ed00 	.word	0xe000ed00

08002680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002680:	b480      	push	{r7}
 8002682:	b089      	sub	sp, #36	; 0x24
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f1c3 0307 	rsb	r3, r3, #7
 800269a:	2b04      	cmp	r3, #4
 800269c:	bf28      	it	cs
 800269e:	2304      	movcs	r3, #4
 80026a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	3304      	adds	r3, #4
 80026a6:	2b06      	cmp	r3, #6
 80026a8:	d902      	bls.n	80026b0 <NVIC_EncodePriority+0x30>
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	3b03      	subs	r3, #3
 80026ae:	e000      	b.n	80026b2 <NVIC_EncodePriority+0x32>
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43da      	mvns	r2, r3
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	401a      	ands	r2, r3
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	fa01 f303 	lsl.w	r3, r1, r3
 80026d2:	43d9      	mvns	r1, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026d8:	4313      	orrs	r3, r2
         );
}
 80026da:	4618      	mov	r0, r3
 80026dc:	3724      	adds	r7, #36	; 0x24
 80026de:	46bd      	mov	sp, r7
 80026e0:	bc80      	pop	{r7}
 80026e2:	4770      	bx	lr

080026e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80026f4:	d301      	bcc.n	80026fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00f      	b.n	800271a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <SysTick_Config+0x40>)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	3b01      	subs	r3, #1
 8002700:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002702:	210f      	movs	r1, #15
 8002704:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002708:	f7ff ff90 	bl	800262c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800270c:	4b05      	ldr	r3, [pc, #20]	; (8002724 <SysTick_Config+0x40>)
 800270e:	2200      	movs	r2, #0
 8002710:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002712:	4b04      	ldr	r3, [pc, #16]	; (8002724 <SysTick_Config+0x40>)
 8002714:	2207      	movs	r2, #7
 8002716:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}
 8002722:	bf00      	nop
 8002724:	e000e010 	.word	0xe000e010

08002728 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b082      	sub	sp, #8
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002730:	6878      	ldr	r0, [r7, #4]
 8002732:	f7ff ff2d 	bl	8002590 <__NVIC_SetPriorityGrouping>
}
 8002736:	bf00      	nop
 8002738:	3708      	adds	r7, #8
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}

0800273e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800273e:	b580      	push	{r7, lr}
 8002740:	b086      	sub	sp, #24
 8002742:	af00      	add	r7, sp, #0
 8002744:	4603      	mov	r3, r0
 8002746:	60b9      	str	r1, [r7, #8]
 8002748:	607a      	str	r2, [r7, #4]
 800274a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800274c:	2300      	movs	r3, #0
 800274e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002750:	f7ff ff42 	bl	80025d8 <__NVIC_GetPriorityGrouping>
 8002754:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	6978      	ldr	r0, [r7, #20]
 800275c:	f7ff ff90 	bl	8002680 <NVIC_EncodePriority>
 8002760:	4602      	mov	r2, r0
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f7ff ff5f 	bl	800262c <__NVIC_SetPriority>
}
 800276e:	bf00      	nop
 8002770:	3718      	adds	r7, #24
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002776:	b580      	push	{r7, lr}
 8002778:	b082      	sub	sp, #8
 800277a:	af00      	add	r7, sp, #0
 800277c:	4603      	mov	r3, r0
 800277e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002780:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002784:	4618      	mov	r0, r3
 8002786:	f7ff ff35 	bl	80025f4 <__NVIC_EnableIRQ>
}
 800278a:	bf00      	nop
 800278c:	3708      	adds	r7, #8
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b082      	sub	sp, #8
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff ffa2 	bl	80026e4 <SysTick_Config>
 80027a0:	4603      	mov	r3, r0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b08b      	sub	sp, #44	; 0x2c
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80027b6:	2300      	movs	r3, #0
 80027b8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80027ba:	2300      	movs	r3, #0
 80027bc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027be:	e169      	b.n	8002a94 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80027c0:	2201      	movs	r2, #1
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69fa      	ldr	r2, [r7, #28]
 80027d0:	4013      	ands	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	429a      	cmp	r2, r3
 80027da:	f040 8158 	bne.w	8002a8e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4a9a      	ldr	r2, [pc, #616]	; (8002a4c <HAL_GPIO_Init+0x2a0>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d05e      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 80027e8:	4a98      	ldr	r2, [pc, #608]	; (8002a4c <HAL_GPIO_Init+0x2a0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d875      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 80027ee:	4a98      	ldr	r2, [pc, #608]	; (8002a50 <HAL_GPIO_Init+0x2a4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d058      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 80027f4:	4a96      	ldr	r2, [pc, #600]	; (8002a50 <HAL_GPIO_Init+0x2a4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d86f      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 80027fa:	4a96      	ldr	r2, [pc, #600]	; (8002a54 <HAL_GPIO_Init+0x2a8>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d052      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 8002800:	4a94      	ldr	r2, [pc, #592]	; (8002a54 <HAL_GPIO_Init+0x2a8>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d869      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002806:	4a94      	ldr	r2, [pc, #592]	; (8002a58 <HAL_GPIO_Init+0x2ac>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d04c      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 800280c:	4a92      	ldr	r2, [pc, #584]	; (8002a58 <HAL_GPIO_Init+0x2ac>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d863      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002812:	4a92      	ldr	r2, [pc, #584]	; (8002a5c <HAL_GPIO_Init+0x2b0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d046      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
 8002818:	4a90      	ldr	r2, [pc, #576]	; (8002a5c <HAL_GPIO_Init+0x2b0>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d85d      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 800281e:	2b12      	cmp	r3, #18
 8002820:	d82a      	bhi.n	8002878 <HAL_GPIO_Init+0xcc>
 8002822:	2b12      	cmp	r3, #18
 8002824:	d859      	bhi.n	80028da <HAL_GPIO_Init+0x12e>
 8002826:	a201      	add	r2, pc, #4	; (adr r2, 800282c <HAL_GPIO_Init+0x80>)
 8002828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800282c:	080028a7 	.word	0x080028a7
 8002830:	08002881 	.word	0x08002881
 8002834:	08002893 	.word	0x08002893
 8002838:	080028d5 	.word	0x080028d5
 800283c:	080028db 	.word	0x080028db
 8002840:	080028db 	.word	0x080028db
 8002844:	080028db 	.word	0x080028db
 8002848:	080028db 	.word	0x080028db
 800284c:	080028db 	.word	0x080028db
 8002850:	080028db 	.word	0x080028db
 8002854:	080028db 	.word	0x080028db
 8002858:	080028db 	.word	0x080028db
 800285c:	080028db 	.word	0x080028db
 8002860:	080028db 	.word	0x080028db
 8002864:	080028db 	.word	0x080028db
 8002868:	080028db 	.word	0x080028db
 800286c:	080028db 	.word	0x080028db
 8002870:	08002889 	.word	0x08002889
 8002874:	0800289d 	.word	0x0800289d
 8002878:	4a79      	ldr	r2, [pc, #484]	; (8002a60 <HAL_GPIO_Init+0x2b4>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d013      	beq.n	80028a6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800287e:	e02c      	b.n	80028da <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	68db      	ldr	r3, [r3, #12]
 8002884:	623b      	str	r3, [r7, #32]
          break;
 8002886:	e029      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	3304      	adds	r3, #4
 800288e:	623b      	str	r3, [r7, #32]
          break;
 8002890:	e024      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	3308      	adds	r3, #8
 8002898:	623b      	str	r3, [r7, #32]
          break;
 800289a:	e01f      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	330c      	adds	r3, #12
 80028a2:	623b      	str	r3, [r7, #32]
          break;
 80028a4:	e01a      	b.n	80028dc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d102      	bne.n	80028b4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80028ae:	2304      	movs	r3, #4
 80028b0:	623b      	str	r3, [r7, #32]
          break;
 80028b2:	e013      	b.n	80028dc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d105      	bne.n	80028c8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028bc:	2308      	movs	r3, #8
 80028be:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	69fa      	ldr	r2, [r7, #28]
 80028c4:	611a      	str	r2, [r3, #16]
          break;
 80028c6:	e009      	b.n	80028dc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80028c8:	2308      	movs	r3, #8
 80028ca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	69fa      	ldr	r2, [r7, #28]
 80028d0:	615a      	str	r2, [r3, #20]
          break;
 80028d2:	e003      	b.n	80028dc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80028d4:	2300      	movs	r3, #0
 80028d6:	623b      	str	r3, [r7, #32]
          break;
 80028d8:	e000      	b.n	80028dc <HAL_GPIO_Init+0x130>
          break;
 80028da:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	2bff      	cmp	r3, #255	; 0xff
 80028e0:	d801      	bhi.n	80028e6 <HAL_GPIO_Init+0x13a>
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	e001      	b.n	80028ea <HAL_GPIO_Init+0x13e>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	2bff      	cmp	r3, #255	; 0xff
 80028f0:	d802      	bhi.n	80028f8 <HAL_GPIO_Init+0x14c>
 80028f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	e002      	b.n	80028fe <HAL_GPIO_Init+0x152>
 80028f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fa:	3b08      	subs	r3, #8
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	210f      	movs	r1, #15
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	fa01 f303 	lsl.w	r3, r1, r3
 800290c:	43db      	mvns	r3, r3
 800290e:	401a      	ands	r2, r3
 8002910:	6a39      	ldr	r1, [r7, #32]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	fa01 f303 	lsl.w	r3, r1, r3
 8002918:	431a      	orrs	r2, r3
 800291a:	697b      	ldr	r3, [r7, #20]
 800291c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002926:	2b00      	cmp	r3, #0
 8002928:	f000 80b1 	beq.w	8002a8e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800292c:	4b4d      	ldr	r3, [pc, #308]	; (8002a64 <HAL_GPIO_Init+0x2b8>)
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <HAL_GPIO_Init+0x2b8>)
 8002932:	f043 0301 	orr.w	r3, r3, #1
 8002936:	6193      	str	r3, [r2, #24]
 8002938:	4b4a      	ldr	r3, [pc, #296]	; (8002a64 <HAL_GPIO_Init+0x2b8>)
 800293a:	699b      	ldr	r3, [r3, #24]
 800293c:	f003 0301 	and.w	r3, r3, #1
 8002940:	60bb      	str	r3, [r7, #8]
 8002942:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002944:	4a48      	ldr	r2, [pc, #288]	; (8002a68 <HAL_GPIO_Init+0x2bc>)
 8002946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002948:	089b      	lsrs	r3, r3, #2
 800294a:	3302      	adds	r3, #2
 800294c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002950:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	220f      	movs	r2, #15
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4013      	ands	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	4a40      	ldr	r2, [pc, #256]	; (8002a6c <HAL_GPIO_Init+0x2c0>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_GPIO_Init+0x1ec>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	4a3f      	ldr	r2, [pc, #252]	; (8002a70 <HAL_GPIO_Init+0x2c4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d00d      	beq.n	8002994 <HAL_GPIO_Init+0x1e8>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a3e      	ldr	r2, [pc, #248]	; (8002a74 <HAL_GPIO_Init+0x2c8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d007      	beq.n	8002990 <HAL_GPIO_Init+0x1e4>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a3d      	ldr	r2, [pc, #244]	; (8002a78 <HAL_GPIO_Init+0x2cc>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d101      	bne.n	800298c <HAL_GPIO_Init+0x1e0>
 8002988:	2303      	movs	r3, #3
 800298a:	e006      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 800298c:	2304      	movs	r3, #4
 800298e:	e004      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002990:	2302      	movs	r3, #2
 8002992:	e002      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <HAL_GPIO_Init+0x1ee>
 8002998:	2300      	movs	r3, #0
 800299a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800299c:	f002 0203 	and.w	r2, r2, #3
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	4093      	lsls	r3, r2
 80029a4:	68fa      	ldr	r2, [r7, #12]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80029aa:	492f      	ldr	r1, [pc, #188]	; (8002a68 <HAL_GPIO_Init+0x2bc>)
 80029ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ae:	089b      	lsrs	r3, r3, #2
 80029b0:	3302      	adds	r3, #2
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029c4:	4b2d      	ldr	r3, [pc, #180]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	492c      	ldr	r1, [pc, #176]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80029d2:	4b2a      	ldr	r3, [pc, #168]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4928      	ldr	r1, [pc, #160]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d006      	beq.n	80029fa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029ec:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029ee:	685a      	ldr	r2, [r3, #4]
 80029f0:	4922      	ldr	r1, [pc, #136]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
 80029f8:	e006      	b.n	8002a08 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	491e      	ldr	r1, [pc, #120]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a04:	4013      	ands	r3, r2
 8002a06:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d006      	beq.n	8002a22 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a16:	689a      	ldr	r2, [r3, #8]
 8002a18:	4918      	ldr	r1, [pc, #96]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	608b      	str	r3, [r1, #8]
 8002a20:	e006      	b.n	8002a30 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a22:	4b16      	ldr	r3, [pc, #88]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a24:	689a      	ldr	r2, [r3, #8]
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	4914      	ldr	r1, [pc, #80]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d021      	beq.n	8002a80 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a3c:	4b0f      	ldr	r3, [pc, #60]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a3e:	68da      	ldr	r2, [r3, #12]
 8002a40:	490e      	ldr	r1, [pc, #56]	; (8002a7c <HAL_GPIO_Init+0x2d0>)
 8002a42:	69bb      	ldr	r3, [r7, #24]
 8002a44:	4313      	orrs	r3, r2
 8002a46:	60cb      	str	r3, [r1, #12]
 8002a48:	e021      	b.n	8002a8e <HAL_GPIO_Init+0x2e2>
 8002a4a:	bf00      	nop
 8002a4c:	10320000 	.word	0x10320000
 8002a50:	10310000 	.word	0x10310000
 8002a54:	10220000 	.word	0x10220000
 8002a58:	10210000 	.word	0x10210000
 8002a5c:	10120000 	.word	0x10120000
 8002a60:	10110000 	.word	0x10110000
 8002a64:	40021000 	.word	0x40021000
 8002a68:	40010000 	.word	0x40010000
 8002a6c:	40010800 	.word	0x40010800
 8002a70:	40010c00 	.word	0x40010c00
 8002a74:	40011000 	.word	0x40011000
 8002a78:	40011400 	.word	0x40011400
 8002a7c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a80:	4b0b      	ldr	r3, [pc, #44]	; (8002ab0 <HAL_GPIO_Init+0x304>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	43db      	mvns	r3, r3
 8002a88:	4909      	ldr	r1, [pc, #36]	; (8002ab0 <HAL_GPIO_Init+0x304>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	3301      	adds	r3, #1
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681a      	ldr	r2, [r3, #0]
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f47f ae8e 	bne.w	80027c0 <HAL_GPIO_Init+0x14>
  }
}
 8002aa4:	bf00      	nop
 8002aa6:	bf00      	nop
 8002aa8:	372c      	adds	r7, #44	; 0x2c
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40010400 	.word	0x40010400

08002ab4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b084      	sub	sp, #16
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e12b      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d106      	bne.n	8002ae0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff f8d8 	bl	8001c90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2224      	movs	r2, #36	; 0x24
 8002ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f022 0201 	bic.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b18:	f000 ffea 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8002b1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a81      	ldr	r2, [pc, #516]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d807      	bhi.n	8002b38 <HAL_I2C_Init+0x84>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	4a80      	ldr	r2, [pc, #512]	; (8002d2c <HAL_I2C_Init+0x278>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	bf94      	ite	ls
 8002b30:	2301      	movls	r3, #1
 8002b32:	2300      	movhi	r3, #0
 8002b34:	b2db      	uxtb	r3, r3
 8002b36:	e006      	b.n	8002b46 <HAL_I2C_Init+0x92>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4a7d      	ldr	r2, [pc, #500]	; (8002d30 <HAL_I2C_Init+0x27c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	bf94      	ite	ls
 8002b40:	2301      	movls	r3, #1
 8002b42:	2300      	movhi	r3, #0
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d001      	beq.n	8002b4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	e0e7      	b.n	8002d1e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	4a78      	ldr	r2, [pc, #480]	; (8002d34 <HAL_I2C_Init+0x280>)
 8002b52:	fba2 2303 	umull	r2, r3, r2, r3
 8002b56:	0c9b      	lsrs	r3, r3, #18
 8002b58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	68ba      	ldr	r2, [r7, #8]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	4a6a      	ldr	r2, [pc, #424]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d802      	bhi.n	8002b88 <HAL_I2C_Init+0xd4>
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	3301      	adds	r3, #1
 8002b86:	e009      	b.n	8002b9c <HAL_I2C_Init+0xe8>
 8002b88:	68bb      	ldr	r3, [r7, #8]
 8002b8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002b8e:	fb02 f303 	mul.w	r3, r2, r3
 8002b92:	4a69      	ldr	r2, [pc, #420]	; (8002d38 <HAL_I2C_Init+0x284>)
 8002b94:	fba2 2303 	umull	r2, r3, r2, r3
 8002b98:	099b      	lsrs	r3, r3, #6
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	6812      	ldr	r2, [r2, #0]
 8002ba0:	430b      	orrs	r3, r1
 8002ba2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	69db      	ldr	r3, [r3, #28]
 8002baa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	495c      	ldr	r1, [pc, #368]	; (8002d28 <HAL_I2C_Init+0x274>)
 8002bb8:	428b      	cmp	r3, r1
 8002bba:	d819      	bhi.n	8002bf0 <HAL_I2C_Init+0x13c>
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	1e59      	subs	r1, r3, #1
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	005b      	lsls	r3, r3, #1
 8002bc6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bca:	1c59      	adds	r1, r3, #1
 8002bcc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bd0:	400b      	ands	r3, r1
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d00a      	beq.n	8002bec <HAL_I2C_Init+0x138>
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	1e59      	subs	r1, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	005b      	lsls	r3, r3, #1
 8002be0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002be4:	3301      	adds	r3, #1
 8002be6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bea:	e051      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bec:	2304      	movs	r3, #4
 8002bee:	e04f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d111      	bne.n	8002c1c <HAL_I2C_Init+0x168>
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	1e58      	subs	r0, r3, #1
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6859      	ldr	r1, [r3, #4]
 8002c00:	460b      	mov	r3, r1
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	440b      	add	r3, r1
 8002c06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	bf0c      	ite	eq
 8002c14:	2301      	moveq	r3, #1
 8002c16:	2300      	movne	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
 8002c1a:	e012      	b.n	8002c42 <HAL_I2C_Init+0x18e>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	0099      	lsls	r1, r3, #2
 8002c2c:	440b      	add	r3, r1
 8002c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c32:	3301      	adds	r3, #1
 8002c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <HAL_I2C_Init+0x196>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e022      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d10e      	bne.n	8002c70 <HAL_I2C_Init+0x1bc>
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	1e58      	subs	r0, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	005b      	lsls	r3, r3, #1
 8002c5e:	440b      	add	r3, r1
 8002c60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c64:	3301      	adds	r3, #1
 8002c66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c6e:	e00f      	b.n	8002c90 <HAL_I2C_Init+0x1dc>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	6809      	ldr	r1, [r1, #0]
 8002c94:	4313      	orrs	r3, r2
 8002c96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	69da      	ldr	r2, [r3, #28]
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	431a      	orrs	r2, r3
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	430a      	orrs	r2, r1
 8002cb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002cbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	6911      	ldr	r1, [r2, #16]
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	68d2      	ldr	r2, [r2, #12]
 8002cca:	4311      	orrs	r1, r2
 8002ccc:	687a      	ldr	r2, [r7, #4]
 8002cce:	6812      	ldr	r2, [r2, #0]
 8002cd0:	430b      	orrs	r3, r1
 8002cd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695a      	ldr	r2, [r3, #20]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	431a      	orrs	r2, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f042 0201 	orr.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2200      	movs	r2, #0
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2220      	movs	r2, #32
 8002d0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2200      	movs	r2, #0
 8002d12:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	000186a0 	.word	0x000186a0
 8002d2c:	001e847f 	.word	0x001e847f
 8002d30:	003d08ff 	.word	0x003d08ff
 8002d34:	431bde83 	.word	0x431bde83
 8002d38:	10624dd3 	.word	0x10624dd3

08002d3c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b088      	sub	sp, #32
 8002d40:	af02      	add	r7, sp, #8
 8002d42:	60f8      	str	r0, [r7, #12]
 8002d44:	607a      	str	r2, [r7, #4]
 8002d46:	461a      	mov	r2, r3
 8002d48:	460b      	mov	r3, r1
 8002d4a:	817b      	strh	r3, [r7, #10]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d50:	f7ff fbf0 	bl	8002534 <HAL_GetTick>
 8002d54:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d5c:	b2db      	uxtb	r3, r3
 8002d5e:	2b20      	cmp	r3, #32
 8002d60:	f040 80e0 	bne.w	8002f24 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	2319      	movs	r3, #25
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	4970      	ldr	r1, [pc, #448]	; (8002f30 <HAL_I2C_Master_Transmit+0x1f4>)
 8002d6e:	68f8      	ldr	r0, [r7, #12]
 8002d70:	f000 f964 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	e0d3      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d101      	bne.n	8002d8c <HAL_I2C_Master_Transmit+0x50>
 8002d88:	2302      	movs	r3, #2
 8002d8a:	e0cc      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2201      	movs	r2, #1
 8002d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d007      	beq.n	8002db2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f042 0201 	orr.w	r2, r2, #1
 8002db0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dc0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2221      	movs	r2, #33	; 0x21
 8002dc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2210      	movs	r2, #16
 8002dce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	893a      	ldrh	r2, [r7, #8]
 8002de2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002de8:	b29a      	uxth	r2, r3
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	4a50      	ldr	r2, [pc, #320]	; (8002f34 <HAL_I2C_Master_Transmit+0x1f8>)
 8002df2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002df4:	8979      	ldrh	r1, [r7, #10]
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	6a3a      	ldr	r2, [r7, #32]
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f000 f89c 	bl	8002f38 <I2C_MasterRequestWrite>
 8002e00:	4603      	mov	r3, r0
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e08d      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	613b      	str	r3, [r7, #16]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	695b      	ldr	r3, [r3, #20]
 8002e14:	613b      	str	r3, [r7, #16]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	613b      	str	r3, [r7, #16]
 8002e1e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e20:	e066      	b.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e22:	697a      	ldr	r2, [r7, #20]
 8002e24:	6a39      	ldr	r1, [r7, #32]
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f000 f9de 	bl	80031e8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00d      	beq.n	8002e4e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	2b04      	cmp	r3, #4
 8002e38:	d107      	bne.n	8002e4a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e48:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e06b      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	781a      	ldrb	r2, [r3, #0]
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5e:	1c5a      	adds	r2, r3, #1
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e76:	3b01      	subs	r3, #1
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f003 0304 	and.w	r3, r3, #4
 8002e88:	2b04      	cmp	r3, #4
 8002e8a:	d11b      	bne.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d017      	beq.n	8002ec4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	781a      	ldrb	r2, [r3, #0]
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002eae:	b29b      	uxth	r3, r3
 8002eb0:	3b01      	subs	r3, #1
 8002eb2:	b29a      	uxth	r2, r3
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	6a39      	ldr	r1, [r7, #32]
 8002ec8:	68f8      	ldr	r0, [r7, #12]
 8002eca:	f000 f9ce 	bl	800326a <I2C_WaitOnBTFFlagUntilTimeout>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00d      	beq.n	8002ef0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	2b04      	cmp	r3, #4
 8002eda:	d107      	bne.n	8002eec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e01a      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d194      	bne.n	8002e22 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681a      	ldr	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	e000      	b.n	8002f26 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f24:	2302      	movs	r3, #2
  }
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3718      	adds	r7, #24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	00100002 	.word	0x00100002
 8002f34:	ffff0000 	.word	0xffff0000

08002f38 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af02      	add	r7, sp, #8
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	607a      	str	r2, [r7, #4]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	460b      	mov	r3, r1
 8002f46:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f4c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	2b08      	cmp	r3, #8
 8002f52:	d006      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d003      	beq.n	8002f62 <I2C_MasterRequestWrite+0x2a>
 8002f5a:	697b      	ldr	r3, [r7, #20]
 8002f5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f60:	d108      	bne.n	8002f74 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e00b      	b.n	8002f8c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	2b12      	cmp	r3, #18
 8002f7a:	d107      	bne.n	8002f8c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	9300      	str	r3, [sp, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002f98:	68f8      	ldr	r0, [r7, #12]
 8002f9a:	f000 f84f 	bl	800303c <I2C_WaitOnFlagUntilTimeout>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00d      	beq.n	8002fc0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d103      	bne.n	8002fbc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002fba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e035      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fc8:	d108      	bne.n	8002fdc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002fca:	897b      	ldrh	r3, [r7, #10]
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002fd8:	611a      	str	r2, [r3, #16]
 8002fda:	e01b      	b.n	8003014 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002fdc:	897b      	ldrh	r3, [r7, #10]
 8002fde:	11db      	asrs	r3, r3, #7
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	f003 0306 	and.w	r3, r3, #6
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f063 030f 	orn	r3, r3, #15
 8002fec:	b2da      	uxtb	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	687a      	ldr	r2, [r7, #4]
 8002ff8:	490e      	ldr	r1, [pc, #56]	; (8003034 <I2C_MasterRequestWrite+0xfc>)
 8002ffa:	68f8      	ldr	r0, [r7, #12]
 8002ffc:	f000 f875 	bl	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003000:	4603      	mov	r3, r0
 8003002:	2b00      	cmp	r3, #0
 8003004:	d001      	beq.n	800300a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e010      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800300a:	897b      	ldrh	r3, [r7, #10]
 800300c:	b2da      	uxtb	r2, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	687a      	ldr	r2, [r7, #4]
 8003018:	4907      	ldr	r1, [pc, #28]	; (8003038 <I2C_MasterRequestWrite+0x100>)
 800301a:	68f8      	ldr	r0, [r7, #12]
 800301c:	f000 f865 	bl	80030ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003020:	4603      	mov	r3, r0
 8003022:	2b00      	cmp	r3, #0
 8003024:	d001      	beq.n	800302a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e000      	b.n	800302c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	00010008 	.word	0x00010008
 8003038:	00010002 	.word	0x00010002

0800303c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	4613      	mov	r3, r2
 800304a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800304c:	e025      	b.n	800309a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003054:	d021      	beq.n	800309a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003056:	f7ff fa6d 	bl	8002534 <HAL_GetTick>
 800305a:	4602      	mov	r2, r0
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	1ad3      	subs	r3, r2, r3
 8003060:	683a      	ldr	r2, [r7, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d302      	bcc.n	800306c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d116      	bne.n	800309a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	2200      	movs	r2, #0
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	2220      	movs	r2, #32
 8003076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	f043 0220 	orr.w	r2, r3, #32
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e023      	b.n	80030e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	0c1b      	lsrs	r3, r3, #16
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	2b01      	cmp	r3, #1
 80030a2:	d10d      	bne.n	80030c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	695b      	ldr	r3, [r3, #20]
 80030aa:	43da      	mvns	r2, r3
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	4013      	ands	r3, r2
 80030b0:	b29b      	uxth	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	bf0c      	ite	eq
 80030b6:	2301      	moveq	r3, #1
 80030b8:	2300      	movne	r3, #0
 80030ba:	b2db      	uxtb	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	e00c      	b.n	80030da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	43da      	mvns	r2, r3
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	4013      	ands	r3, r2
 80030cc:	b29b      	uxth	r3, r3
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	bf0c      	ite	eq
 80030d2:	2301      	moveq	r3, #1
 80030d4:	2300      	movne	r3, #0
 80030d6:	b2db      	uxtb	r3, r3
 80030d8:	461a      	mov	r2, r3
 80030da:	79fb      	ldrb	r3, [r7, #7]
 80030dc:	429a      	cmp	r2, r3
 80030de:	d0b6      	beq.n	800304e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3710      	adds	r7, #16
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}

080030ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80030ea:	b580      	push	{r7, lr}
 80030ec:	b084      	sub	sp, #16
 80030ee:	af00      	add	r7, sp, #0
 80030f0:	60f8      	str	r0, [r7, #12]
 80030f2:	60b9      	str	r1, [r7, #8]
 80030f4:	607a      	str	r2, [r7, #4]
 80030f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030f8:	e051      	b.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003108:	d123      	bne.n	8003152 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003118:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003122:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f043 0204 	orr.w	r2, r3, #4
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e046      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003158:	d021      	beq.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800315a:	f7ff f9eb 	bl	8002534 <HAL_GetTick>
 800315e:	4602      	mov	r2, r0
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	429a      	cmp	r2, r3
 8003168:	d302      	bcc.n	8003170 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d116      	bne.n	800319e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2220      	movs	r2, #32
 800317a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318a:	f043 0220 	orr.w	r2, r3, #32
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e020      	b.n	80031e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	0c1b      	lsrs	r3, r3, #16
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d10c      	bne.n	80031c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	43da      	mvns	r2, r3
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	4013      	ands	r3, r2
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	bf14      	ite	ne
 80031ba:	2301      	movne	r3, #1
 80031bc:	2300      	moveq	r3, #0
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	e00b      	b.n	80031da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	43da      	mvns	r2, r3
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	4013      	ands	r3, r2
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	bf14      	ite	ne
 80031d4:	2301      	movne	r3, #1
 80031d6:	2300      	moveq	r3, #0
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d18d      	bne.n	80030fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80031de:	2300      	movs	r3, #0
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3710      	adds	r7, #16
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b084      	sub	sp, #16
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80031f4:	e02d      	b.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 f878 	bl	80032ec <I2C_IsAcknowledgeFailed>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d001      	beq.n	8003206 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e02d      	b.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800320c:	d021      	beq.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800320e:	f7ff f991 	bl	8002534 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	429a      	cmp	r2, r3
 800321c:	d302      	bcc.n	8003224 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d116      	bne.n	8003252 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2200      	movs	r2, #0
 8003228:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	2220      	movs	r2, #32
 800322e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2200      	movs	r2, #0
 8003236:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f043 0220 	orr.w	r2, r3, #32
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800324e:	2301      	movs	r3, #1
 8003250:	e007      	b.n	8003262 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	695b      	ldr	r3, [r3, #20]
 8003258:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800325c:	2b80      	cmp	r3, #128	; 0x80
 800325e:	d1ca      	bne.n	80031f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3710      	adds	r7, #16
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800326a:	b580      	push	{r7, lr}
 800326c:	b084      	sub	sp, #16
 800326e:	af00      	add	r7, sp, #0
 8003270:	60f8      	str	r0, [r7, #12]
 8003272:	60b9      	str	r1, [r7, #8]
 8003274:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003276:	e02d      	b.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f000 f837 	bl	80032ec <I2C_IsAcknowledgeFailed>
 800327e:	4603      	mov	r3, r0
 8003280:	2b00      	cmp	r3, #0
 8003282:	d001      	beq.n	8003288 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e02d      	b.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800328e:	d021      	beq.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003290:	f7ff f950 	bl	8002534 <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	68ba      	ldr	r2, [r7, #8]
 800329c:	429a      	cmp	r2, r3
 800329e:	d302      	bcc.n	80032a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d116      	bne.n	80032d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2200      	movs	r2, #0
 80032aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2220      	movs	r2, #32
 80032b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2200      	movs	r2, #0
 80032b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	f043 0220 	orr.w	r2, r3, #32
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e007      	b.n	80032e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	695b      	ldr	r3, [r3, #20]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b04      	cmp	r3, #4
 80032e0:	d1ca      	bne.n	8003278 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80032e2:	2300      	movs	r3, #0
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3710      	adds	r7, #16
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80032ec:	b480      	push	{r7}
 80032ee:	b083      	sub	sp, #12
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003302:	d11b      	bne.n	800333c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800330c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2220      	movs	r2, #32
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	f043 0204 	orr.w	r2, r3, #4
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800333c:	2300      	movs	r3, #0
}
 800333e:	4618      	mov	r0, r3
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b086      	sub	sp, #24
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e272      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f003 0301 	and.w	r3, r3, #1
 8003362:	2b00      	cmp	r3, #0
 8003364:	f000 8087 	beq.w	8003476 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003368:	4b92      	ldr	r3, [pc, #584]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f003 030c 	and.w	r3, r3, #12
 8003370:	2b04      	cmp	r3, #4
 8003372:	d00c      	beq.n	800338e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003374:	4b8f      	ldr	r3, [pc, #572]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d112      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
 8003380:	4b8c      	ldr	r3, [pc, #560]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003388:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800338c:	d10b      	bne.n	80033a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800338e:	4b89      	ldr	r3, [pc, #548]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d06c      	beq.n	8003474 <HAL_RCC_OscConfig+0x12c>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d168      	bne.n	8003474 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	e24c      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033ae:	d106      	bne.n	80033be <HAL_RCC_OscConfig+0x76>
 80033b0:	4b80      	ldr	r3, [pc, #512]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a7f      	ldr	r2, [pc, #508]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ba:	6013      	str	r3, [r2, #0]
 80033bc:	e02e      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d10c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x98>
 80033c6:	4b7b      	ldr	r3, [pc, #492]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a7a      	ldr	r2, [pc, #488]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	4b78      	ldr	r3, [pc, #480]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a77      	ldr	r2, [pc, #476]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	e01d      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033e8:	d10c      	bne.n	8003404 <HAL_RCC_OscConfig+0xbc>
 80033ea:	4b72      	ldr	r3, [pc, #456]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a71      	ldr	r2, [pc, #452]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033f4:	6013      	str	r3, [r2, #0]
 80033f6:	4b6f      	ldr	r3, [pc, #444]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a6e      	ldr	r2, [pc, #440]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80033fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003400:	6013      	str	r3, [r2, #0]
 8003402:	e00b      	b.n	800341c <HAL_RCC_OscConfig+0xd4>
 8003404:	4b6b      	ldr	r3, [pc, #428]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a6a      	ldr	r2, [pc, #424]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800340a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800340e:	6013      	str	r3, [r2, #0]
 8003410:	4b68      	ldr	r3, [pc, #416]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a67      	ldr	r2, [pc, #412]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003416:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800341a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d013      	beq.n	800344c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003424:	f7ff f886 	bl	8002534 <HAL_GetTick>
 8003428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800342a:	e008      	b.n	800343e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800342c:	f7ff f882 	bl	8002534 <HAL_GetTick>
 8003430:	4602      	mov	r2, r0
 8003432:	693b      	ldr	r3, [r7, #16]
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	2b64      	cmp	r3, #100	; 0x64
 8003438:	d901      	bls.n	800343e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800343a:	2303      	movs	r3, #3
 800343c:	e200      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800343e:	4b5d      	ldr	r3, [pc, #372]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d0f0      	beq.n	800342c <HAL_RCC_OscConfig+0xe4>
 800344a:	e014      	b.n	8003476 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800344c:	f7ff f872 	bl	8002534 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003454:	f7ff f86e 	bl	8002534 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b64      	cmp	r3, #100	; 0x64
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e1ec      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003466:	4b53      	ldr	r3, [pc, #332]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x10c>
 8003472:	e000      	b.n	8003476 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d063      	beq.n	800354a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003482:	4b4c      	ldr	r3, [pc, #304]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 030c 	and.w	r3, r3, #12
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00b      	beq.n	80034a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800348e:	4b49      	ldr	r3, [pc, #292]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	f003 030c 	and.w	r3, r3, #12
 8003496:	2b08      	cmp	r3, #8
 8003498:	d11c      	bne.n	80034d4 <HAL_RCC_OscConfig+0x18c>
 800349a:	4b46      	ldr	r3, [pc, #280]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d116      	bne.n	80034d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a6:	4b43      	ldr	r3, [pc, #268]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0302 	and.w	r3, r3, #2
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d005      	beq.n	80034be <HAL_RCC_OscConfig+0x176>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	691b      	ldr	r3, [r3, #16]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	d001      	beq.n	80034be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e1c0      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034be:	4b3d      	ldr	r3, [pc, #244]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	4939      	ldr	r1, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d2:	e03a      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d020      	beq.n	800351e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034dc:	4b36      	ldr	r3, [pc, #216]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 80034de:	2201      	movs	r2, #1
 80034e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e2:	f7ff f827 	bl	8002534 <HAL_GetTick>
 80034e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e8:	e008      	b.n	80034fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ea:	f7ff f823 	bl	8002534 <HAL_GetTick>
 80034ee:	4602      	mov	r2, r0
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	2b02      	cmp	r3, #2
 80034f6:	d901      	bls.n	80034fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f8:	2303      	movs	r3, #3
 80034fa:	e1a1      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034fc:	4b2d      	ldr	r3, [pc, #180]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f003 0302 	and.w	r3, r3, #2
 8003504:	2b00      	cmp	r3, #0
 8003506:	d0f0      	beq.n	80034ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003508:	4b2a      	ldr	r3, [pc, #168]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	695b      	ldr	r3, [r3, #20]
 8003514:	00db      	lsls	r3, r3, #3
 8003516:	4927      	ldr	r1, [pc, #156]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003518:	4313      	orrs	r3, r2
 800351a:	600b      	str	r3, [r1, #0]
 800351c:	e015      	b.n	800354a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800351e:	4b26      	ldr	r3, [pc, #152]	; (80035b8 <HAL_RCC_OscConfig+0x270>)
 8003520:	2200      	movs	r2, #0
 8003522:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003524:	f7ff f806 	bl	8002534 <HAL_GetTick>
 8003528:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800352a:	e008      	b.n	800353e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800352c:	f7ff f802 	bl	8002534 <HAL_GetTick>
 8003530:	4602      	mov	r2, r0
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	1ad3      	subs	r3, r2, r3
 8003536:	2b02      	cmp	r3, #2
 8003538:	d901      	bls.n	800353e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800353a:	2303      	movs	r3, #3
 800353c:	e180      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800353e:	4b1d      	ldr	r3, [pc, #116]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0302 	and.w	r3, r3, #2
 8003546:	2b00      	cmp	r3, #0
 8003548:	d1f0      	bne.n	800352c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0308 	and.w	r3, r3, #8
 8003552:	2b00      	cmp	r3, #0
 8003554:	d03a      	beq.n	80035cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	699b      	ldr	r3, [r3, #24]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d019      	beq.n	8003592 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800355e:	4b17      	ldr	r3, [pc, #92]	; (80035bc <HAL_RCC_OscConfig+0x274>)
 8003560:	2201      	movs	r2, #1
 8003562:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003564:	f7fe ffe6 	bl	8002534 <HAL_GetTick>
 8003568:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800356a:	e008      	b.n	800357e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800356c:	f7fe ffe2 	bl	8002534 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	2b02      	cmp	r3, #2
 8003578:	d901      	bls.n	800357e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e160      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <HAL_RCC_OscConfig+0x26c>)
 8003580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003582:	f003 0302 	and.w	r3, r3, #2
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0f0      	beq.n	800356c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800358a:	2001      	movs	r0, #1
 800358c:	f000 fad8 	bl	8003b40 <RCC_Delay>
 8003590:	e01c      	b.n	80035cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003592:	4b0a      	ldr	r3, [pc, #40]	; (80035bc <HAL_RCC_OscConfig+0x274>)
 8003594:	2200      	movs	r2, #0
 8003596:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003598:	f7fe ffcc 	bl	8002534 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800359e:	e00f      	b.n	80035c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a0:	f7fe ffc8 	bl	8002534 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d908      	bls.n	80035c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e146      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
 80035b2:	bf00      	nop
 80035b4:	40021000 	.word	0x40021000
 80035b8:	42420000 	.word	0x42420000
 80035bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035c0:	4b92      	ldr	r3, [pc, #584]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80035c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e9      	bne.n	80035a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f003 0304 	and.w	r3, r3, #4
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	f000 80a6 	beq.w	8003726 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035da:	2300      	movs	r3, #0
 80035dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035de:	4b8b      	ldr	r3, [pc, #556]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10d      	bne.n	8003606 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ea:	4b88      	ldr	r3, [pc, #544]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	4a87      	ldr	r2, [pc, #540]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f4:	61d3      	str	r3, [r2, #28]
 80035f6:	4b85      	ldr	r3, [pc, #532]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035fe:	60bb      	str	r3, [r7, #8]
 8003600:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003602:	2301      	movs	r3, #1
 8003604:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCC_OscConfig+0x4c8>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360e:	2b00      	cmp	r3, #0
 8003610:	d118      	bne.n	8003644 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003612:	4b7f      	ldr	r3, [pc, #508]	; (8003810 <HAL_RCC_OscConfig+0x4c8>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a7e      	ldr	r2, [pc, #504]	; (8003810 <HAL_RCC_OscConfig+0x4c8>)
 8003618:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800361c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800361e:	f7fe ff89 	bl	8002534 <HAL_GetTick>
 8003622:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003624:	e008      	b.n	8003638 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003626:	f7fe ff85 	bl	8002534 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	2b64      	cmp	r3, #100	; 0x64
 8003632:	d901      	bls.n	8003638 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e103      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003638:	4b75      	ldr	r3, [pc, #468]	; (8003810 <HAL_RCC_OscConfig+0x4c8>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0f0      	beq.n	8003626 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	68db      	ldr	r3, [r3, #12]
 8003648:	2b01      	cmp	r3, #1
 800364a:	d106      	bne.n	800365a <HAL_RCC_OscConfig+0x312>
 800364c:	4b6f      	ldr	r3, [pc, #444]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800364e:	6a1b      	ldr	r3, [r3, #32]
 8003650:	4a6e      	ldr	r2, [pc, #440]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003652:	f043 0301 	orr.w	r3, r3, #1
 8003656:	6213      	str	r3, [r2, #32]
 8003658:	e02d      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x334>
 8003662:	4b6a      	ldr	r3, [pc, #424]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	4a69      	ldr	r2, [pc, #420]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003668:	f023 0301 	bic.w	r3, r3, #1
 800366c:	6213      	str	r3, [r2, #32]
 800366e:	4b67      	ldr	r3, [pc, #412]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a66      	ldr	r2, [pc, #408]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0304 	bic.w	r3, r3, #4
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	e01c      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	68db      	ldr	r3, [r3, #12]
 8003680:	2b05      	cmp	r3, #5
 8003682:	d10c      	bne.n	800369e <HAL_RCC_OscConfig+0x356>
 8003684:	4b61      	ldr	r3, [pc, #388]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	4a60      	ldr	r2, [pc, #384]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800368a:	f043 0304 	orr.w	r3, r3, #4
 800368e:	6213      	str	r3, [r2, #32]
 8003690:	4b5e      	ldr	r3, [pc, #376]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	4a5d      	ldr	r2, [pc, #372]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003696:	f043 0301 	orr.w	r3, r3, #1
 800369a:	6213      	str	r3, [r2, #32]
 800369c:	e00b      	b.n	80036b6 <HAL_RCC_OscConfig+0x36e>
 800369e:	4b5b      	ldr	r3, [pc, #364]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	4a5a      	ldr	r2, [pc, #360]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	f023 0301 	bic.w	r3, r3, #1
 80036a8:	6213      	str	r3, [r2, #32]
 80036aa:	4b58      	ldr	r3, [pc, #352]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	4a57      	ldr	r2, [pc, #348]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80036b0:	f023 0304 	bic.w	r3, r3, #4
 80036b4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	68db      	ldr	r3, [r3, #12]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d015      	beq.n	80036ea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036be:	f7fe ff39 	bl	8002534 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	e00a      	b.n	80036dc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c6:	f7fe ff35 	bl	8002534 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d901      	bls.n	80036dc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e0b1      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036dc:	4b4b      	ldr	r3, [pc, #300]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80036de:	6a1b      	ldr	r3, [r3, #32]
 80036e0:	f003 0302 	and.w	r3, r3, #2
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0ee      	beq.n	80036c6 <HAL_RCC_OscConfig+0x37e>
 80036e8:	e014      	b.n	8003714 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ea:	f7fe ff23 	bl	8002534 <HAL_GetTick>
 80036ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	e00a      	b.n	8003708 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036f2:	f7fe ff1f 	bl	8002534 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003700:	4293      	cmp	r3, r2
 8003702:	d901      	bls.n	8003708 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e09b      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003708:	4b40      	ldr	r3, [pc, #256]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	f003 0302 	and.w	r3, r3, #2
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1ee      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003714:	7dfb      	ldrb	r3, [r7, #23]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d105      	bne.n	8003726 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800371a:	4b3c      	ldr	r3, [pc, #240]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800371c:	69db      	ldr	r3, [r3, #28]
 800371e:	4a3b      	ldr	r2, [pc, #236]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003720:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003724:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	69db      	ldr	r3, [r3, #28]
 800372a:	2b00      	cmp	r3, #0
 800372c:	f000 8087 	beq.w	800383e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003730:	4b36      	ldr	r3, [pc, #216]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f003 030c 	and.w	r3, r3, #12
 8003738:	2b08      	cmp	r3, #8
 800373a:	d061      	beq.n	8003800 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	2b02      	cmp	r3, #2
 8003742:	d146      	bne.n	80037d2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003744:	4b33      	ldr	r3, [pc, #204]	; (8003814 <HAL_RCC_OscConfig+0x4cc>)
 8003746:	2200      	movs	r2, #0
 8003748:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800374a:	f7fe fef3 	bl	8002534 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003752:	f7fe feef 	bl	8002534 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b02      	cmp	r3, #2
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e06d      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003764:	4b29      	ldr	r3, [pc, #164]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f0      	bne.n	8003752 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a1b      	ldr	r3, [r3, #32]
 8003774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003778:	d108      	bne.n	800378c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800377a:	4b24      	ldr	r3, [pc, #144]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4921      	ldr	r1, [pc, #132]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800378c:	4b1f      	ldr	r3, [pc, #124]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a19      	ldr	r1, [r3, #32]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379c:	430b      	orrs	r3, r1
 800379e:	491b      	ldr	r1, [pc, #108]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80037a0:	4313      	orrs	r3, r2
 80037a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037a4:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <HAL_RCC_OscConfig+0x4cc>)
 80037a6:	2201      	movs	r2, #1
 80037a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037aa:	f7fe fec3 	bl	8002534 <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b2:	f7fe febf 	bl	8002534 <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e03d      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037c4:	4b11      	ldr	r3, [pc, #68]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x46a>
 80037d0:	e035      	b.n	800383e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037d2:	4b10      	ldr	r3, [pc, #64]	; (8003814 <HAL_RCC_OscConfig+0x4cc>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d8:	f7fe feac 	bl	8002534 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037e0:	f7fe fea8 	bl	8002534 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e026      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037f2:	4b06      	ldr	r3, [pc, #24]	; (800380c <HAL_RCC_OscConfig+0x4c4>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1f0      	bne.n	80037e0 <HAL_RCC_OscConfig+0x498>
 80037fe:	e01e      	b.n	800383e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	69db      	ldr	r3, [r3, #28]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d107      	bne.n	8003818 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e019      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
 800380c:	40021000 	.word	0x40021000
 8003810:	40007000 	.word	0x40007000
 8003814:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003818:	4b0b      	ldr	r3, [pc, #44]	; (8003848 <HAL_RCC_OscConfig+0x500>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6a1b      	ldr	r3, [r3, #32]
 8003828:	429a      	cmp	r2, r3
 800382a:	d106      	bne.n	800383a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003836:	429a      	cmp	r2, r3
 8003838:	d001      	beq.n	800383e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000

0800384c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2b00      	cmp	r3, #0
 800385a:	d101      	bne.n	8003860 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0d0      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003860:	4b6a      	ldr	r3, [pc, #424]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0307 	and.w	r3, r3, #7
 8003868:	683a      	ldr	r2, [r7, #0]
 800386a:	429a      	cmp	r2, r3
 800386c:	d910      	bls.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800386e:	4b67      	ldr	r3, [pc, #412]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f023 0207 	bic.w	r2, r3, #7
 8003876:	4965      	ldr	r1, [pc, #404]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	4313      	orrs	r3, r2
 800387c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b63      	ldr	r3, [pc, #396]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e0b8      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d020      	beq.n	80038de <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0304 	and.w	r3, r3, #4
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a8:	4b59      	ldr	r3, [pc, #356]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a58      	ldr	r2, [pc, #352]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80038b2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 0308 	and.w	r3, r3, #8
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d005      	beq.n	80038cc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	4a52      	ldr	r2, [pc, #328]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80038ca:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b50      	ldr	r3, [pc, #320]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	494d      	ldr	r1, [pc, #308]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d040      	beq.n	800396c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038f2:	4b47      	ldr	r3, [pc, #284]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d115      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e07f      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d107      	bne.n	800391a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003912:	2b00      	cmp	r3, #0
 8003914:	d109      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003916:	2301      	movs	r3, #1
 8003918:	e073      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e06b      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800392a:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f023 0203 	bic.w	r2, r3, #3
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	4936      	ldr	r1, [pc, #216]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	4313      	orrs	r3, r2
 800393a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800393c:	f7fe fdfa 	bl	8002534 <HAL_GetTick>
 8003940:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	e00a      	b.n	800395a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003944:	f7fe fdf6 	bl	8002534 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003952:	4293      	cmp	r3, r2
 8003954:	d901      	bls.n	800395a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	e053      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800395a:	4b2d      	ldr	r3, [pc, #180]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	f003 020c 	and.w	r2, r3, #12
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	429a      	cmp	r2, r3
 800396a:	d1eb      	bne.n	8003944 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800396c:	4b27      	ldr	r3, [pc, #156]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	683a      	ldr	r2, [r7, #0]
 8003976:	429a      	cmp	r2, r3
 8003978:	d210      	bcs.n	800399c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800397a:	4b24      	ldr	r3, [pc, #144]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f023 0207 	bic.w	r2, r3, #7
 8003982:	4922      	ldr	r1, [pc, #136]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	4313      	orrs	r3, r2
 8003988:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800398a:	4b20      	ldr	r3, [pc, #128]	; (8003a0c <HAL_RCC_ClockConfig+0x1c0>)
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0307 	and.w	r3, r3, #7
 8003992:	683a      	ldr	r2, [r7, #0]
 8003994:	429a      	cmp	r2, r3
 8003996:	d001      	beq.n	800399c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e032      	b.n	8003a02 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d008      	beq.n	80039ba <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a8:	4b19      	ldr	r3, [pc, #100]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	4916      	ldr	r1, [pc, #88]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039b6:	4313      	orrs	r3, r2
 80039b8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0308 	and.w	r3, r3, #8
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d009      	beq.n	80039da <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039c6:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	00db      	lsls	r3, r3, #3
 80039d4:	490e      	ldr	r1, [pc, #56]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039da:	f000 f821 	bl	8003a20 <HAL_RCC_GetSysClockFreq>
 80039de:	4602      	mov	r2, r0
 80039e0:	4b0b      	ldr	r3, [pc, #44]	; (8003a10 <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	091b      	lsrs	r3, r3, #4
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	490a      	ldr	r1, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	5ccb      	ldrb	r3, [r1, r3]
 80039ee:	fa22 f303 	lsr.w	r3, r2, r3
 80039f2:	4a09      	ldr	r2, [pc, #36]	; (8003a18 <HAL_RCC_ClockConfig+0x1cc>)
 80039f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <HAL_RCC_ClockConfig+0x1d0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4618      	mov	r0, r3
 80039fc:	f7fe fd58 	bl	80024b0 <HAL_InitTick>

  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40022000 	.word	0x40022000
 8003a10:	40021000 	.word	0x40021000
 8003a14:	080079d0 	.word	0x080079d0
 8003a18:	20000008 	.word	0x20000008
 8003a1c:	2000000c 	.word	0x2000000c

08003a20 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a20:	b490      	push	{r4, r7}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003a26:	4b29      	ldr	r3, [pc, #164]	; (8003acc <HAL_RCC_GetSysClockFreq+0xac>)
 8003a28:	1d3c      	adds	r4, r7, #4
 8003a2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003a2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003a30:	f240 2301 	movw	r3, #513	; 0x201
 8003a34:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a36:	2300      	movs	r3, #0
 8003a38:	61fb      	str	r3, [r7, #28]
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003a46:	2300      	movs	r3, #0
 8003a48:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a4a:	4b21      	ldr	r3, [pc, #132]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	f003 030c 	and.w	r3, r3, #12
 8003a56:	2b04      	cmp	r3, #4
 8003a58:	d002      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x40>
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d003      	beq.n	8003a66 <HAL_RCC_GetSysClockFreq+0x46>
 8003a5e:	e02b      	b.n	8003ab8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a60:	4b1c      	ldr	r3, [pc, #112]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a62:	623b      	str	r3, [r7, #32]
      break;
 8003a64:	e02b      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	0c9b      	lsrs	r3, r3, #18
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	3328      	adds	r3, #40	; 0x28
 8003a70:	443b      	add	r3, r7
 8003a72:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003a76:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d012      	beq.n	8003aa8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a82:	4b13      	ldr	r3, [pc, #76]	; (8003ad0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	0c5b      	lsrs	r3, r3, #17
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	3328      	adds	r3, #40	; 0x28
 8003a8e:	443b      	add	r3, r7
 8003a90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003a94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	4a0e      	ldr	r2, [pc, #56]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003a9a:	fb03 f202 	mul.w	r2, r3, r2
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	e004      	b.n	8003ab2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003aac:	fb02 f303 	mul.w	r3, r2, r3
 8003ab0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ab4:	623b      	str	r3, [r7, #32]
      break;
 8003ab6:	e002      	b.n	8003abe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ab8:	4b06      	ldr	r3, [pc, #24]	; (8003ad4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003aba:	623b      	str	r3, [r7, #32]
      break;
 8003abc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003abe:	6a3b      	ldr	r3, [r7, #32]
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3728      	adds	r7, #40	; 0x28
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bc90      	pop	{r4, r7}
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	080079c0 	.word	0x080079c0
 8003ad0:	40021000 	.word	0x40021000
 8003ad4:	007a1200 	.word	0x007a1200
 8003ad8:	003d0900 	.word	0x003d0900

08003adc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003adc:	b480      	push	{r7}
 8003ade:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ae0:	4b02      	ldr	r3, [pc, #8]	; (8003aec <HAL_RCC_GetHCLKFreq+0x10>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bc80      	pop	{r7}
 8003aea:	4770      	bx	lr
 8003aec:	20000008 	.word	0x20000008

08003af0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003af4:	f7ff fff2 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003af8:	4602      	mov	r2, r0
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003afc:	685b      	ldr	r3, [r3, #4]
 8003afe:	0a1b      	lsrs	r3, r3, #8
 8003b00:	f003 0307 	and.w	r3, r3, #7
 8003b04:	4903      	ldr	r1, [pc, #12]	; (8003b14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b06:	5ccb      	ldrb	r3, [r1, r3]
 8003b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	080079e0 	.word	0x080079e0

08003b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b1c:	f7ff ffde 	bl	8003adc <HAL_RCC_GetHCLKFreq>
 8003b20:	4602      	mov	r2, r0
 8003b22:	4b05      	ldr	r3, [pc, #20]	; (8003b38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	f003 0307 	and.w	r3, r3, #7
 8003b2c:	4903      	ldr	r1, [pc, #12]	; (8003b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b2e:	5ccb      	ldrb	r3, [r1, r3]
 8003b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b34:	4618      	mov	r0, r3
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40021000 	.word	0x40021000
 8003b3c:	080079e0 	.word	0x080079e0

08003b40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b48:	4b0a      	ldr	r3, [pc, #40]	; (8003b74 <RCC_Delay+0x34>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a0a      	ldr	r2, [pc, #40]	; (8003b78 <RCC_Delay+0x38>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	0a5b      	lsrs	r3, r3, #9
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	fb02 f303 	mul.w	r3, r2, r3
 8003b5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b5c:	bf00      	nop
  }
  while (Delay --);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	1e5a      	subs	r2, r3, #1
 8003b62:	60fa      	str	r2, [r7, #12]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f9      	bne.n	8003b5c <RCC_Delay+0x1c>
}
 8003b68:	bf00      	nop
 8003b6a:	bf00      	nop
 8003b6c:	3714      	adds	r7, #20
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	20000008 	.word	0x20000008
 8003b78:	10624dd3 	.word	0x10624dd3

08003b7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e03f      	b.n	8003c0e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d106      	bne.n	8003ba8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7fe f8c4 	bl	8001d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2224      	movs	r2, #36	; 0x24
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	68da      	ldr	r2, [r3, #12]
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003bbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f829 	bl	8003c18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	691a      	ldr	r2, [r3, #16]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003bd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695a      	ldr	r2, [r3, #20]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003be4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2220      	movs	r2, #32
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b084      	sub	sp, #16
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	431a      	orrs	r2, r3
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003c52:	f023 030c 	bic.w	r3, r3, #12
 8003c56:	687a      	ldr	r2, [r7, #4]
 8003c58:	6812      	ldr	r2, [r2, #0]
 8003c5a:	68b9      	ldr	r1, [r7, #8]
 8003c5c:	430b      	orrs	r3, r1
 8003c5e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	430a      	orrs	r2, r1
 8003c74:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a2c      	ldr	r2, [pc, #176]	; (8003d2c <UART_SetConfig+0x114>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d103      	bne.n	8003c88 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003c80:	f7ff ff4a 	bl	8003b18 <HAL_RCC_GetPCLK2Freq>
 8003c84:	60f8      	str	r0, [r7, #12]
 8003c86:	e002      	b.n	8003c8e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003c88:	f7ff ff32 	bl	8003af0 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	4613      	mov	r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	4413      	add	r3, r2
 8003c96:	009a      	lsls	r2, r3, #2
 8003c98:	441a      	add	r2, r3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	4a22      	ldr	r2, [pc, #136]	; (8003d30 <UART_SetConfig+0x118>)
 8003ca6:	fba2 2303 	umull	r2, r3, r2, r3
 8003caa:	095b      	lsrs	r3, r3, #5
 8003cac:	0119      	lsls	r1, r3, #4
 8003cae:	68fa      	ldr	r2, [r7, #12]
 8003cb0:	4613      	mov	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4413      	add	r3, r2
 8003cb6:	009a      	lsls	r2, r3, #2
 8003cb8:	441a      	add	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	009b      	lsls	r3, r3, #2
 8003cc0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cc4:	4b1a      	ldr	r3, [pc, #104]	; (8003d30 <UART_SetConfig+0x118>)
 8003cc6:	fba3 0302 	umull	r0, r3, r3, r2
 8003cca:	095b      	lsrs	r3, r3, #5
 8003ccc:	2064      	movs	r0, #100	; 0x64
 8003cce:	fb00 f303 	mul.w	r3, r0, r3
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	3332      	adds	r3, #50	; 0x32
 8003cd8:	4a15      	ldr	r2, [pc, #84]	; (8003d30 <UART_SetConfig+0x118>)
 8003cda:	fba2 2303 	umull	r2, r3, r2, r3
 8003cde:	095b      	lsrs	r3, r3, #5
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	4419      	add	r1, r3
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4413      	add	r3, r2
 8003cee:	009a      	lsls	r2, r3, #2
 8003cf0:	441a      	add	r2, r3
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003cfc:	4b0c      	ldr	r3, [pc, #48]	; (8003d30 <UART_SetConfig+0x118>)
 8003cfe:	fba3 0302 	umull	r0, r3, r3, r2
 8003d02:	095b      	lsrs	r3, r3, #5
 8003d04:	2064      	movs	r0, #100	; 0x64
 8003d06:	fb00 f303 	mul.w	r3, r0, r3
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	3332      	adds	r3, #50	; 0x32
 8003d10:	4a07      	ldr	r2, [pc, #28]	; (8003d30 <UART_SetConfig+0x118>)
 8003d12:	fba2 2303 	umull	r2, r3, r2, r3
 8003d16:	095b      	lsrs	r3, r3, #5
 8003d18:	f003 020f 	and.w	r2, r3, #15
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	440a      	add	r2, r1
 8003d22:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003d24:	bf00      	nop
 8003d26:	3710      	adds	r7, #16
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	40013800 	.word	0x40013800
 8003d30:	51eb851f 	.word	0x51eb851f

08003d34 <atoi>:
 8003d34:	220a      	movs	r2, #10
 8003d36:	2100      	movs	r1, #0
 8003d38:	f000 b87e 	b.w	8003e38 <strtol>

08003d3c <_strtol_l.constprop.0>:
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d42:	4686      	mov	lr, r0
 8003d44:	4690      	mov	r8, r2
 8003d46:	d001      	beq.n	8003d4c <_strtol_l.constprop.0+0x10>
 8003d48:	2b24      	cmp	r3, #36	; 0x24
 8003d4a:	d906      	bls.n	8003d5a <_strtol_l.constprop.0+0x1e>
 8003d4c:	f000 fe42 	bl	80049d4 <__errno>
 8003d50:	2316      	movs	r3, #22
 8003d52:	6003      	str	r3, [r0, #0]
 8003d54:	2000      	movs	r0, #0
 8003d56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003d5a:	460d      	mov	r5, r1
 8003d5c:	4835      	ldr	r0, [pc, #212]	; (8003e34 <_strtol_l.constprop.0+0xf8>)
 8003d5e:	462a      	mov	r2, r5
 8003d60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003d64:	5d06      	ldrb	r6, [r0, r4]
 8003d66:	f016 0608 	ands.w	r6, r6, #8
 8003d6a:	d1f8      	bne.n	8003d5e <_strtol_l.constprop.0+0x22>
 8003d6c:	2c2d      	cmp	r4, #45	; 0x2d
 8003d6e:	d12e      	bne.n	8003dce <_strtol_l.constprop.0+0x92>
 8003d70:	2601      	movs	r6, #1
 8003d72:	782c      	ldrb	r4, [r5, #0]
 8003d74:	1c95      	adds	r5, r2, #2
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d057      	beq.n	8003e2a <_strtol_l.constprop.0+0xee>
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	d109      	bne.n	8003d92 <_strtol_l.constprop.0+0x56>
 8003d7e:	2c30      	cmp	r4, #48	; 0x30
 8003d80:	d107      	bne.n	8003d92 <_strtol_l.constprop.0+0x56>
 8003d82:	782a      	ldrb	r2, [r5, #0]
 8003d84:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8003d88:	2a58      	cmp	r2, #88	; 0x58
 8003d8a:	d149      	bne.n	8003e20 <_strtol_l.constprop.0+0xe4>
 8003d8c:	2310      	movs	r3, #16
 8003d8e:	786c      	ldrb	r4, [r5, #1]
 8003d90:	3502      	adds	r5, #2
 8003d92:	2200      	movs	r2, #0
 8003d94:	f106 4c00 	add.w	ip, r6, #2147483648	; 0x80000000
 8003d98:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
 8003d9c:	fbbc f9f3 	udiv	r9, ip, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	fb03 ca19 	mls	sl, r3, r9, ip
 8003da6:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8003daa:	2f09      	cmp	r7, #9
 8003dac:	d814      	bhi.n	8003dd8 <_strtol_l.constprop.0+0x9c>
 8003dae:	463c      	mov	r4, r7
 8003db0:	42a3      	cmp	r3, r4
 8003db2:	dd20      	ble.n	8003df6 <_strtol_l.constprop.0+0xba>
 8003db4:	1c57      	adds	r7, r2, #1
 8003db6:	d007      	beq.n	8003dc8 <_strtol_l.constprop.0+0x8c>
 8003db8:	4581      	cmp	r9, r0
 8003dba:	d319      	bcc.n	8003df0 <_strtol_l.constprop.0+0xb4>
 8003dbc:	d101      	bne.n	8003dc2 <_strtol_l.constprop.0+0x86>
 8003dbe:	45a2      	cmp	sl, r4
 8003dc0:	db16      	blt.n	8003df0 <_strtol_l.constprop.0+0xb4>
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	fb00 4003 	mla	r0, r0, r3, r4
 8003dc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003dcc:	e7eb      	b.n	8003da6 <_strtol_l.constprop.0+0x6a>
 8003dce:	2c2b      	cmp	r4, #43	; 0x2b
 8003dd0:	bf04      	itt	eq
 8003dd2:	782c      	ldrbeq	r4, [r5, #0]
 8003dd4:	1c95      	addeq	r5, r2, #2
 8003dd6:	e7ce      	b.n	8003d76 <_strtol_l.constprop.0+0x3a>
 8003dd8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8003ddc:	2f19      	cmp	r7, #25
 8003dde:	d801      	bhi.n	8003de4 <_strtol_l.constprop.0+0xa8>
 8003de0:	3c37      	subs	r4, #55	; 0x37
 8003de2:	e7e5      	b.n	8003db0 <_strtol_l.constprop.0+0x74>
 8003de4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8003de8:	2f19      	cmp	r7, #25
 8003dea:	d804      	bhi.n	8003df6 <_strtol_l.constprop.0+0xba>
 8003dec:	3c57      	subs	r4, #87	; 0x57
 8003dee:	e7df      	b.n	8003db0 <_strtol_l.constprop.0+0x74>
 8003df0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003df4:	e7e8      	b.n	8003dc8 <_strtol_l.constprop.0+0x8c>
 8003df6:	1c53      	adds	r3, r2, #1
 8003df8:	d108      	bne.n	8003e0c <_strtol_l.constprop.0+0xd0>
 8003dfa:	2322      	movs	r3, #34	; 0x22
 8003dfc:	4660      	mov	r0, ip
 8003dfe:	f8ce 3000 	str.w	r3, [lr]
 8003e02:	f1b8 0f00 	cmp.w	r8, #0
 8003e06:	d0a6      	beq.n	8003d56 <_strtol_l.constprop.0+0x1a>
 8003e08:	1e69      	subs	r1, r5, #1
 8003e0a:	e006      	b.n	8003e1a <_strtol_l.constprop.0+0xde>
 8003e0c:	b106      	cbz	r6, 8003e10 <_strtol_l.constprop.0+0xd4>
 8003e0e:	4240      	negs	r0, r0
 8003e10:	f1b8 0f00 	cmp.w	r8, #0
 8003e14:	d09f      	beq.n	8003d56 <_strtol_l.constprop.0+0x1a>
 8003e16:	2a00      	cmp	r2, #0
 8003e18:	d1f6      	bne.n	8003e08 <_strtol_l.constprop.0+0xcc>
 8003e1a:	f8c8 1000 	str.w	r1, [r8]
 8003e1e:	e79a      	b.n	8003d56 <_strtol_l.constprop.0+0x1a>
 8003e20:	2430      	movs	r4, #48	; 0x30
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d1b5      	bne.n	8003d92 <_strtol_l.constprop.0+0x56>
 8003e26:	2308      	movs	r3, #8
 8003e28:	e7b3      	b.n	8003d92 <_strtol_l.constprop.0+0x56>
 8003e2a:	2c30      	cmp	r4, #48	; 0x30
 8003e2c:	d0a9      	beq.n	8003d82 <_strtol_l.constprop.0+0x46>
 8003e2e:	230a      	movs	r3, #10
 8003e30:	e7af      	b.n	8003d92 <_strtol_l.constprop.0+0x56>
 8003e32:	bf00      	nop
 8003e34:	080079e9 	.word	0x080079e9

08003e38 <strtol>:
 8003e38:	4613      	mov	r3, r2
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	4601      	mov	r1, r0
 8003e3e:	4802      	ldr	r0, [pc, #8]	; (8003e48 <strtol+0x10>)
 8003e40:	6800      	ldr	r0, [r0, #0]
 8003e42:	f7ff bf7b 	b.w	8003d3c <_strtol_l.constprop.0>
 8003e46:	bf00      	nop
 8003e48:	2000006c 	.word	0x2000006c

08003e4c <__cvt>:
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e52:	461f      	mov	r7, r3
 8003e54:	bfbb      	ittet	lt
 8003e56:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8003e5a:	461f      	movlt	r7, r3
 8003e5c:	2300      	movge	r3, #0
 8003e5e:	232d      	movlt	r3, #45	; 0x2d
 8003e60:	b088      	sub	sp, #32
 8003e62:	4614      	mov	r4, r2
 8003e64:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8003e66:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8003e68:	7013      	strb	r3, [r2, #0]
 8003e6a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8003e6c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8003e70:	f023 0820 	bic.w	r8, r3, #32
 8003e74:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003e78:	d005      	beq.n	8003e86 <__cvt+0x3a>
 8003e7a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8003e7e:	d100      	bne.n	8003e82 <__cvt+0x36>
 8003e80:	3501      	adds	r5, #1
 8003e82:	2302      	movs	r3, #2
 8003e84:	e000      	b.n	8003e88 <__cvt+0x3c>
 8003e86:	2303      	movs	r3, #3
 8003e88:	aa07      	add	r2, sp, #28
 8003e8a:	9204      	str	r2, [sp, #16]
 8003e8c:	aa06      	add	r2, sp, #24
 8003e8e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8003e92:	e9cd 3500 	strd	r3, r5, [sp]
 8003e96:	4622      	mov	r2, r4
 8003e98:	463b      	mov	r3, r7
 8003e9a:	f000 fe61 	bl	8004b60 <_dtoa_r>
 8003e9e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003ea2:	4606      	mov	r6, r0
 8003ea4:	d102      	bne.n	8003eac <__cvt+0x60>
 8003ea6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003ea8:	07db      	lsls	r3, r3, #31
 8003eaa:	d522      	bpl.n	8003ef2 <__cvt+0xa6>
 8003eac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003eb0:	eb06 0905 	add.w	r9, r6, r5
 8003eb4:	d110      	bne.n	8003ed8 <__cvt+0x8c>
 8003eb6:	7833      	ldrb	r3, [r6, #0]
 8003eb8:	2b30      	cmp	r3, #48	; 0x30
 8003eba:	d10a      	bne.n	8003ed2 <__cvt+0x86>
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	4639      	mov	r1, r7
 8003ec4:	f7fc fd70 	bl	80009a8 <__aeabi_dcmpeq>
 8003ec8:	b918      	cbnz	r0, 8003ed2 <__cvt+0x86>
 8003eca:	f1c5 0501 	rsb	r5, r5, #1
 8003ece:	f8ca 5000 	str.w	r5, [sl]
 8003ed2:	f8da 3000 	ldr.w	r3, [sl]
 8003ed6:	4499      	add	r9, r3
 8003ed8:	2200      	movs	r2, #0
 8003eda:	2300      	movs	r3, #0
 8003edc:	4620      	mov	r0, r4
 8003ede:	4639      	mov	r1, r7
 8003ee0:	f7fc fd62 	bl	80009a8 <__aeabi_dcmpeq>
 8003ee4:	b108      	cbz	r0, 8003eea <__cvt+0x9e>
 8003ee6:	f8cd 901c 	str.w	r9, [sp, #28]
 8003eea:	2230      	movs	r2, #48	; 0x30
 8003eec:	9b07      	ldr	r3, [sp, #28]
 8003eee:	454b      	cmp	r3, r9
 8003ef0:	d307      	bcc.n	8003f02 <__cvt+0xb6>
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	9b07      	ldr	r3, [sp, #28]
 8003ef6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003ef8:	1b9b      	subs	r3, r3, r6
 8003efa:	6013      	str	r3, [r2, #0]
 8003efc:	b008      	add	sp, #32
 8003efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f02:	1c59      	adds	r1, r3, #1
 8003f04:	9107      	str	r1, [sp, #28]
 8003f06:	701a      	strb	r2, [r3, #0]
 8003f08:	e7f0      	b.n	8003eec <__cvt+0xa0>

08003f0a <__exponent>:
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	f803 2b02 	strb.w	r2, [r3], #2
 8003f14:	bfb6      	itet	lt
 8003f16:	222d      	movlt	r2, #45	; 0x2d
 8003f18:	222b      	movge	r2, #43	; 0x2b
 8003f1a:	4249      	neglt	r1, r1
 8003f1c:	2909      	cmp	r1, #9
 8003f1e:	7042      	strb	r2, [r0, #1]
 8003f20:	dd2a      	ble.n	8003f78 <__exponent+0x6e>
 8003f22:	f10d 0207 	add.w	r2, sp, #7
 8003f26:	4617      	mov	r7, r2
 8003f28:	260a      	movs	r6, #10
 8003f2a:	fb91 f5f6 	sdiv	r5, r1, r6
 8003f2e:	4694      	mov	ip, r2
 8003f30:	fb06 1415 	mls	r4, r6, r5, r1
 8003f34:	3430      	adds	r4, #48	; 0x30
 8003f36:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8003f3a:	460c      	mov	r4, r1
 8003f3c:	2c63      	cmp	r4, #99	; 0x63
 8003f3e:	4629      	mov	r1, r5
 8003f40:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8003f44:	dcf1      	bgt.n	8003f2a <__exponent+0x20>
 8003f46:	3130      	adds	r1, #48	; 0x30
 8003f48:	f1ac 0402 	sub.w	r4, ip, #2
 8003f4c:	f802 1c01 	strb.w	r1, [r2, #-1]
 8003f50:	4622      	mov	r2, r4
 8003f52:	1c41      	adds	r1, r0, #1
 8003f54:	42ba      	cmp	r2, r7
 8003f56:	d30a      	bcc.n	8003f6e <__exponent+0x64>
 8003f58:	f10d 0209 	add.w	r2, sp, #9
 8003f5c:	eba2 020c 	sub.w	r2, r2, ip
 8003f60:	42bc      	cmp	r4, r7
 8003f62:	bf88      	it	hi
 8003f64:	2200      	movhi	r2, #0
 8003f66:	4413      	add	r3, r2
 8003f68:	1a18      	subs	r0, r3, r0
 8003f6a:	b003      	add	sp, #12
 8003f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f6e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8003f72:	f801 5f01 	strb.w	r5, [r1, #1]!
 8003f76:	e7ed      	b.n	8003f54 <__exponent+0x4a>
 8003f78:	2330      	movs	r3, #48	; 0x30
 8003f7a:	3130      	adds	r1, #48	; 0x30
 8003f7c:	7083      	strb	r3, [r0, #2]
 8003f7e:	70c1      	strb	r1, [r0, #3]
 8003f80:	1d03      	adds	r3, r0, #4
 8003f82:	e7f1      	b.n	8003f68 <__exponent+0x5e>

08003f84 <_printf_float>:
 8003f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003f88:	b091      	sub	sp, #68	; 0x44
 8003f8a:	460c      	mov	r4, r1
 8003f8c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8003f90:	4616      	mov	r6, r2
 8003f92:	461f      	mov	r7, r3
 8003f94:	4605      	mov	r5, r0
 8003f96:	f000 fcd3 	bl	8004940 <_localeconv_r>
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	9309      	str	r3, [sp, #36]	; 0x24
 8003fa0:	f7fc f8d6 	bl	8000150 <strlen>
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	930e      	str	r3, [sp, #56]	; 0x38
 8003fa8:	f8d8 3000 	ldr.w	r3, [r8]
 8003fac:	900a      	str	r0, [sp, #40]	; 0x28
 8003fae:	3307      	adds	r3, #7
 8003fb0:	f023 0307 	bic.w	r3, r3, #7
 8003fb4:	f103 0208 	add.w	r2, r3, #8
 8003fb8:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003fbc:	f8d4 b000 	ldr.w	fp, [r4]
 8003fc0:	f8c8 2000 	str.w	r2, [r8]
 8003fc4:	e9d3 a800 	ldrd	sl, r8, [r3]
 8003fc8:	4652      	mov	r2, sl
 8003fca:	4643      	mov	r3, r8
 8003fcc:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003fd0:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8003fd4:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fda:	4650      	mov	r0, sl
 8003fdc:	4b9c      	ldr	r3, [pc, #624]	; (8004250 <_printf_float+0x2cc>)
 8003fde:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003fe0:	f7fc fd14 	bl	8000a0c <__aeabi_dcmpun>
 8003fe4:	bb70      	cbnz	r0, 8004044 <_printf_float+0xc0>
 8003fe6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003fea:	4650      	mov	r0, sl
 8003fec:	4b98      	ldr	r3, [pc, #608]	; (8004250 <_printf_float+0x2cc>)
 8003fee:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003ff0:	f7fc fcee 	bl	80009d0 <__aeabi_dcmple>
 8003ff4:	bb30      	cbnz	r0, 8004044 <_printf_float+0xc0>
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	4650      	mov	r0, sl
 8003ffc:	4641      	mov	r1, r8
 8003ffe:	f7fc fcdd 	bl	80009bc <__aeabi_dcmplt>
 8004002:	b110      	cbz	r0, 800400a <_printf_float+0x86>
 8004004:	232d      	movs	r3, #45	; 0x2d
 8004006:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800400a:	4a92      	ldr	r2, [pc, #584]	; (8004254 <_printf_float+0x2d0>)
 800400c:	4b92      	ldr	r3, [pc, #584]	; (8004258 <_printf_float+0x2d4>)
 800400e:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8004012:	bf94      	ite	ls
 8004014:	4690      	movls	r8, r2
 8004016:	4698      	movhi	r8, r3
 8004018:	2303      	movs	r3, #3
 800401a:	f04f 0a00 	mov.w	sl, #0
 800401e:	6123      	str	r3, [r4, #16]
 8004020:	f02b 0304 	bic.w	r3, fp, #4
 8004024:	6023      	str	r3, [r4, #0]
 8004026:	4633      	mov	r3, r6
 8004028:	4621      	mov	r1, r4
 800402a:	4628      	mov	r0, r5
 800402c:	9700      	str	r7, [sp, #0]
 800402e:	aa0f      	add	r2, sp, #60	; 0x3c
 8004030:	f000 f9d6 	bl	80043e0 <_printf_common>
 8004034:	3001      	adds	r0, #1
 8004036:	f040 8090 	bne.w	800415a <_printf_float+0x1d6>
 800403a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800403e:	b011      	add	sp, #68	; 0x44
 8004040:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004044:	4652      	mov	r2, sl
 8004046:	4643      	mov	r3, r8
 8004048:	4650      	mov	r0, sl
 800404a:	4641      	mov	r1, r8
 800404c:	f7fc fcde 	bl	8000a0c <__aeabi_dcmpun>
 8004050:	b148      	cbz	r0, 8004066 <_printf_float+0xe2>
 8004052:	f1b8 0f00 	cmp.w	r8, #0
 8004056:	bfb8      	it	lt
 8004058:	232d      	movlt	r3, #45	; 0x2d
 800405a:	4a80      	ldr	r2, [pc, #512]	; (800425c <_printf_float+0x2d8>)
 800405c:	bfb8      	it	lt
 800405e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004062:	4b7f      	ldr	r3, [pc, #508]	; (8004260 <_printf_float+0x2dc>)
 8004064:	e7d3      	b.n	800400e <_printf_float+0x8a>
 8004066:	6863      	ldr	r3, [r4, #4]
 8004068:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800406c:	1c5a      	adds	r2, r3, #1
 800406e:	d142      	bne.n	80040f6 <_printf_float+0x172>
 8004070:	2306      	movs	r3, #6
 8004072:	6063      	str	r3, [r4, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	9206      	str	r2, [sp, #24]
 8004078:	aa0e      	add	r2, sp, #56	; 0x38
 800407a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800407e:	aa0d      	add	r2, sp, #52	; 0x34
 8004080:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004084:	9203      	str	r2, [sp, #12]
 8004086:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800408a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	6863      	ldr	r3, [r4, #4]
 8004092:	4652      	mov	r2, sl
 8004094:	9300      	str	r3, [sp, #0]
 8004096:	4628      	mov	r0, r5
 8004098:	4643      	mov	r3, r8
 800409a:	910b      	str	r1, [sp, #44]	; 0x2c
 800409c:	f7ff fed6 	bl	8003e4c <__cvt>
 80040a0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80040a2:	4680      	mov	r8, r0
 80040a4:	2947      	cmp	r1, #71	; 0x47
 80040a6:	990d      	ldr	r1, [sp, #52]	; 0x34
 80040a8:	d108      	bne.n	80040bc <_printf_float+0x138>
 80040aa:	1cc8      	adds	r0, r1, #3
 80040ac:	db02      	blt.n	80040b4 <_printf_float+0x130>
 80040ae:	6863      	ldr	r3, [r4, #4]
 80040b0:	4299      	cmp	r1, r3
 80040b2:	dd40      	ble.n	8004136 <_printf_float+0x1b2>
 80040b4:	f1a9 0902 	sub.w	r9, r9, #2
 80040b8:	fa5f f989 	uxtb.w	r9, r9
 80040bc:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80040c0:	d81f      	bhi.n	8004102 <_printf_float+0x17e>
 80040c2:	464a      	mov	r2, r9
 80040c4:	3901      	subs	r1, #1
 80040c6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80040ca:	910d      	str	r1, [sp, #52]	; 0x34
 80040cc:	f7ff ff1d 	bl	8003f0a <__exponent>
 80040d0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80040d2:	4682      	mov	sl, r0
 80040d4:	1813      	adds	r3, r2, r0
 80040d6:	2a01      	cmp	r2, #1
 80040d8:	6123      	str	r3, [r4, #16]
 80040da:	dc02      	bgt.n	80040e2 <_printf_float+0x15e>
 80040dc:	6822      	ldr	r2, [r4, #0]
 80040de:	07d2      	lsls	r2, r2, #31
 80040e0:	d501      	bpl.n	80040e6 <_printf_float+0x162>
 80040e2:	3301      	adds	r3, #1
 80040e4:	6123      	str	r3, [r4, #16]
 80040e6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d09b      	beq.n	8004026 <_printf_float+0xa2>
 80040ee:	232d      	movs	r3, #45	; 0x2d
 80040f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040f4:	e797      	b.n	8004026 <_printf_float+0xa2>
 80040f6:	2947      	cmp	r1, #71	; 0x47
 80040f8:	d1bc      	bne.n	8004074 <_printf_float+0xf0>
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d1ba      	bne.n	8004074 <_printf_float+0xf0>
 80040fe:	2301      	movs	r3, #1
 8004100:	e7b7      	b.n	8004072 <_printf_float+0xee>
 8004102:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004106:	d118      	bne.n	800413a <_printf_float+0x1b6>
 8004108:	2900      	cmp	r1, #0
 800410a:	6863      	ldr	r3, [r4, #4]
 800410c:	dd0b      	ble.n	8004126 <_printf_float+0x1a2>
 800410e:	6121      	str	r1, [r4, #16]
 8004110:	b913      	cbnz	r3, 8004118 <_printf_float+0x194>
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	07d0      	lsls	r0, r2, #31
 8004116:	d502      	bpl.n	800411e <_printf_float+0x19a>
 8004118:	3301      	adds	r3, #1
 800411a:	440b      	add	r3, r1
 800411c:	6123      	str	r3, [r4, #16]
 800411e:	f04f 0a00 	mov.w	sl, #0
 8004122:	65a1      	str	r1, [r4, #88]	; 0x58
 8004124:	e7df      	b.n	80040e6 <_printf_float+0x162>
 8004126:	b913      	cbnz	r3, 800412e <_printf_float+0x1aa>
 8004128:	6822      	ldr	r2, [r4, #0]
 800412a:	07d2      	lsls	r2, r2, #31
 800412c:	d501      	bpl.n	8004132 <_printf_float+0x1ae>
 800412e:	3302      	adds	r3, #2
 8004130:	e7f4      	b.n	800411c <_printf_float+0x198>
 8004132:	2301      	movs	r3, #1
 8004134:	e7f2      	b.n	800411c <_printf_float+0x198>
 8004136:	f04f 0967 	mov.w	r9, #103	; 0x67
 800413a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800413c:	4299      	cmp	r1, r3
 800413e:	db05      	blt.n	800414c <_printf_float+0x1c8>
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	6121      	str	r1, [r4, #16]
 8004144:	07d8      	lsls	r0, r3, #31
 8004146:	d5ea      	bpl.n	800411e <_printf_float+0x19a>
 8004148:	1c4b      	adds	r3, r1, #1
 800414a:	e7e7      	b.n	800411c <_printf_float+0x198>
 800414c:	2900      	cmp	r1, #0
 800414e:	bfcc      	ite	gt
 8004150:	2201      	movgt	r2, #1
 8004152:	f1c1 0202 	rsble	r2, r1, #2
 8004156:	4413      	add	r3, r2
 8004158:	e7e0      	b.n	800411c <_printf_float+0x198>
 800415a:	6823      	ldr	r3, [r4, #0]
 800415c:	055a      	lsls	r2, r3, #21
 800415e:	d407      	bmi.n	8004170 <_printf_float+0x1ec>
 8004160:	6923      	ldr	r3, [r4, #16]
 8004162:	4642      	mov	r2, r8
 8004164:	4631      	mov	r1, r6
 8004166:	4628      	mov	r0, r5
 8004168:	47b8      	blx	r7
 800416a:	3001      	adds	r0, #1
 800416c:	d12b      	bne.n	80041c6 <_printf_float+0x242>
 800416e:	e764      	b.n	800403a <_printf_float+0xb6>
 8004170:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004174:	f240 80dd 	bls.w	8004332 <_printf_float+0x3ae>
 8004178:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800417c:	2200      	movs	r2, #0
 800417e:	2300      	movs	r3, #0
 8004180:	f7fc fc12 	bl	80009a8 <__aeabi_dcmpeq>
 8004184:	2800      	cmp	r0, #0
 8004186:	d033      	beq.n	80041f0 <_printf_float+0x26c>
 8004188:	2301      	movs	r3, #1
 800418a:	4631      	mov	r1, r6
 800418c:	4628      	mov	r0, r5
 800418e:	4a35      	ldr	r2, [pc, #212]	; (8004264 <_printf_float+0x2e0>)
 8004190:	47b8      	blx	r7
 8004192:	3001      	adds	r0, #1
 8004194:	f43f af51 	beq.w	800403a <_printf_float+0xb6>
 8004198:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800419c:	429a      	cmp	r2, r3
 800419e:	db02      	blt.n	80041a6 <_printf_float+0x222>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	07d8      	lsls	r0, r3, #31
 80041a4:	d50f      	bpl.n	80041c6 <_printf_float+0x242>
 80041a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80041aa:	4631      	mov	r1, r6
 80041ac:	4628      	mov	r0, r5
 80041ae:	47b8      	blx	r7
 80041b0:	3001      	adds	r0, #1
 80041b2:	f43f af42 	beq.w	800403a <_printf_float+0xb6>
 80041b6:	f04f 0800 	mov.w	r8, #0
 80041ba:	f104 091a 	add.w	r9, r4, #26
 80041be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80041c0:	3b01      	subs	r3, #1
 80041c2:	4543      	cmp	r3, r8
 80041c4:	dc09      	bgt.n	80041da <_printf_float+0x256>
 80041c6:	6823      	ldr	r3, [r4, #0]
 80041c8:	079b      	lsls	r3, r3, #30
 80041ca:	f100 8104 	bmi.w	80043d6 <_printf_float+0x452>
 80041ce:	68e0      	ldr	r0, [r4, #12]
 80041d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80041d2:	4298      	cmp	r0, r3
 80041d4:	bfb8      	it	lt
 80041d6:	4618      	movlt	r0, r3
 80041d8:	e731      	b.n	800403e <_printf_float+0xba>
 80041da:	2301      	movs	r3, #1
 80041dc:	464a      	mov	r2, r9
 80041de:	4631      	mov	r1, r6
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b8      	blx	r7
 80041e4:	3001      	adds	r0, #1
 80041e6:	f43f af28 	beq.w	800403a <_printf_float+0xb6>
 80041ea:	f108 0801 	add.w	r8, r8, #1
 80041ee:	e7e6      	b.n	80041be <_printf_float+0x23a>
 80041f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	dc38      	bgt.n	8004268 <_printf_float+0x2e4>
 80041f6:	2301      	movs	r3, #1
 80041f8:	4631      	mov	r1, r6
 80041fa:	4628      	mov	r0, r5
 80041fc:	4a19      	ldr	r2, [pc, #100]	; (8004264 <_printf_float+0x2e0>)
 80041fe:	47b8      	blx	r7
 8004200:	3001      	adds	r0, #1
 8004202:	f43f af1a 	beq.w	800403a <_printf_float+0xb6>
 8004206:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800420a:	4313      	orrs	r3, r2
 800420c:	d102      	bne.n	8004214 <_printf_float+0x290>
 800420e:	6823      	ldr	r3, [r4, #0]
 8004210:	07d9      	lsls	r1, r3, #31
 8004212:	d5d8      	bpl.n	80041c6 <_printf_float+0x242>
 8004214:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004218:	4631      	mov	r1, r6
 800421a:	4628      	mov	r0, r5
 800421c:	47b8      	blx	r7
 800421e:	3001      	adds	r0, #1
 8004220:	f43f af0b 	beq.w	800403a <_printf_float+0xb6>
 8004224:	f04f 0900 	mov.w	r9, #0
 8004228:	f104 0a1a 	add.w	sl, r4, #26
 800422c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800422e:	425b      	negs	r3, r3
 8004230:	454b      	cmp	r3, r9
 8004232:	dc01      	bgt.n	8004238 <_printf_float+0x2b4>
 8004234:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004236:	e794      	b.n	8004162 <_printf_float+0x1de>
 8004238:	2301      	movs	r3, #1
 800423a:	4652      	mov	r2, sl
 800423c:	4631      	mov	r1, r6
 800423e:	4628      	mov	r0, r5
 8004240:	47b8      	blx	r7
 8004242:	3001      	adds	r0, #1
 8004244:	f43f aef9 	beq.w	800403a <_printf_float+0xb6>
 8004248:	f109 0901 	add.w	r9, r9, #1
 800424c:	e7ee      	b.n	800422c <_printf_float+0x2a8>
 800424e:	bf00      	nop
 8004250:	7fefffff 	.word	0x7fefffff
 8004254:	08007ae9 	.word	0x08007ae9
 8004258:	08007aed 	.word	0x08007aed
 800425c:	08007af1 	.word	0x08007af1
 8004260:	08007af5 	.word	0x08007af5
 8004264:	08007af9 	.word	0x08007af9
 8004268:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800426a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800426c:	429a      	cmp	r2, r3
 800426e:	bfa8      	it	ge
 8004270:	461a      	movge	r2, r3
 8004272:	2a00      	cmp	r2, #0
 8004274:	4691      	mov	r9, r2
 8004276:	dc37      	bgt.n	80042e8 <_printf_float+0x364>
 8004278:	f04f 0b00 	mov.w	fp, #0
 800427c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004280:	f104 021a 	add.w	r2, r4, #26
 8004284:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004288:	ebaa 0309 	sub.w	r3, sl, r9
 800428c:	455b      	cmp	r3, fp
 800428e:	dc33      	bgt.n	80042f8 <_printf_float+0x374>
 8004290:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004294:	429a      	cmp	r2, r3
 8004296:	db3b      	blt.n	8004310 <_printf_float+0x38c>
 8004298:	6823      	ldr	r3, [r4, #0]
 800429a:	07da      	lsls	r2, r3, #31
 800429c:	d438      	bmi.n	8004310 <_printf_float+0x38c>
 800429e:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80042a2:	eba2 0903 	sub.w	r9, r2, r3
 80042a6:	eba2 020a 	sub.w	r2, r2, sl
 80042aa:	4591      	cmp	r9, r2
 80042ac:	bfa8      	it	ge
 80042ae:	4691      	movge	r9, r2
 80042b0:	f1b9 0f00 	cmp.w	r9, #0
 80042b4:	dc34      	bgt.n	8004320 <_printf_float+0x39c>
 80042b6:	f04f 0800 	mov.w	r8, #0
 80042ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80042be:	f104 0a1a 	add.w	sl, r4, #26
 80042c2:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80042c6:	1a9b      	subs	r3, r3, r2
 80042c8:	eba3 0309 	sub.w	r3, r3, r9
 80042cc:	4543      	cmp	r3, r8
 80042ce:	f77f af7a 	ble.w	80041c6 <_printf_float+0x242>
 80042d2:	2301      	movs	r3, #1
 80042d4:	4652      	mov	r2, sl
 80042d6:	4631      	mov	r1, r6
 80042d8:	4628      	mov	r0, r5
 80042da:	47b8      	blx	r7
 80042dc:	3001      	adds	r0, #1
 80042de:	f43f aeac 	beq.w	800403a <_printf_float+0xb6>
 80042e2:	f108 0801 	add.w	r8, r8, #1
 80042e6:	e7ec      	b.n	80042c2 <_printf_float+0x33e>
 80042e8:	4613      	mov	r3, r2
 80042ea:	4631      	mov	r1, r6
 80042ec:	4642      	mov	r2, r8
 80042ee:	4628      	mov	r0, r5
 80042f0:	47b8      	blx	r7
 80042f2:	3001      	adds	r0, #1
 80042f4:	d1c0      	bne.n	8004278 <_printf_float+0x2f4>
 80042f6:	e6a0      	b.n	800403a <_printf_float+0xb6>
 80042f8:	2301      	movs	r3, #1
 80042fa:	4631      	mov	r1, r6
 80042fc:	4628      	mov	r0, r5
 80042fe:	920b      	str	r2, [sp, #44]	; 0x2c
 8004300:	47b8      	blx	r7
 8004302:	3001      	adds	r0, #1
 8004304:	f43f ae99 	beq.w	800403a <_printf_float+0xb6>
 8004308:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800430a:	f10b 0b01 	add.w	fp, fp, #1
 800430e:	e7b9      	b.n	8004284 <_printf_float+0x300>
 8004310:	4631      	mov	r1, r6
 8004312:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004316:	4628      	mov	r0, r5
 8004318:	47b8      	blx	r7
 800431a:	3001      	adds	r0, #1
 800431c:	d1bf      	bne.n	800429e <_printf_float+0x31a>
 800431e:	e68c      	b.n	800403a <_printf_float+0xb6>
 8004320:	464b      	mov	r3, r9
 8004322:	4631      	mov	r1, r6
 8004324:	4628      	mov	r0, r5
 8004326:	eb08 020a 	add.w	r2, r8, sl
 800432a:	47b8      	blx	r7
 800432c:	3001      	adds	r0, #1
 800432e:	d1c2      	bne.n	80042b6 <_printf_float+0x332>
 8004330:	e683      	b.n	800403a <_printf_float+0xb6>
 8004332:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004334:	2a01      	cmp	r2, #1
 8004336:	dc01      	bgt.n	800433c <_printf_float+0x3b8>
 8004338:	07db      	lsls	r3, r3, #31
 800433a:	d539      	bpl.n	80043b0 <_printf_float+0x42c>
 800433c:	2301      	movs	r3, #1
 800433e:	4642      	mov	r2, r8
 8004340:	4631      	mov	r1, r6
 8004342:	4628      	mov	r0, r5
 8004344:	47b8      	blx	r7
 8004346:	3001      	adds	r0, #1
 8004348:	f43f ae77 	beq.w	800403a <_printf_float+0xb6>
 800434c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004350:	4631      	mov	r1, r6
 8004352:	4628      	mov	r0, r5
 8004354:	47b8      	blx	r7
 8004356:	3001      	adds	r0, #1
 8004358:	f43f ae6f 	beq.w	800403a <_printf_float+0xb6>
 800435c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004360:	2200      	movs	r2, #0
 8004362:	2300      	movs	r3, #0
 8004364:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004368:	f7fc fb1e 	bl	80009a8 <__aeabi_dcmpeq>
 800436c:	b9d8      	cbnz	r0, 80043a6 <_printf_float+0x422>
 800436e:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8004372:	f108 0201 	add.w	r2, r8, #1
 8004376:	4631      	mov	r1, r6
 8004378:	4628      	mov	r0, r5
 800437a:	47b8      	blx	r7
 800437c:	3001      	adds	r0, #1
 800437e:	d10e      	bne.n	800439e <_printf_float+0x41a>
 8004380:	e65b      	b.n	800403a <_printf_float+0xb6>
 8004382:	2301      	movs	r3, #1
 8004384:	464a      	mov	r2, r9
 8004386:	4631      	mov	r1, r6
 8004388:	4628      	mov	r0, r5
 800438a:	47b8      	blx	r7
 800438c:	3001      	adds	r0, #1
 800438e:	f43f ae54 	beq.w	800403a <_printf_float+0xb6>
 8004392:	f108 0801 	add.w	r8, r8, #1
 8004396:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004398:	3b01      	subs	r3, #1
 800439a:	4543      	cmp	r3, r8
 800439c:	dcf1      	bgt.n	8004382 <_printf_float+0x3fe>
 800439e:	4653      	mov	r3, sl
 80043a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80043a4:	e6de      	b.n	8004164 <_printf_float+0x1e0>
 80043a6:	f04f 0800 	mov.w	r8, #0
 80043aa:	f104 091a 	add.w	r9, r4, #26
 80043ae:	e7f2      	b.n	8004396 <_printf_float+0x412>
 80043b0:	2301      	movs	r3, #1
 80043b2:	4642      	mov	r2, r8
 80043b4:	e7df      	b.n	8004376 <_printf_float+0x3f2>
 80043b6:	2301      	movs	r3, #1
 80043b8:	464a      	mov	r2, r9
 80043ba:	4631      	mov	r1, r6
 80043bc:	4628      	mov	r0, r5
 80043be:	47b8      	blx	r7
 80043c0:	3001      	adds	r0, #1
 80043c2:	f43f ae3a 	beq.w	800403a <_printf_float+0xb6>
 80043c6:	f108 0801 	add.w	r8, r8, #1
 80043ca:	68e3      	ldr	r3, [r4, #12]
 80043cc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80043ce:	1a5b      	subs	r3, r3, r1
 80043d0:	4543      	cmp	r3, r8
 80043d2:	dcf0      	bgt.n	80043b6 <_printf_float+0x432>
 80043d4:	e6fb      	b.n	80041ce <_printf_float+0x24a>
 80043d6:	f04f 0800 	mov.w	r8, #0
 80043da:	f104 0919 	add.w	r9, r4, #25
 80043de:	e7f4      	b.n	80043ca <_printf_float+0x446>

080043e0 <_printf_common>:
 80043e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043e4:	4616      	mov	r6, r2
 80043e6:	4699      	mov	r9, r3
 80043e8:	688a      	ldr	r2, [r1, #8]
 80043ea:	690b      	ldr	r3, [r1, #16]
 80043ec:	4607      	mov	r7, r0
 80043ee:	4293      	cmp	r3, r2
 80043f0:	bfb8      	it	lt
 80043f2:	4613      	movlt	r3, r2
 80043f4:	6033      	str	r3, [r6, #0]
 80043f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043fa:	460c      	mov	r4, r1
 80043fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004400:	b10a      	cbz	r2, 8004406 <_printf_common+0x26>
 8004402:	3301      	adds	r3, #1
 8004404:	6033      	str	r3, [r6, #0]
 8004406:	6823      	ldr	r3, [r4, #0]
 8004408:	0699      	lsls	r1, r3, #26
 800440a:	bf42      	ittt	mi
 800440c:	6833      	ldrmi	r3, [r6, #0]
 800440e:	3302      	addmi	r3, #2
 8004410:	6033      	strmi	r3, [r6, #0]
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	f015 0506 	ands.w	r5, r5, #6
 8004418:	d106      	bne.n	8004428 <_printf_common+0x48>
 800441a:	f104 0a19 	add.w	sl, r4, #25
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	6832      	ldr	r2, [r6, #0]
 8004422:	1a9b      	subs	r3, r3, r2
 8004424:	42ab      	cmp	r3, r5
 8004426:	dc2b      	bgt.n	8004480 <_printf_common+0xa0>
 8004428:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800442c:	1e13      	subs	r3, r2, #0
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	bf18      	it	ne
 8004432:	2301      	movne	r3, #1
 8004434:	0692      	lsls	r2, r2, #26
 8004436:	d430      	bmi.n	800449a <_printf_common+0xba>
 8004438:	4649      	mov	r1, r9
 800443a:	4638      	mov	r0, r7
 800443c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004440:	47c0      	blx	r8
 8004442:	3001      	adds	r0, #1
 8004444:	d023      	beq.n	800448e <_printf_common+0xae>
 8004446:	6823      	ldr	r3, [r4, #0]
 8004448:	6922      	ldr	r2, [r4, #16]
 800444a:	f003 0306 	and.w	r3, r3, #6
 800444e:	2b04      	cmp	r3, #4
 8004450:	bf14      	ite	ne
 8004452:	2500      	movne	r5, #0
 8004454:	6833      	ldreq	r3, [r6, #0]
 8004456:	f04f 0600 	mov.w	r6, #0
 800445a:	bf08      	it	eq
 800445c:	68e5      	ldreq	r5, [r4, #12]
 800445e:	f104 041a 	add.w	r4, r4, #26
 8004462:	bf08      	it	eq
 8004464:	1aed      	subeq	r5, r5, r3
 8004466:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800446a:	bf08      	it	eq
 800446c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004470:	4293      	cmp	r3, r2
 8004472:	bfc4      	itt	gt
 8004474:	1a9b      	subgt	r3, r3, r2
 8004476:	18ed      	addgt	r5, r5, r3
 8004478:	42b5      	cmp	r5, r6
 800447a:	d11a      	bne.n	80044b2 <_printf_common+0xd2>
 800447c:	2000      	movs	r0, #0
 800447e:	e008      	b.n	8004492 <_printf_common+0xb2>
 8004480:	2301      	movs	r3, #1
 8004482:	4652      	mov	r2, sl
 8004484:	4649      	mov	r1, r9
 8004486:	4638      	mov	r0, r7
 8004488:	47c0      	blx	r8
 800448a:	3001      	adds	r0, #1
 800448c:	d103      	bne.n	8004496 <_printf_common+0xb6>
 800448e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004492:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004496:	3501      	adds	r5, #1
 8004498:	e7c1      	b.n	800441e <_printf_common+0x3e>
 800449a:	2030      	movs	r0, #48	; 0x30
 800449c:	18e1      	adds	r1, r4, r3
 800449e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a8:	4422      	add	r2, r4
 80044aa:	3302      	adds	r3, #2
 80044ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044b0:	e7c2      	b.n	8004438 <_printf_common+0x58>
 80044b2:	2301      	movs	r3, #1
 80044b4:	4622      	mov	r2, r4
 80044b6:	4649      	mov	r1, r9
 80044b8:	4638      	mov	r0, r7
 80044ba:	47c0      	blx	r8
 80044bc:	3001      	adds	r0, #1
 80044be:	d0e6      	beq.n	800448e <_printf_common+0xae>
 80044c0:	3601      	adds	r6, #1
 80044c2:	e7d9      	b.n	8004478 <_printf_common+0x98>

080044c4 <_printf_i>:
 80044c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044c8:	7e0f      	ldrb	r7, [r1, #24]
 80044ca:	4691      	mov	r9, r2
 80044cc:	2f78      	cmp	r7, #120	; 0x78
 80044ce:	4680      	mov	r8, r0
 80044d0:	460c      	mov	r4, r1
 80044d2:	469a      	mov	sl, r3
 80044d4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80044d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80044da:	d807      	bhi.n	80044ec <_printf_i+0x28>
 80044dc:	2f62      	cmp	r7, #98	; 0x62
 80044de:	d80a      	bhi.n	80044f6 <_printf_i+0x32>
 80044e0:	2f00      	cmp	r7, #0
 80044e2:	f000 80d5 	beq.w	8004690 <_printf_i+0x1cc>
 80044e6:	2f58      	cmp	r7, #88	; 0x58
 80044e8:	f000 80c1 	beq.w	800466e <_printf_i+0x1aa>
 80044ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80044f4:	e03a      	b.n	800456c <_printf_i+0xa8>
 80044f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80044fa:	2b15      	cmp	r3, #21
 80044fc:	d8f6      	bhi.n	80044ec <_printf_i+0x28>
 80044fe:	a101      	add	r1, pc, #4	; (adr r1, 8004504 <_printf_i+0x40>)
 8004500:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004504:	0800455d 	.word	0x0800455d
 8004508:	08004571 	.word	0x08004571
 800450c:	080044ed 	.word	0x080044ed
 8004510:	080044ed 	.word	0x080044ed
 8004514:	080044ed 	.word	0x080044ed
 8004518:	080044ed 	.word	0x080044ed
 800451c:	08004571 	.word	0x08004571
 8004520:	080044ed 	.word	0x080044ed
 8004524:	080044ed 	.word	0x080044ed
 8004528:	080044ed 	.word	0x080044ed
 800452c:	080044ed 	.word	0x080044ed
 8004530:	08004677 	.word	0x08004677
 8004534:	0800459d 	.word	0x0800459d
 8004538:	08004631 	.word	0x08004631
 800453c:	080044ed 	.word	0x080044ed
 8004540:	080044ed 	.word	0x080044ed
 8004544:	08004699 	.word	0x08004699
 8004548:	080044ed 	.word	0x080044ed
 800454c:	0800459d 	.word	0x0800459d
 8004550:	080044ed 	.word	0x080044ed
 8004554:	080044ed 	.word	0x080044ed
 8004558:	08004639 	.word	0x08004639
 800455c:	682b      	ldr	r3, [r5, #0]
 800455e:	1d1a      	adds	r2, r3, #4
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	602a      	str	r2, [r5, #0]
 8004564:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004568:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800456c:	2301      	movs	r3, #1
 800456e:	e0a0      	b.n	80046b2 <_printf_i+0x1ee>
 8004570:	6820      	ldr	r0, [r4, #0]
 8004572:	682b      	ldr	r3, [r5, #0]
 8004574:	0607      	lsls	r7, r0, #24
 8004576:	f103 0104 	add.w	r1, r3, #4
 800457a:	6029      	str	r1, [r5, #0]
 800457c:	d501      	bpl.n	8004582 <_printf_i+0xbe>
 800457e:	681e      	ldr	r6, [r3, #0]
 8004580:	e003      	b.n	800458a <_printf_i+0xc6>
 8004582:	0646      	lsls	r6, r0, #25
 8004584:	d5fb      	bpl.n	800457e <_printf_i+0xba>
 8004586:	f9b3 6000 	ldrsh.w	r6, [r3]
 800458a:	2e00      	cmp	r6, #0
 800458c:	da03      	bge.n	8004596 <_printf_i+0xd2>
 800458e:	232d      	movs	r3, #45	; 0x2d
 8004590:	4276      	negs	r6, r6
 8004592:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004596:	230a      	movs	r3, #10
 8004598:	4859      	ldr	r0, [pc, #356]	; (8004700 <_printf_i+0x23c>)
 800459a:	e012      	b.n	80045c2 <_printf_i+0xfe>
 800459c:	682b      	ldr	r3, [r5, #0]
 800459e:	6820      	ldr	r0, [r4, #0]
 80045a0:	1d19      	adds	r1, r3, #4
 80045a2:	6029      	str	r1, [r5, #0]
 80045a4:	0605      	lsls	r5, r0, #24
 80045a6:	d501      	bpl.n	80045ac <_printf_i+0xe8>
 80045a8:	681e      	ldr	r6, [r3, #0]
 80045aa:	e002      	b.n	80045b2 <_printf_i+0xee>
 80045ac:	0641      	lsls	r1, r0, #25
 80045ae:	d5fb      	bpl.n	80045a8 <_printf_i+0xe4>
 80045b0:	881e      	ldrh	r6, [r3, #0]
 80045b2:	2f6f      	cmp	r7, #111	; 0x6f
 80045b4:	bf0c      	ite	eq
 80045b6:	2308      	moveq	r3, #8
 80045b8:	230a      	movne	r3, #10
 80045ba:	4851      	ldr	r0, [pc, #324]	; (8004700 <_printf_i+0x23c>)
 80045bc:	2100      	movs	r1, #0
 80045be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80045c2:	6865      	ldr	r5, [r4, #4]
 80045c4:	2d00      	cmp	r5, #0
 80045c6:	bfa8      	it	ge
 80045c8:	6821      	ldrge	r1, [r4, #0]
 80045ca:	60a5      	str	r5, [r4, #8]
 80045cc:	bfa4      	itt	ge
 80045ce:	f021 0104 	bicge.w	r1, r1, #4
 80045d2:	6021      	strge	r1, [r4, #0]
 80045d4:	b90e      	cbnz	r6, 80045da <_printf_i+0x116>
 80045d6:	2d00      	cmp	r5, #0
 80045d8:	d04b      	beq.n	8004672 <_printf_i+0x1ae>
 80045da:	4615      	mov	r5, r2
 80045dc:	fbb6 f1f3 	udiv	r1, r6, r3
 80045e0:	fb03 6711 	mls	r7, r3, r1, r6
 80045e4:	5dc7      	ldrb	r7, [r0, r7]
 80045e6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80045ea:	4637      	mov	r7, r6
 80045ec:	42bb      	cmp	r3, r7
 80045ee:	460e      	mov	r6, r1
 80045f0:	d9f4      	bls.n	80045dc <_printf_i+0x118>
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d10b      	bne.n	800460e <_printf_i+0x14a>
 80045f6:	6823      	ldr	r3, [r4, #0]
 80045f8:	07de      	lsls	r6, r3, #31
 80045fa:	d508      	bpl.n	800460e <_printf_i+0x14a>
 80045fc:	6923      	ldr	r3, [r4, #16]
 80045fe:	6861      	ldr	r1, [r4, #4]
 8004600:	4299      	cmp	r1, r3
 8004602:	bfde      	ittt	le
 8004604:	2330      	movle	r3, #48	; 0x30
 8004606:	f805 3c01 	strble.w	r3, [r5, #-1]
 800460a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800460e:	1b52      	subs	r2, r2, r5
 8004610:	6122      	str	r2, [r4, #16]
 8004612:	464b      	mov	r3, r9
 8004614:	4621      	mov	r1, r4
 8004616:	4640      	mov	r0, r8
 8004618:	f8cd a000 	str.w	sl, [sp]
 800461c:	aa03      	add	r2, sp, #12
 800461e:	f7ff fedf 	bl	80043e0 <_printf_common>
 8004622:	3001      	adds	r0, #1
 8004624:	d14a      	bne.n	80046bc <_printf_i+0x1f8>
 8004626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800462a:	b004      	add	sp, #16
 800462c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004630:	6823      	ldr	r3, [r4, #0]
 8004632:	f043 0320 	orr.w	r3, r3, #32
 8004636:	6023      	str	r3, [r4, #0]
 8004638:	2778      	movs	r7, #120	; 0x78
 800463a:	4832      	ldr	r0, [pc, #200]	; (8004704 <_printf_i+0x240>)
 800463c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004640:	6823      	ldr	r3, [r4, #0]
 8004642:	6829      	ldr	r1, [r5, #0]
 8004644:	061f      	lsls	r7, r3, #24
 8004646:	f851 6b04 	ldr.w	r6, [r1], #4
 800464a:	d402      	bmi.n	8004652 <_printf_i+0x18e>
 800464c:	065f      	lsls	r7, r3, #25
 800464e:	bf48      	it	mi
 8004650:	b2b6      	uxthmi	r6, r6
 8004652:	07df      	lsls	r7, r3, #31
 8004654:	bf48      	it	mi
 8004656:	f043 0320 	orrmi.w	r3, r3, #32
 800465a:	6029      	str	r1, [r5, #0]
 800465c:	bf48      	it	mi
 800465e:	6023      	strmi	r3, [r4, #0]
 8004660:	b91e      	cbnz	r6, 800466a <_printf_i+0x1a6>
 8004662:	6823      	ldr	r3, [r4, #0]
 8004664:	f023 0320 	bic.w	r3, r3, #32
 8004668:	6023      	str	r3, [r4, #0]
 800466a:	2310      	movs	r3, #16
 800466c:	e7a6      	b.n	80045bc <_printf_i+0xf8>
 800466e:	4824      	ldr	r0, [pc, #144]	; (8004700 <_printf_i+0x23c>)
 8004670:	e7e4      	b.n	800463c <_printf_i+0x178>
 8004672:	4615      	mov	r5, r2
 8004674:	e7bd      	b.n	80045f2 <_printf_i+0x12e>
 8004676:	682b      	ldr	r3, [r5, #0]
 8004678:	6826      	ldr	r6, [r4, #0]
 800467a:	1d18      	adds	r0, r3, #4
 800467c:	6961      	ldr	r1, [r4, #20]
 800467e:	6028      	str	r0, [r5, #0]
 8004680:	0635      	lsls	r5, r6, #24
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	d501      	bpl.n	800468a <_printf_i+0x1c6>
 8004686:	6019      	str	r1, [r3, #0]
 8004688:	e002      	b.n	8004690 <_printf_i+0x1cc>
 800468a:	0670      	lsls	r0, r6, #25
 800468c:	d5fb      	bpl.n	8004686 <_printf_i+0x1c2>
 800468e:	8019      	strh	r1, [r3, #0]
 8004690:	2300      	movs	r3, #0
 8004692:	4615      	mov	r5, r2
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	e7bc      	b.n	8004612 <_printf_i+0x14e>
 8004698:	682b      	ldr	r3, [r5, #0]
 800469a:	2100      	movs	r1, #0
 800469c:	1d1a      	adds	r2, r3, #4
 800469e:	602a      	str	r2, [r5, #0]
 80046a0:	681d      	ldr	r5, [r3, #0]
 80046a2:	6862      	ldr	r2, [r4, #4]
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 f9c1 	bl	8004a2c <memchr>
 80046aa:	b108      	cbz	r0, 80046b0 <_printf_i+0x1ec>
 80046ac:	1b40      	subs	r0, r0, r5
 80046ae:	6060      	str	r0, [r4, #4]
 80046b0:	6863      	ldr	r3, [r4, #4]
 80046b2:	6123      	str	r3, [r4, #16]
 80046b4:	2300      	movs	r3, #0
 80046b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ba:	e7aa      	b.n	8004612 <_printf_i+0x14e>
 80046bc:	462a      	mov	r2, r5
 80046be:	4649      	mov	r1, r9
 80046c0:	4640      	mov	r0, r8
 80046c2:	6923      	ldr	r3, [r4, #16]
 80046c4:	47d0      	blx	sl
 80046c6:	3001      	adds	r0, #1
 80046c8:	d0ad      	beq.n	8004626 <_printf_i+0x162>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	079b      	lsls	r3, r3, #30
 80046ce:	d413      	bmi.n	80046f8 <_printf_i+0x234>
 80046d0:	68e0      	ldr	r0, [r4, #12]
 80046d2:	9b03      	ldr	r3, [sp, #12]
 80046d4:	4298      	cmp	r0, r3
 80046d6:	bfb8      	it	lt
 80046d8:	4618      	movlt	r0, r3
 80046da:	e7a6      	b.n	800462a <_printf_i+0x166>
 80046dc:	2301      	movs	r3, #1
 80046de:	4632      	mov	r2, r6
 80046e0:	4649      	mov	r1, r9
 80046e2:	4640      	mov	r0, r8
 80046e4:	47d0      	blx	sl
 80046e6:	3001      	adds	r0, #1
 80046e8:	d09d      	beq.n	8004626 <_printf_i+0x162>
 80046ea:	3501      	adds	r5, #1
 80046ec:	68e3      	ldr	r3, [r4, #12]
 80046ee:	9903      	ldr	r1, [sp, #12]
 80046f0:	1a5b      	subs	r3, r3, r1
 80046f2:	42ab      	cmp	r3, r5
 80046f4:	dcf2      	bgt.n	80046dc <_printf_i+0x218>
 80046f6:	e7eb      	b.n	80046d0 <_printf_i+0x20c>
 80046f8:	2500      	movs	r5, #0
 80046fa:	f104 0619 	add.w	r6, r4, #25
 80046fe:	e7f5      	b.n	80046ec <_printf_i+0x228>
 8004700:	08007afb 	.word	0x08007afb
 8004704:	08007b0c 	.word	0x08007b0c

08004708 <std>:
 8004708:	2300      	movs	r3, #0
 800470a:	b510      	push	{r4, lr}
 800470c:	4604      	mov	r4, r0
 800470e:	e9c0 3300 	strd	r3, r3, [r0]
 8004712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004716:	6083      	str	r3, [r0, #8]
 8004718:	8181      	strh	r1, [r0, #12]
 800471a:	6643      	str	r3, [r0, #100]	; 0x64
 800471c:	81c2      	strh	r2, [r0, #14]
 800471e:	6183      	str	r3, [r0, #24]
 8004720:	4619      	mov	r1, r3
 8004722:	2208      	movs	r2, #8
 8004724:	305c      	adds	r0, #92	; 0x5c
 8004726:	f000 f902 	bl	800492e <memset>
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <std+0x38>)
 800472c:	6224      	str	r4, [r4, #32]
 800472e:	6263      	str	r3, [r4, #36]	; 0x24
 8004730:	4b04      	ldr	r3, [pc, #16]	; (8004744 <std+0x3c>)
 8004732:	62a3      	str	r3, [r4, #40]	; 0x28
 8004734:	4b04      	ldr	r3, [pc, #16]	; (8004748 <std+0x40>)
 8004736:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004738:	4b04      	ldr	r3, [pc, #16]	; (800474c <std+0x44>)
 800473a:	6323      	str	r3, [r4, #48]	; 0x30
 800473c:	bd10      	pop	{r4, pc}
 800473e:	bf00      	nop
 8004740:	080048a9 	.word	0x080048a9
 8004744:	080048cb 	.word	0x080048cb
 8004748:	08004903 	.word	0x08004903
 800474c:	08004927 	.word	0x08004927

08004750 <stdio_exit_handler>:
 8004750:	4a02      	ldr	r2, [pc, #8]	; (800475c <stdio_exit_handler+0xc>)
 8004752:	4903      	ldr	r1, [pc, #12]	; (8004760 <stdio_exit_handler+0x10>)
 8004754:	4803      	ldr	r0, [pc, #12]	; (8004764 <stdio_exit_handler+0x14>)
 8004756:	f000 b869 	b.w	800482c <_fwalk_sglue>
 800475a:	bf00      	nop
 800475c:	20000014 	.word	0x20000014
 8004760:	080063c5 	.word	0x080063c5
 8004764:	20000020 	.word	0x20000020

08004768 <cleanup_stdio>:
 8004768:	6841      	ldr	r1, [r0, #4]
 800476a:	4b0c      	ldr	r3, [pc, #48]	; (800479c <cleanup_stdio+0x34>)
 800476c:	b510      	push	{r4, lr}
 800476e:	4299      	cmp	r1, r3
 8004770:	4604      	mov	r4, r0
 8004772:	d001      	beq.n	8004778 <cleanup_stdio+0x10>
 8004774:	f001 fe26 	bl	80063c4 <_fflush_r>
 8004778:	68a1      	ldr	r1, [r4, #8]
 800477a:	4b09      	ldr	r3, [pc, #36]	; (80047a0 <cleanup_stdio+0x38>)
 800477c:	4299      	cmp	r1, r3
 800477e:	d002      	beq.n	8004786 <cleanup_stdio+0x1e>
 8004780:	4620      	mov	r0, r4
 8004782:	f001 fe1f 	bl	80063c4 <_fflush_r>
 8004786:	68e1      	ldr	r1, [r4, #12]
 8004788:	4b06      	ldr	r3, [pc, #24]	; (80047a4 <cleanup_stdio+0x3c>)
 800478a:	4299      	cmp	r1, r3
 800478c:	d004      	beq.n	8004798 <cleanup_stdio+0x30>
 800478e:	4620      	mov	r0, r4
 8004790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004794:	f001 be16 	b.w	80063c4 <_fflush_r>
 8004798:	bd10      	pop	{r4, pc}
 800479a:	bf00      	nop
 800479c:	2000082c 	.word	0x2000082c
 80047a0:	20000894 	.word	0x20000894
 80047a4:	200008fc 	.word	0x200008fc

080047a8 <global_stdio_init.part.0>:
 80047a8:	b510      	push	{r4, lr}
 80047aa:	4b0b      	ldr	r3, [pc, #44]	; (80047d8 <global_stdio_init.part.0+0x30>)
 80047ac:	4c0b      	ldr	r4, [pc, #44]	; (80047dc <global_stdio_init.part.0+0x34>)
 80047ae:	4a0c      	ldr	r2, [pc, #48]	; (80047e0 <global_stdio_init.part.0+0x38>)
 80047b0:	4620      	mov	r0, r4
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	2104      	movs	r1, #4
 80047b6:	2200      	movs	r2, #0
 80047b8:	f7ff ffa6 	bl	8004708 <std>
 80047bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80047c0:	2201      	movs	r2, #1
 80047c2:	2109      	movs	r1, #9
 80047c4:	f7ff ffa0 	bl	8004708 <std>
 80047c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80047cc:	2202      	movs	r2, #2
 80047ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047d2:	2112      	movs	r1, #18
 80047d4:	f7ff bf98 	b.w	8004708 <std>
 80047d8:	20000964 	.word	0x20000964
 80047dc:	2000082c 	.word	0x2000082c
 80047e0:	08004751 	.word	0x08004751

080047e4 <__sfp_lock_acquire>:
 80047e4:	4801      	ldr	r0, [pc, #4]	; (80047ec <__sfp_lock_acquire+0x8>)
 80047e6:	f000 b91f 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 80047ea:	bf00      	nop
 80047ec:	2000096d 	.word	0x2000096d

080047f0 <__sfp_lock_release>:
 80047f0:	4801      	ldr	r0, [pc, #4]	; (80047f8 <__sfp_lock_release+0x8>)
 80047f2:	f000 b91a 	b.w	8004a2a <__retarget_lock_release_recursive>
 80047f6:	bf00      	nop
 80047f8:	2000096d 	.word	0x2000096d

080047fc <__sinit>:
 80047fc:	b510      	push	{r4, lr}
 80047fe:	4604      	mov	r4, r0
 8004800:	f7ff fff0 	bl	80047e4 <__sfp_lock_acquire>
 8004804:	6a23      	ldr	r3, [r4, #32]
 8004806:	b11b      	cbz	r3, 8004810 <__sinit+0x14>
 8004808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800480c:	f7ff bff0 	b.w	80047f0 <__sfp_lock_release>
 8004810:	4b04      	ldr	r3, [pc, #16]	; (8004824 <__sinit+0x28>)
 8004812:	6223      	str	r3, [r4, #32]
 8004814:	4b04      	ldr	r3, [pc, #16]	; (8004828 <__sinit+0x2c>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1f5      	bne.n	8004808 <__sinit+0xc>
 800481c:	f7ff ffc4 	bl	80047a8 <global_stdio_init.part.0>
 8004820:	e7f2      	b.n	8004808 <__sinit+0xc>
 8004822:	bf00      	nop
 8004824:	08004769 	.word	0x08004769
 8004828:	20000964 	.word	0x20000964

0800482c <_fwalk_sglue>:
 800482c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004830:	4607      	mov	r7, r0
 8004832:	4688      	mov	r8, r1
 8004834:	4614      	mov	r4, r2
 8004836:	2600      	movs	r6, #0
 8004838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800483c:	f1b9 0901 	subs.w	r9, r9, #1
 8004840:	d505      	bpl.n	800484e <_fwalk_sglue+0x22>
 8004842:	6824      	ldr	r4, [r4, #0]
 8004844:	2c00      	cmp	r4, #0
 8004846:	d1f7      	bne.n	8004838 <_fwalk_sglue+0xc>
 8004848:	4630      	mov	r0, r6
 800484a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800484e:	89ab      	ldrh	r3, [r5, #12]
 8004850:	2b01      	cmp	r3, #1
 8004852:	d907      	bls.n	8004864 <_fwalk_sglue+0x38>
 8004854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004858:	3301      	adds	r3, #1
 800485a:	d003      	beq.n	8004864 <_fwalk_sglue+0x38>
 800485c:	4629      	mov	r1, r5
 800485e:	4638      	mov	r0, r7
 8004860:	47c0      	blx	r8
 8004862:	4306      	orrs	r6, r0
 8004864:	3568      	adds	r5, #104	; 0x68
 8004866:	e7e9      	b.n	800483c <_fwalk_sglue+0x10>

08004868 <siprintf>:
 8004868:	b40e      	push	{r1, r2, r3}
 800486a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800486e:	b500      	push	{lr}
 8004870:	b09c      	sub	sp, #112	; 0x70
 8004872:	ab1d      	add	r3, sp, #116	; 0x74
 8004874:	9002      	str	r0, [sp, #8]
 8004876:	9006      	str	r0, [sp, #24]
 8004878:	9107      	str	r1, [sp, #28]
 800487a:	9104      	str	r1, [sp, #16]
 800487c:	4808      	ldr	r0, [pc, #32]	; (80048a0 <siprintf+0x38>)
 800487e:	4909      	ldr	r1, [pc, #36]	; (80048a4 <siprintf+0x3c>)
 8004880:	f853 2b04 	ldr.w	r2, [r3], #4
 8004884:	9105      	str	r1, [sp, #20]
 8004886:	6800      	ldr	r0, [r0, #0]
 8004888:	a902      	add	r1, sp, #8
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	f001 fc1a 	bl	80060c4 <_svfiprintf_r>
 8004890:	2200      	movs	r2, #0
 8004892:	9b02      	ldr	r3, [sp, #8]
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	b01c      	add	sp, #112	; 0x70
 8004898:	f85d eb04 	ldr.w	lr, [sp], #4
 800489c:	b003      	add	sp, #12
 800489e:	4770      	bx	lr
 80048a0:	2000006c 	.word	0x2000006c
 80048a4:	ffff0208 	.word	0xffff0208

080048a8 <__sread>:
 80048a8:	b510      	push	{r4, lr}
 80048aa:	460c      	mov	r4, r1
 80048ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048b0:	f000 f86c 	bl	800498c <_read_r>
 80048b4:	2800      	cmp	r0, #0
 80048b6:	bfab      	itete	ge
 80048b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80048ba:	89a3      	ldrhlt	r3, [r4, #12]
 80048bc:	181b      	addge	r3, r3, r0
 80048be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80048c2:	bfac      	ite	ge
 80048c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80048c6:	81a3      	strhlt	r3, [r4, #12]
 80048c8:	bd10      	pop	{r4, pc}

080048ca <__swrite>:
 80048ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048ce:	461f      	mov	r7, r3
 80048d0:	898b      	ldrh	r3, [r1, #12]
 80048d2:	4605      	mov	r5, r0
 80048d4:	05db      	lsls	r3, r3, #23
 80048d6:	460c      	mov	r4, r1
 80048d8:	4616      	mov	r6, r2
 80048da:	d505      	bpl.n	80048e8 <__swrite+0x1e>
 80048dc:	2302      	movs	r3, #2
 80048de:	2200      	movs	r2, #0
 80048e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e4:	f000 f840 	bl	8004968 <_lseek_r>
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	4632      	mov	r2, r6
 80048ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80048f0:	81a3      	strh	r3, [r4, #12]
 80048f2:	4628      	mov	r0, r5
 80048f4:	463b      	mov	r3, r7
 80048f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048fe:	f000 b857 	b.w	80049b0 <_write_r>

08004902 <__sseek>:
 8004902:	b510      	push	{r4, lr}
 8004904:	460c      	mov	r4, r1
 8004906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800490a:	f000 f82d 	bl	8004968 <_lseek_r>
 800490e:	1c43      	adds	r3, r0, #1
 8004910:	89a3      	ldrh	r3, [r4, #12]
 8004912:	bf15      	itete	ne
 8004914:	6560      	strne	r0, [r4, #84]	; 0x54
 8004916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800491a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800491e:	81a3      	strheq	r3, [r4, #12]
 8004920:	bf18      	it	ne
 8004922:	81a3      	strhne	r3, [r4, #12]
 8004924:	bd10      	pop	{r4, pc}

08004926 <__sclose>:
 8004926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800492a:	f000 b80d 	b.w	8004948 <_close_r>

0800492e <memset>:
 800492e:	4603      	mov	r3, r0
 8004930:	4402      	add	r2, r0
 8004932:	4293      	cmp	r3, r2
 8004934:	d100      	bne.n	8004938 <memset+0xa>
 8004936:	4770      	bx	lr
 8004938:	f803 1b01 	strb.w	r1, [r3], #1
 800493c:	e7f9      	b.n	8004932 <memset+0x4>
	...

08004940 <_localeconv_r>:
 8004940:	4800      	ldr	r0, [pc, #0]	; (8004944 <_localeconv_r+0x4>)
 8004942:	4770      	bx	lr
 8004944:	20000160 	.word	0x20000160

08004948 <_close_r>:
 8004948:	b538      	push	{r3, r4, r5, lr}
 800494a:	2300      	movs	r3, #0
 800494c:	4d05      	ldr	r5, [pc, #20]	; (8004964 <_close_r+0x1c>)
 800494e:	4604      	mov	r4, r0
 8004950:	4608      	mov	r0, r1
 8004952:	602b      	str	r3, [r5, #0]
 8004954:	f7fd faf4 	bl	8001f40 <_close>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_close_r+0x1a>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_close_r+0x1a>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	20000968 	.word	0x20000968

08004968 <_lseek_r>:
 8004968:	b538      	push	{r3, r4, r5, lr}
 800496a:	4604      	mov	r4, r0
 800496c:	4608      	mov	r0, r1
 800496e:	4611      	mov	r1, r2
 8004970:	2200      	movs	r2, #0
 8004972:	4d05      	ldr	r5, [pc, #20]	; (8004988 <_lseek_r+0x20>)
 8004974:	602a      	str	r2, [r5, #0]
 8004976:	461a      	mov	r2, r3
 8004978:	f7fd fb06 	bl	8001f88 <_lseek>
 800497c:	1c43      	adds	r3, r0, #1
 800497e:	d102      	bne.n	8004986 <_lseek_r+0x1e>
 8004980:	682b      	ldr	r3, [r5, #0]
 8004982:	b103      	cbz	r3, 8004986 <_lseek_r+0x1e>
 8004984:	6023      	str	r3, [r4, #0]
 8004986:	bd38      	pop	{r3, r4, r5, pc}
 8004988:	20000968 	.word	0x20000968

0800498c <_read_r>:
 800498c:	b538      	push	{r3, r4, r5, lr}
 800498e:	4604      	mov	r4, r0
 8004990:	4608      	mov	r0, r1
 8004992:	4611      	mov	r1, r2
 8004994:	2200      	movs	r2, #0
 8004996:	4d05      	ldr	r5, [pc, #20]	; (80049ac <_read_r+0x20>)
 8004998:	602a      	str	r2, [r5, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	f7fd fa97 	bl	8001ece <_read>
 80049a0:	1c43      	adds	r3, r0, #1
 80049a2:	d102      	bne.n	80049aa <_read_r+0x1e>
 80049a4:	682b      	ldr	r3, [r5, #0]
 80049a6:	b103      	cbz	r3, 80049aa <_read_r+0x1e>
 80049a8:	6023      	str	r3, [r4, #0]
 80049aa:	bd38      	pop	{r3, r4, r5, pc}
 80049ac:	20000968 	.word	0x20000968

080049b0 <_write_r>:
 80049b0:	b538      	push	{r3, r4, r5, lr}
 80049b2:	4604      	mov	r4, r0
 80049b4:	4608      	mov	r0, r1
 80049b6:	4611      	mov	r1, r2
 80049b8:	2200      	movs	r2, #0
 80049ba:	4d05      	ldr	r5, [pc, #20]	; (80049d0 <_write_r+0x20>)
 80049bc:	602a      	str	r2, [r5, #0]
 80049be:	461a      	mov	r2, r3
 80049c0:	f7fd faa2 	bl	8001f08 <_write>
 80049c4:	1c43      	adds	r3, r0, #1
 80049c6:	d102      	bne.n	80049ce <_write_r+0x1e>
 80049c8:	682b      	ldr	r3, [r5, #0]
 80049ca:	b103      	cbz	r3, 80049ce <_write_r+0x1e>
 80049cc:	6023      	str	r3, [r4, #0]
 80049ce:	bd38      	pop	{r3, r4, r5, pc}
 80049d0:	20000968 	.word	0x20000968

080049d4 <__errno>:
 80049d4:	4b01      	ldr	r3, [pc, #4]	; (80049dc <__errno+0x8>)
 80049d6:	6818      	ldr	r0, [r3, #0]
 80049d8:	4770      	bx	lr
 80049da:	bf00      	nop
 80049dc:	2000006c 	.word	0x2000006c

080049e0 <__libc_init_array>:
 80049e0:	b570      	push	{r4, r5, r6, lr}
 80049e2:	2600      	movs	r6, #0
 80049e4:	4d0c      	ldr	r5, [pc, #48]	; (8004a18 <__libc_init_array+0x38>)
 80049e6:	4c0d      	ldr	r4, [pc, #52]	; (8004a1c <__libc_init_array+0x3c>)
 80049e8:	1b64      	subs	r4, r4, r5
 80049ea:	10a4      	asrs	r4, r4, #2
 80049ec:	42a6      	cmp	r6, r4
 80049ee:	d109      	bne.n	8004a04 <__libc_init_array+0x24>
 80049f0:	f002 ff90 	bl	8007914 <_init>
 80049f4:	2600      	movs	r6, #0
 80049f6:	4d0a      	ldr	r5, [pc, #40]	; (8004a20 <__libc_init_array+0x40>)
 80049f8:	4c0a      	ldr	r4, [pc, #40]	; (8004a24 <__libc_init_array+0x44>)
 80049fa:	1b64      	subs	r4, r4, r5
 80049fc:	10a4      	asrs	r4, r4, #2
 80049fe:	42a6      	cmp	r6, r4
 8004a00:	d105      	bne.n	8004a0e <__libc_init_array+0x2e>
 8004a02:	bd70      	pop	{r4, r5, r6, pc}
 8004a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a08:	4798      	blx	r3
 8004a0a:	3601      	adds	r6, #1
 8004a0c:	e7ee      	b.n	80049ec <__libc_init_array+0xc>
 8004a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a12:	4798      	blx	r3
 8004a14:	3601      	adds	r6, #1
 8004a16:	e7f2      	b.n	80049fe <__libc_init_array+0x1e>
 8004a18:	08007d90 	.word	0x08007d90
 8004a1c:	08007d90 	.word	0x08007d90
 8004a20:	08007d90 	.word	0x08007d90
 8004a24:	08007d94 	.word	0x08007d94

08004a28 <__retarget_lock_acquire_recursive>:
 8004a28:	4770      	bx	lr

08004a2a <__retarget_lock_release_recursive>:
 8004a2a:	4770      	bx	lr

08004a2c <memchr>:
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	b510      	push	{r4, lr}
 8004a30:	b2c9      	uxtb	r1, r1
 8004a32:	4402      	add	r2, r0
 8004a34:	4293      	cmp	r3, r2
 8004a36:	4618      	mov	r0, r3
 8004a38:	d101      	bne.n	8004a3e <memchr+0x12>
 8004a3a:	2000      	movs	r0, #0
 8004a3c:	e003      	b.n	8004a46 <memchr+0x1a>
 8004a3e:	7804      	ldrb	r4, [r0, #0]
 8004a40:	3301      	adds	r3, #1
 8004a42:	428c      	cmp	r4, r1
 8004a44:	d1f6      	bne.n	8004a34 <memchr+0x8>
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <quorem>:
 8004a48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	6903      	ldr	r3, [r0, #16]
 8004a4e:	690c      	ldr	r4, [r1, #16]
 8004a50:	4607      	mov	r7, r0
 8004a52:	42a3      	cmp	r3, r4
 8004a54:	db7f      	blt.n	8004b56 <quorem+0x10e>
 8004a56:	3c01      	subs	r4, #1
 8004a58:	f100 0514 	add.w	r5, r0, #20
 8004a5c:	f101 0814 	add.w	r8, r1, #20
 8004a60:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004a64:	9301      	str	r3, [sp, #4]
 8004a66:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004a6a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004a6e:	3301      	adds	r3, #1
 8004a70:	429a      	cmp	r2, r3
 8004a72:	fbb2 f6f3 	udiv	r6, r2, r3
 8004a76:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004a7a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004a7e:	d331      	bcc.n	8004ae4 <quorem+0x9c>
 8004a80:	f04f 0e00 	mov.w	lr, #0
 8004a84:	4640      	mov	r0, r8
 8004a86:	46ac      	mov	ip, r5
 8004a88:	46f2      	mov	sl, lr
 8004a8a:	f850 2b04 	ldr.w	r2, [r0], #4
 8004a8e:	b293      	uxth	r3, r2
 8004a90:	fb06 e303 	mla	r3, r6, r3, lr
 8004a94:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004a98:	0c1a      	lsrs	r2, r3, #16
 8004a9a:	b29b      	uxth	r3, r3
 8004a9c:	fb06 220e 	mla	r2, r6, lr, r2
 8004aa0:	ebaa 0303 	sub.w	r3, sl, r3
 8004aa4:	f8dc a000 	ldr.w	sl, [ip]
 8004aa8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004aac:	fa1f fa8a 	uxth.w	sl, sl
 8004ab0:	4453      	add	r3, sl
 8004ab2:	f8dc a000 	ldr.w	sl, [ip]
 8004ab6:	b292      	uxth	r2, r2
 8004ab8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004abc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004ac6:	4581      	cmp	r9, r0
 8004ac8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004acc:	f84c 3b04 	str.w	r3, [ip], #4
 8004ad0:	d2db      	bcs.n	8004a8a <quorem+0x42>
 8004ad2:	f855 300b 	ldr.w	r3, [r5, fp]
 8004ad6:	b92b      	cbnz	r3, 8004ae4 <quorem+0x9c>
 8004ad8:	9b01      	ldr	r3, [sp, #4]
 8004ada:	3b04      	subs	r3, #4
 8004adc:	429d      	cmp	r5, r3
 8004ade:	461a      	mov	r2, r3
 8004ae0:	d32d      	bcc.n	8004b3e <quorem+0xf6>
 8004ae2:	613c      	str	r4, [r7, #16]
 8004ae4:	4638      	mov	r0, r7
 8004ae6:	f001 f995 	bl	8005e14 <__mcmp>
 8004aea:	2800      	cmp	r0, #0
 8004aec:	db23      	blt.n	8004b36 <quorem+0xee>
 8004aee:	4629      	mov	r1, r5
 8004af0:	2000      	movs	r0, #0
 8004af2:	3601      	adds	r6, #1
 8004af4:	f858 2b04 	ldr.w	r2, [r8], #4
 8004af8:	f8d1 c000 	ldr.w	ip, [r1]
 8004afc:	b293      	uxth	r3, r2
 8004afe:	1ac3      	subs	r3, r0, r3
 8004b00:	0c12      	lsrs	r2, r2, #16
 8004b02:	fa1f f08c 	uxth.w	r0, ip
 8004b06:	4403      	add	r3, r0
 8004b08:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004b0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004b10:	b29b      	uxth	r3, r3
 8004b12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004b16:	45c1      	cmp	r9, r8
 8004b18:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004b1c:	f841 3b04 	str.w	r3, [r1], #4
 8004b20:	d2e8      	bcs.n	8004af4 <quorem+0xac>
 8004b22:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004b26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004b2a:	b922      	cbnz	r2, 8004b36 <quorem+0xee>
 8004b2c:	3b04      	subs	r3, #4
 8004b2e:	429d      	cmp	r5, r3
 8004b30:	461a      	mov	r2, r3
 8004b32:	d30a      	bcc.n	8004b4a <quorem+0x102>
 8004b34:	613c      	str	r4, [r7, #16]
 8004b36:	4630      	mov	r0, r6
 8004b38:	b003      	add	sp, #12
 8004b3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b3e:	6812      	ldr	r2, [r2, #0]
 8004b40:	3b04      	subs	r3, #4
 8004b42:	2a00      	cmp	r2, #0
 8004b44:	d1cd      	bne.n	8004ae2 <quorem+0x9a>
 8004b46:	3c01      	subs	r4, #1
 8004b48:	e7c8      	b.n	8004adc <quorem+0x94>
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	2a00      	cmp	r2, #0
 8004b50:	d1f0      	bne.n	8004b34 <quorem+0xec>
 8004b52:	3c01      	subs	r4, #1
 8004b54:	e7eb      	b.n	8004b2e <quorem+0xe6>
 8004b56:	2000      	movs	r0, #0
 8004b58:	e7ee      	b.n	8004b38 <quorem+0xf0>
 8004b5a:	0000      	movs	r0, r0
 8004b5c:	0000      	movs	r0, r0
	...

08004b60 <_dtoa_r>:
 8004b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b64:	4616      	mov	r6, r2
 8004b66:	461f      	mov	r7, r3
 8004b68:	69c4      	ldr	r4, [r0, #28]
 8004b6a:	b099      	sub	sp, #100	; 0x64
 8004b6c:	4605      	mov	r5, r0
 8004b6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b72:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004b76:	b974      	cbnz	r4, 8004b96 <_dtoa_r+0x36>
 8004b78:	2010      	movs	r0, #16
 8004b7a:	f000 fe1d 	bl	80057b8 <malloc>
 8004b7e:	4602      	mov	r2, r0
 8004b80:	61e8      	str	r0, [r5, #28]
 8004b82:	b920      	cbnz	r0, 8004b8e <_dtoa_r+0x2e>
 8004b84:	21ef      	movs	r1, #239	; 0xef
 8004b86:	4bac      	ldr	r3, [pc, #688]	; (8004e38 <_dtoa_r+0x2d8>)
 8004b88:	48ac      	ldr	r0, [pc, #688]	; (8004e3c <_dtoa_r+0x2dc>)
 8004b8a:	f001 fc7b 	bl	8006484 <__assert_func>
 8004b8e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004b92:	6004      	str	r4, [r0, #0]
 8004b94:	60c4      	str	r4, [r0, #12]
 8004b96:	69eb      	ldr	r3, [r5, #28]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	b151      	cbz	r1, 8004bb2 <_dtoa_r+0x52>
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	4093      	lsls	r3, r2
 8004ba2:	604a      	str	r2, [r1, #4]
 8004ba4:	608b      	str	r3, [r1, #8]
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	f000 fefa 	bl	80059a0 <_Bfree>
 8004bac:	2200      	movs	r2, #0
 8004bae:	69eb      	ldr	r3, [r5, #28]
 8004bb0:	601a      	str	r2, [r3, #0]
 8004bb2:	1e3b      	subs	r3, r7, #0
 8004bb4:	bfaf      	iteee	ge
 8004bb6:	2300      	movge	r3, #0
 8004bb8:	2201      	movlt	r2, #1
 8004bba:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004bbe:	9305      	strlt	r3, [sp, #20]
 8004bc0:	bfa8      	it	ge
 8004bc2:	f8c8 3000 	strge.w	r3, [r8]
 8004bc6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004bca:	4b9d      	ldr	r3, [pc, #628]	; (8004e40 <_dtoa_r+0x2e0>)
 8004bcc:	bfb8      	it	lt
 8004bce:	f8c8 2000 	strlt.w	r2, [r8]
 8004bd2:	ea33 0309 	bics.w	r3, r3, r9
 8004bd6:	d119      	bne.n	8004c0c <_dtoa_r+0xac>
 8004bd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8004bdc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004be4:	4333      	orrs	r3, r6
 8004be6:	f000 8589 	beq.w	80056fc <_dtoa_r+0xb9c>
 8004bea:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004bec:	b953      	cbnz	r3, 8004c04 <_dtoa_r+0xa4>
 8004bee:	4b95      	ldr	r3, [pc, #596]	; (8004e44 <_dtoa_r+0x2e4>)
 8004bf0:	e023      	b.n	8004c3a <_dtoa_r+0xda>
 8004bf2:	4b95      	ldr	r3, [pc, #596]	; (8004e48 <_dtoa_r+0x2e8>)
 8004bf4:	9303      	str	r3, [sp, #12]
 8004bf6:	3308      	adds	r3, #8
 8004bf8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004bfa:	6013      	str	r3, [r2, #0]
 8004bfc:	9803      	ldr	r0, [sp, #12]
 8004bfe:	b019      	add	sp, #100	; 0x64
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	4b8f      	ldr	r3, [pc, #572]	; (8004e44 <_dtoa_r+0x2e4>)
 8004c06:	9303      	str	r3, [sp, #12]
 8004c08:	3303      	adds	r3, #3
 8004c0a:	e7f5      	b.n	8004bf8 <_dtoa_r+0x98>
 8004c0c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004c10:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004c14:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c18:	2200      	movs	r2, #0
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	f7fb fec4 	bl	80009a8 <__aeabi_dcmpeq>
 8004c20:	4680      	mov	r8, r0
 8004c22:	b160      	cbz	r0, 8004c3e <_dtoa_r+0xde>
 8004c24:	2301      	movs	r3, #1
 8004c26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004c28:	6013      	str	r3, [r2, #0]
 8004c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	f000 8562 	beq.w	80056f6 <_dtoa_r+0xb96>
 8004c32:	4b86      	ldr	r3, [pc, #536]	; (8004e4c <_dtoa_r+0x2ec>)
 8004c34:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	9303      	str	r3, [sp, #12]
 8004c3c:	e7de      	b.n	8004bfc <_dtoa_r+0x9c>
 8004c3e:	ab16      	add	r3, sp, #88	; 0x58
 8004c40:	9301      	str	r3, [sp, #4]
 8004c42:	ab17      	add	r3, sp, #92	; 0x5c
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	4628      	mov	r0, r5
 8004c48:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004c4c:	f001 f98a 	bl	8005f64 <__d2b>
 8004c50:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004c54:	4682      	mov	sl, r0
 8004c56:	2c00      	cmp	r4, #0
 8004c58:	d07e      	beq.n	8004d58 <_dtoa_r+0x1f8>
 8004c5a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004c5e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004c60:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c68:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8004c6c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8004c70:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004c74:	4619      	mov	r1, r3
 8004c76:	2200      	movs	r2, #0
 8004c78:	4b75      	ldr	r3, [pc, #468]	; (8004e50 <_dtoa_r+0x2f0>)
 8004c7a:	f7fb fa75 	bl	8000168 <__aeabi_dsub>
 8004c7e:	a368      	add	r3, pc, #416	; (adr r3, 8004e20 <_dtoa_r+0x2c0>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fc28 	bl	80004d8 <__aeabi_dmul>
 8004c88:	a367      	add	r3, pc, #412	; (adr r3, 8004e28 <_dtoa_r+0x2c8>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	f7fb fa6d 	bl	800016c <__adddf3>
 8004c92:	4606      	mov	r6, r0
 8004c94:	4620      	mov	r0, r4
 8004c96:	460f      	mov	r7, r1
 8004c98:	f7fb fbb4 	bl	8000404 <__aeabi_i2d>
 8004c9c:	a364      	add	r3, pc, #400	; (adr r3, 8004e30 <_dtoa_r+0x2d0>)
 8004c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca2:	f7fb fc19 	bl	80004d8 <__aeabi_dmul>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4630      	mov	r0, r6
 8004cac:	4639      	mov	r1, r7
 8004cae:	f7fb fa5d 	bl	800016c <__adddf3>
 8004cb2:	4606      	mov	r6, r0
 8004cb4:	460f      	mov	r7, r1
 8004cb6:	f7fb febf 	bl	8000a38 <__aeabi_d2iz>
 8004cba:	2200      	movs	r2, #0
 8004cbc:	4683      	mov	fp, r0
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	4630      	mov	r0, r6
 8004cc2:	4639      	mov	r1, r7
 8004cc4:	f7fb fe7a 	bl	80009bc <__aeabi_dcmplt>
 8004cc8:	b148      	cbz	r0, 8004cde <_dtoa_r+0x17e>
 8004cca:	4658      	mov	r0, fp
 8004ccc:	f7fb fb9a 	bl	8000404 <__aeabi_i2d>
 8004cd0:	4632      	mov	r2, r6
 8004cd2:	463b      	mov	r3, r7
 8004cd4:	f7fb fe68 	bl	80009a8 <__aeabi_dcmpeq>
 8004cd8:	b908      	cbnz	r0, 8004cde <_dtoa_r+0x17e>
 8004cda:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004cde:	f1bb 0f16 	cmp.w	fp, #22
 8004ce2:	d857      	bhi.n	8004d94 <_dtoa_r+0x234>
 8004ce4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004ce8:	4b5a      	ldr	r3, [pc, #360]	; (8004e54 <_dtoa_r+0x2f4>)
 8004cea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fe63 	bl	80009bc <__aeabi_dcmplt>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	d04e      	beq.n	8004d98 <_dtoa_r+0x238>
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8004d00:	930f      	str	r3, [sp, #60]	; 0x3c
 8004d02:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004d04:	1b1b      	subs	r3, r3, r4
 8004d06:	1e5a      	subs	r2, r3, #1
 8004d08:	bf46      	itte	mi
 8004d0a:	f1c3 0901 	rsbmi	r9, r3, #1
 8004d0e:	2300      	movmi	r3, #0
 8004d10:	f04f 0900 	movpl.w	r9, #0
 8004d14:	9209      	str	r2, [sp, #36]	; 0x24
 8004d16:	bf48      	it	mi
 8004d18:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004d1a:	f1bb 0f00 	cmp.w	fp, #0
 8004d1e:	db3d      	blt.n	8004d9c <_dtoa_r+0x23c>
 8004d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004d22:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8004d26:	445b      	add	r3, fp
 8004d28:	9309      	str	r3, [sp, #36]	; 0x24
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	930a      	str	r3, [sp, #40]	; 0x28
 8004d2e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d30:	2b09      	cmp	r3, #9
 8004d32:	d867      	bhi.n	8004e04 <_dtoa_r+0x2a4>
 8004d34:	2b05      	cmp	r3, #5
 8004d36:	bfc4      	itt	gt
 8004d38:	3b04      	subgt	r3, #4
 8004d3a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004d3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004d3e:	bfc8      	it	gt
 8004d40:	2400      	movgt	r4, #0
 8004d42:	f1a3 0302 	sub.w	r3, r3, #2
 8004d46:	bfd8      	it	le
 8004d48:	2401      	movle	r4, #1
 8004d4a:	2b03      	cmp	r3, #3
 8004d4c:	f200 8086 	bhi.w	8004e5c <_dtoa_r+0x2fc>
 8004d50:	e8df f003 	tbb	[pc, r3]
 8004d54:	5637392c 	.word	0x5637392c
 8004d58:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004d5c:	441c      	add	r4, r3
 8004d5e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004d62:	2b20      	cmp	r3, #32
 8004d64:	bfc1      	itttt	gt
 8004d66:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004d6a:	fa09 f903 	lslgt.w	r9, r9, r3
 8004d6e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8004d72:	fa26 f303 	lsrgt.w	r3, r6, r3
 8004d76:	bfd6      	itet	le
 8004d78:	f1c3 0320 	rsble	r3, r3, #32
 8004d7c:	ea49 0003 	orrgt.w	r0, r9, r3
 8004d80:	fa06 f003 	lslle.w	r0, r6, r3
 8004d84:	f7fb fb2e 	bl	80003e4 <__aeabi_ui2d>
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8004d8e:	3c01      	subs	r4, #1
 8004d90:	9213      	str	r2, [sp, #76]	; 0x4c
 8004d92:	e76f      	b.n	8004c74 <_dtoa_r+0x114>
 8004d94:	2301      	movs	r3, #1
 8004d96:	e7b3      	b.n	8004d00 <_dtoa_r+0x1a0>
 8004d98:	900f      	str	r0, [sp, #60]	; 0x3c
 8004d9a:	e7b2      	b.n	8004d02 <_dtoa_r+0x1a2>
 8004d9c:	f1cb 0300 	rsb	r3, fp, #0
 8004da0:	930a      	str	r3, [sp, #40]	; 0x28
 8004da2:	2300      	movs	r3, #0
 8004da4:	eba9 090b 	sub.w	r9, r9, fp
 8004da8:	930e      	str	r3, [sp, #56]	; 0x38
 8004daa:	e7c0      	b.n	8004d2e <_dtoa_r+0x1ce>
 8004dac:	2300      	movs	r3, #0
 8004dae:	930b      	str	r3, [sp, #44]	; 0x2c
 8004db0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	dc55      	bgt.n	8004e62 <_dtoa_r+0x302>
 8004db6:	2301      	movs	r3, #1
 8004db8:	461a      	mov	r2, r3
 8004dba:	9306      	str	r3, [sp, #24]
 8004dbc:	9308      	str	r3, [sp, #32]
 8004dbe:	9223      	str	r2, [sp, #140]	; 0x8c
 8004dc0:	e00b      	b.n	8004dda <_dtoa_r+0x27a>
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e7f3      	b.n	8004dae <_dtoa_r+0x24e>
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8004dca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004dcc:	445b      	add	r3, fp
 8004dce:	9306      	str	r3, [sp, #24]
 8004dd0:	3301      	adds	r3, #1
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	9308      	str	r3, [sp, #32]
 8004dd6:	bfb8      	it	lt
 8004dd8:	2301      	movlt	r3, #1
 8004dda:	2100      	movs	r1, #0
 8004ddc:	2204      	movs	r2, #4
 8004dde:	69e8      	ldr	r0, [r5, #28]
 8004de0:	f102 0614 	add.w	r6, r2, #20
 8004de4:	429e      	cmp	r6, r3
 8004de6:	d940      	bls.n	8004e6a <_dtoa_r+0x30a>
 8004de8:	6041      	str	r1, [r0, #4]
 8004dea:	4628      	mov	r0, r5
 8004dec:	f000 fd98 	bl	8005920 <_Balloc>
 8004df0:	9003      	str	r0, [sp, #12]
 8004df2:	2800      	cmp	r0, #0
 8004df4:	d13c      	bne.n	8004e70 <_dtoa_r+0x310>
 8004df6:	4602      	mov	r2, r0
 8004df8:	f240 11af 	movw	r1, #431	; 0x1af
 8004dfc:	4b16      	ldr	r3, [pc, #88]	; (8004e58 <_dtoa_r+0x2f8>)
 8004dfe:	e6c3      	b.n	8004b88 <_dtoa_r+0x28>
 8004e00:	2301      	movs	r3, #1
 8004e02:	e7e1      	b.n	8004dc8 <_dtoa_r+0x268>
 8004e04:	2401      	movs	r4, #1
 8004e06:	2300      	movs	r3, #0
 8004e08:	940b      	str	r4, [sp, #44]	; 0x2c
 8004e0a:	9322      	str	r3, [sp, #136]	; 0x88
 8004e0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e10:	2200      	movs	r2, #0
 8004e12:	9306      	str	r3, [sp, #24]
 8004e14:	9308      	str	r3, [sp, #32]
 8004e16:	2312      	movs	r3, #18
 8004e18:	e7d1      	b.n	8004dbe <_dtoa_r+0x25e>
 8004e1a:	bf00      	nop
 8004e1c:	f3af 8000 	nop.w
 8004e20:	636f4361 	.word	0x636f4361
 8004e24:	3fd287a7 	.word	0x3fd287a7
 8004e28:	8b60c8b3 	.word	0x8b60c8b3
 8004e2c:	3fc68a28 	.word	0x3fc68a28
 8004e30:	509f79fb 	.word	0x509f79fb
 8004e34:	3fd34413 	.word	0x3fd34413
 8004e38:	08007b2a 	.word	0x08007b2a
 8004e3c:	08007b41 	.word	0x08007b41
 8004e40:	7ff00000 	.word	0x7ff00000
 8004e44:	08007b26 	.word	0x08007b26
 8004e48:	08007b1d 	.word	0x08007b1d
 8004e4c:	08007afa 	.word	0x08007afa
 8004e50:	3ff80000 	.word	0x3ff80000
 8004e54:	08007c30 	.word	0x08007c30
 8004e58:	08007b99 	.word	0x08007b99
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004e60:	e7d4      	b.n	8004e0c <_dtoa_r+0x2ac>
 8004e62:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004e64:	9306      	str	r3, [sp, #24]
 8004e66:	9308      	str	r3, [sp, #32]
 8004e68:	e7b7      	b.n	8004dda <_dtoa_r+0x27a>
 8004e6a:	3101      	adds	r1, #1
 8004e6c:	0052      	lsls	r2, r2, #1
 8004e6e:	e7b7      	b.n	8004de0 <_dtoa_r+0x280>
 8004e70:	69eb      	ldr	r3, [r5, #28]
 8004e72:	9a03      	ldr	r2, [sp, #12]
 8004e74:	601a      	str	r2, [r3, #0]
 8004e76:	9b08      	ldr	r3, [sp, #32]
 8004e78:	2b0e      	cmp	r3, #14
 8004e7a:	f200 80a8 	bhi.w	8004fce <_dtoa_r+0x46e>
 8004e7e:	2c00      	cmp	r4, #0
 8004e80:	f000 80a5 	beq.w	8004fce <_dtoa_r+0x46e>
 8004e84:	f1bb 0f00 	cmp.w	fp, #0
 8004e88:	dd34      	ble.n	8004ef4 <_dtoa_r+0x394>
 8004e8a:	4b9a      	ldr	r3, [pc, #616]	; (80050f4 <_dtoa_r+0x594>)
 8004e8c:	f00b 020f 	and.w	r2, fp, #15
 8004e90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004e94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8004e98:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004e9c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004ea0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8004ea4:	d016      	beq.n	8004ed4 <_dtoa_r+0x374>
 8004ea6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004eaa:	4b93      	ldr	r3, [pc, #588]	; (80050f8 <_dtoa_r+0x598>)
 8004eac:	2703      	movs	r7, #3
 8004eae:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004eb2:	f7fb fc3b 	bl	800072c <__aeabi_ddiv>
 8004eb6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004eba:	f004 040f 	and.w	r4, r4, #15
 8004ebe:	4e8e      	ldr	r6, [pc, #568]	; (80050f8 <_dtoa_r+0x598>)
 8004ec0:	b954      	cbnz	r4, 8004ed8 <_dtoa_r+0x378>
 8004ec2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8004ec6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004eca:	f7fb fc2f 	bl	800072c <__aeabi_ddiv>
 8004ece:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ed2:	e029      	b.n	8004f28 <_dtoa_r+0x3c8>
 8004ed4:	2702      	movs	r7, #2
 8004ed6:	e7f2      	b.n	8004ebe <_dtoa_r+0x35e>
 8004ed8:	07e1      	lsls	r1, r4, #31
 8004eda:	d508      	bpl.n	8004eee <_dtoa_r+0x38e>
 8004edc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ee0:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004ee4:	f7fb faf8 	bl	80004d8 <__aeabi_dmul>
 8004ee8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004eec:	3701      	adds	r7, #1
 8004eee:	1064      	asrs	r4, r4, #1
 8004ef0:	3608      	adds	r6, #8
 8004ef2:	e7e5      	b.n	8004ec0 <_dtoa_r+0x360>
 8004ef4:	f000 80a5 	beq.w	8005042 <_dtoa_r+0x4e2>
 8004ef8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004efc:	f1cb 0400 	rsb	r4, fp, #0
 8004f00:	4b7c      	ldr	r3, [pc, #496]	; (80050f4 <_dtoa_r+0x594>)
 8004f02:	f004 020f 	and.w	r2, r4, #15
 8004f06:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0e:	f7fb fae3 	bl	80004d8 <__aeabi_dmul>
 8004f12:	2702      	movs	r7, #2
 8004f14:	2300      	movs	r3, #0
 8004f16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f1a:	4e77      	ldr	r6, [pc, #476]	; (80050f8 <_dtoa_r+0x598>)
 8004f1c:	1124      	asrs	r4, r4, #4
 8004f1e:	2c00      	cmp	r4, #0
 8004f20:	f040 8084 	bne.w	800502c <_dtoa_r+0x4cc>
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d1d2      	bne.n	8004ece <_dtoa_r+0x36e>
 8004f28:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004f2c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8004f30:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 8087 	beq.w	8005046 <_dtoa_r+0x4e6>
 8004f38:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	4b6f      	ldr	r3, [pc, #444]	; (80050fc <_dtoa_r+0x59c>)
 8004f40:	f7fb fd3c 	bl	80009bc <__aeabi_dcmplt>
 8004f44:	2800      	cmp	r0, #0
 8004f46:	d07e      	beq.n	8005046 <_dtoa_r+0x4e6>
 8004f48:	9b08      	ldr	r3, [sp, #32]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d07b      	beq.n	8005046 <_dtoa_r+0x4e6>
 8004f4e:	9b06      	ldr	r3, [sp, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	dd38      	ble.n	8004fc6 <_dtoa_r+0x466>
 8004f54:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004f58:	2200      	movs	r2, #0
 8004f5a:	4b69      	ldr	r3, [pc, #420]	; (8005100 <_dtoa_r+0x5a0>)
 8004f5c:	f7fb fabc 	bl	80004d8 <__aeabi_dmul>
 8004f60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004f64:	9c06      	ldr	r4, [sp, #24]
 8004f66:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8004f6a:	3701      	adds	r7, #1
 8004f6c:	4638      	mov	r0, r7
 8004f6e:	f7fb fa49 	bl	8000404 <__aeabi_i2d>
 8004f72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f76:	f7fb faaf 	bl	80004d8 <__aeabi_dmul>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	4b61      	ldr	r3, [pc, #388]	; (8005104 <_dtoa_r+0x5a4>)
 8004f7e:	f7fb f8f5 	bl	800016c <__adddf3>
 8004f82:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8004f86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004f8a:	9611      	str	r6, [sp, #68]	; 0x44
 8004f8c:	2c00      	cmp	r4, #0
 8004f8e:	d15d      	bne.n	800504c <_dtoa_r+0x4ec>
 8004f90:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004f94:	2200      	movs	r2, #0
 8004f96:	4b5c      	ldr	r3, [pc, #368]	; (8005108 <_dtoa_r+0x5a8>)
 8004f98:	f7fb f8e6 	bl	8000168 <__aeabi_dsub>
 8004f9c:	4602      	mov	r2, r0
 8004f9e:	460b      	mov	r3, r1
 8004fa0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004fa4:	4633      	mov	r3, r6
 8004fa6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fa8:	f7fb fd26 	bl	80009f8 <__aeabi_dcmpgt>
 8004fac:	2800      	cmp	r0, #0
 8004fae:	f040 8295 	bne.w	80054dc <_dtoa_r+0x97c>
 8004fb2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004fb6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8004fb8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8004fbc:	f7fb fcfe 	bl	80009bc <__aeabi_dcmplt>
 8004fc0:	2800      	cmp	r0, #0
 8004fc2:	f040 8289 	bne.w	80054d8 <_dtoa_r+0x978>
 8004fc6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8004fca:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004fce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	f2c0 8151 	blt.w	8005278 <_dtoa_r+0x718>
 8004fd6:	f1bb 0f0e 	cmp.w	fp, #14
 8004fda:	f300 814d 	bgt.w	8005278 <_dtoa_r+0x718>
 8004fde:	4b45      	ldr	r3, [pc, #276]	; (80050f4 <_dtoa_r+0x594>)
 8004fe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004fe8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8004fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f280 80da 	bge.w	80051a8 <_dtoa_r+0x648>
 8004ff4:	9b08      	ldr	r3, [sp, #32]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f300 80d6 	bgt.w	80051a8 <_dtoa_r+0x648>
 8004ffc:	f040 826b 	bne.w	80054d6 <_dtoa_r+0x976>
 8005000:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005004:	2200      	movs	r2, #0
 8005006:	4b40      	ldr	r3, [pc, #256]	; (8005108 <_dtoa_r+0x5a8>)
 8005008:	f7fb fa66 	bl	80004d8 <__aeabi_dmul>
 800500c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005010:	f7fb fce8 	bl	80009e4 <__aeabi_dcmpge>
 8005014:	9c08      	ldr	r4, [sp, #32]
 8005016:	4626      	mov	r6, r4
 8005018:	2800      	cmp	r0, #0
 800501a:	f040 8241 	bne.w	80054a0 <_dtoa_r+0x940>
 800501e:	2331      	movs	r3, #49	; 0x31
 8005020:	9f03      	ldr	r7, [sp, #12]
 8005022:	f10b 0b01 	add.w	fp, fp, #1
 8005026:	f807 3b01 	strb.w	r3, [r7], #1
 800502a:	e23d      	b.n	80054a8 <_dtoa_r+0x948>
 800502c:	07e2      	lsls	r2, r4, #31
 800502e:	d505      	bpl.n	800503c <_dtoa_r+0x4dc>
 8005030:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005034:	f7fb fa50 	bl	80004d8 <__aeabi_dmul>
 8005038:	2301      	movs	r3, #1
 800503a:	3701      	adds	r7, #1
 800503c:	1064      	asrs	r4, r4, #1
 800503e:	3608      	adds	r6, #8
 8005040:	e76d      	b.n	8004f1e <_dtoa_r+0x3be>
 8005042:	2702      	movs	r7, #2
 8005044:	e770      	b.n	8004f28 <_dtoa_r+0x3c8>
 8005046:	46d8      	mov	r8, fp
 8005048:	9c08      	ldr	r4, [sp, #32]
 800504a:	e78f      	b.n	8004f6c <_dtoa_r+0x40c>
 800504c:	9903      	ldr	r1, [sp, #12]
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <_dtoa_r+0x594>)
 8005050:	4421      	add	r1, r4
 8005052:	9112      	str	r1, [sp, #72]	; 0x48
 8005054:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005056:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800505a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800505e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005062:	2900      	cmp	r1, #0
 8005064:	d054      	beq.n	8005110 <_dtoa_r+0x5b0>
 8005066:	2000      	movs	r0, #0
 8005068:	4928      	ldr	r1, [pc, #160]	; (800510c <_dtoa_r+0x5ac>)
 800506a:	f7fb fb5f 	bl	800072c <__aeabi_ddiv>
 800506e:	463b      	mov	r3, r7
 8005070:	4632      	mov	r2, r6
 8005072:	f7fb f879 	bl	8000168 <__aeabi_dsub>
 8005076:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800507a:	9f03      	ldr	r7, [sp, #12]
 800507c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005080:	f7fb fcda 	bl	8000a38 <__aeabi_d2iz>
 8005084:	4604      	mov	r4, r0
 8005086:	f7fb f9bd 	bl	8000404 <__aeabi_i2d>
 800508a:	4602      	mov	r2, r0
 800508c:	460b      	mov	r3, r1
 800508e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005092:	f7fb f869 	bl	8000168 <__aeabi_dsub>
 8005096:	4602      	mov	r2, r0
 8005098:	460b      	mov	r3, r1
 800509a:	3430      	adds	r4, #48	; 0x30
 800509c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050a0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050a4:	f807 4b01 	strb.w	r4, [r7], #1
 80050a8:	f7fb fc88 	bl	80009bc <__aeabi_dcmplt>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	d173      	bne.n	8005198 <_dtoa_r+0x638>
 80050b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050b4:	2000      	movs	r0, #0
 80050b6:	4911      	ldr	r1, [pc, #68]	; (80050fc <_dtoa_r+0x59c>)
 80050b8:	f7fb f856 	bl	8000168 <__aeabi_dsub>
 80050bc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80050c0:	f7fb fc7c 	bl	80009bc <__aeabi_dcmplt>
 80050c4:	2800      	cmp	r0, #0
 80050c6:	f040 80b6 	bne.w	8005236 <_dtoa_r+0x6d6>
 80050ca:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80050cc:	429f      	cmp	r7, r3
 80050ce:	f43f af7a 	beq.w	8004fc6 <_dtoa_r+0x466>
 80050d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80050d6:	2200      	movs	r2, #0
 80050d8:	4b09      	ldr	r3, [pc, #36]	; (8005100 <_dtoa_r+0x5a0>)
 80050da:	f7fb f9fd 	bl	80004d8 <__aeabi_dmul>
 80050de:	2200      	movs	r2, #0
 80050e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80050e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80050e8:	4b05      	ldr	r3, [pc, #20]	; (8005100 <_dtoa_r+0x5a0>)
 80050ea:	f7fb f9f5 	bl	80004d8 <__aeabi_dmul>
 80050ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050f2:	e7c3      	b.n	800507c <_dtoa_r+0x51c>
 80050f4:	08007c30 	.word	0x08007c30
 80050f8:	08007c08 	.word	0x08007c08
 80050fc:	3ff00000 	.word	0x3ff00000
 8005100:	40240000 	.word	0x40240000
 8005104:	401c0000 	.word	0x401c0000
 8005108:	40140000 	.word	0x40140000
 800510c:	3fe00000 	.word	0x3fe00000
 8005110:	4630      	mov	r0, r6
 8005112:	4639      	mov	r1, r7
 8005114:	f7fb f9e0 	bl	80004d8 <__aeabi_dmul>
 8005118:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800511a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800511e:	9c03      	ldr	r4, [sp, #12]
 8005120:	9314      	str	r3, [sp, #80]	; 0x50
 8005122:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005126:	f7fb fc87 	bl	8000a38 <__aeabi_d2iz>
 800512a:	9015      	str	r0, [sp, #84]	; 0x54
 800512c:	f7fb f96a 	bl	8000404 <__aeabi_i2d>
 8005130:	4602      	mov	r2, r0
 8005132:	460b      	mov	r3, r1
 8005134:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005138:	f7fb f816 	bl	8000168 <__aeabi_dsub>
 800513c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800513e:	4606      	mov	r6, r0
 8005140:	3330      	adds	r3, #48	; 0x30
 8005142:	f804 3b01 	strb.w	r3, [r4], #1
 8005146:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005148:	460f      	mov	r7, r1
 800514a:	429c      	cmp	r4, r3
 800514c:	f04f 0200 	mov.w	r2, #0
 8005150:	d124      	bne.n	800519c <_dtoa_r+0x63c>
 8005152:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005156:	4baf      	ldr	r3, [pc, #700]	; (8005414 <_dtoa_r+0x8b4>)
 8005158:	f7fb f808 	bl	800016c <__adddf3>
 800515c:	4602      	mov	r2, r0
 800515e:	460b      	mov	r3, r1
 8005160:	4630      	mov	r0, r6
 8005162:	4639      	mov	r1, r7
 8005164:	f7fb fc48 	bl	80009f8 <__aeabi_dcmpgt>
 8005168:	2800      	cmp	r0, #0
 800516a:	d163      	bne.n	8005234 <_dtoa_r+0x6d4>
 800516c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005170:	2000      	movs	r0, #0
 8005172:	49a8      	ldr	r1, [pc, #672]	; (8005414 <_dtoa_r+0x8b4>)
 8005174:	f7fa fff8 	bl	8000168 <__aeabi_dsub>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4630      	mov	r0, r6
 800517e:	4639      	mov	r1, r7
 8005180:	f7fb fc1c 	bl	80009bc <__aeabi_dcmplt>
 8005184:	2800      	cmp	r0, #0
 8005186:	f43f af1e 	beq.w	8004fc6 <_dtoa_r+0x466>
 800518a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800518c:	1e7b      	subs	r3, r7, #1
 800518e:	9314      	str	r3, [sp, #80]	; 0x50
 8005190:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005194:	2b30      	cmp	r3, #48	; 0x30
 8005196:	d0f8      	beq.n	800518a <_dtoa_r+0x62a>
 8005198:	46c3      	mov	fp, r8
 800519a:	e03b      	b.n	8005214 <_dtoa_r+0x6b4>
 800519c:	4b9e      	ldr	r3, [pc, #632]	; (8005418 <_dtoa_r+0x8b8>)
 800519e:	f7fb f99b 	bl	80004d8 <__aeabi_dmul>
 80051a2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051a6:	e7bc      	b.n	8005122 <_dtoa_r+0x5c2>
 80051a8:	9f03      	ldr	r7, [sp, #12]
 80051aa:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80051ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f7fb fab9 	bl	800072c <__aeabi_ddiv>
 80051ba:	f7fb fc3d 	bl	8000a38 <__aeabi_d2iz>
 80051be:	4604      	mov	r4, r0
 80051c0:	f7fb f920 	bl	8000404 <__aeabi_i2d>
 80051c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051c8:	f7fb f986 	bl	80004d8 <__aeabi_dmul>
 80051cc:	4602      	mov	r2, r0
 80051ce:	460b      	mov	r3, r1
 80051d0:	4640      	mov	r0, r8
 80051d2:	4649      	mov	r1, r9
 80051d4:	f7fa ffc8 	bl	8000168 <__aeabi_dsub>
 80051d8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80051dc:	f807 6b01 	strb.w	r6, [r7], #1
 80051e0:	9e03      	ldr	r6, [sp, #12]
 80051e2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80051e6:	1bbe      	subs	r6, r7, r6
 80051e8:	45b4      	cmp	ip, r6
 80051ea:	4602      	mov	r2, r0
 80051ec:	460b      	mov	r3, r1
 80051ee:	d136      	bne.n	800525e <_dtoa_r+0x6fe>
 80051f0:	f7fa ffbc 	bl	800016c <__adddf3>
 80051f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051f8:	4680      	mov	r8, r0
 80051fa:	4689      	mov	r9, r1
 80051fc:	f7fb fbfc 	bl	80009f8 <__aeabi_dcmpgt>
 8005200:	bb58      	cbnz	r0, 800525a <_dtoa_r+0x6fa>
 8005202:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005206:	4640      	mov	r0, r8
 8005208:	4649      	mov	r1, r9
 800520a:	f7fb fbcd 	bl	80009a8 <__aeabi_dcmpeq>
 800520e:	b108      	cbz	r0, 8005214 <_dtoa_r+0x6b4>
 8005210:	07e3      	lsls	r3, r4, #31
 8005212:	d422      	bmi.n	800525a <_dtoa_r+0x6fa>
 8005214:	4651      	mov	r1, sl
 8005216:	4628      	mov	r0, r5
 8005218:	f000 fbc2 	bl	80059a0 <_Bfree>
 800521c:	2300      	movs	r3, #0
 800521e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005220:	703b      	strb	r3, [r7, #0]
 8005222:	f10b 0301 	add.w	r3, fp, #1
 8005226:	6013      	str	r3, [r2, #0]
 8005228:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800522a:	2b00      	cmp	r3, #0
 800522c:	f43f ace6 	beq.w	8004bfc <_dtoa_r+0x9c>
 8005230:	601f      	str	r7, [r3, #0]
 8005232:	e4e3      	b.n	8004bfc <_dtoa_r+0x9c>
 8005234:	4627      	mov	r7, r4
 8005236:	463b      	mov	r3, r7
 8005238:	461f      	mov	r7, r3
 800523a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800523e:	2a39      	cmp	r2, #57	; 0x39
 8005240:	d107      	bne.n	8005252 <_dtoa_r+0x6f2>
 8005242:	9a03      	ldr	r2, [sp, #12]
 8005244:	429a      	cmp	r2, r3
 8005246:	d1f7      	bne.n	8005238 <_dtoa_r+0x6d8>
 8005248:	2230      	movs	r2, #48	; 0x30
 800524a:	9903      	ldr	r1, [sp, #12]
 800524c:	f108 0801 	add.w	r8, r8, #1
 8005250:	700a      	strb	r2, [r1, #0]
 8005252:	781a      	ldrb	r2, [r3, #0]
 8005254:	3201      	adds	r2, #1
 8005256:	701a      	strb	r2, [r3, #0]
 8005258:	e79e      	b.n	8005198 <_dtoa_r+0x638>
 800525a:	46d8      	mov	r8, fp
 800525c:	e7eb      	b.n	8005236 <_dtoa_r+0x6d6>
 800525e:	2200      	movs	r2, #0
 8005260:	4b6d      	ldr	r3, [pc, #436]	; (8005418 <_dtoa_r+0x8b8>)
 8005262:	f7fb f939 	bl	80004d8 <__aeabi_dmul>
 8005266:	2200      	movs	r2, #0
 8005268:	2300      	movs	r3, #0
 800526a:	4680      	mov	r8, r0
 800526c:	4689      	mov	r9, r1
 800526e:	f7fb fb9b 	bl	80009a8 <__aeabi_dcmpeq>
 8005272:	2800      	cmp	r0, #0
 8005274:	d09b      	beq.n	80051ae <_dtoa_r+0x64e>
 8005276:	e7cd      	b.n	8005214 <_dtoa_r+0x6b4>
 8005278:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800527a:	2a00      	cmp	r2, #0
 800527c:	f000 80c4 	beq.w	8005408 <_dtoa_r+0x8a8>
 8005280:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005282:	2a01      	cmp	r2, #1
 8005284:	f300 80a8 	bgt.w	80053d8 <_dtoa_r+0x878>
 8005288:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800528a:	2a00      	cmp	r2, #0
 800528c:	f000 80a0 	beq.w	80053d0 <_dtoa_r+0x870>
 8005290:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005294:	464f      	mov	r7, r9
 8005296:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005298:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800529a:	2101      	movs	r1, #1
 800529c:	441a      	add	r2, r3
 800529e:	4628      	mov	r0, r5
 80052a0:	4499      	add	r9, r3
 80052a2:	9209      	str	r2, [sp, #36]	; 0x24
 80052a4:	f000 fc32 	bl	8005b0c <__i2b>
 80052a8:	4606      	mov	r6, r0
 80052aa:	b15f      	cbz	r7, 80052c4 <_dtoa_r+0x764>
 80052ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	dd08      	ble.n	80052c4 <_dtoa_r+0x764>
 80052b2:	42bb      	cmp	r3, r7
 80052b4:	bfa8      	it	ge
 80052b6:	463b      	movge	r3, r7
 80052b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80052ba:	eba9 0903 	sub.w	r9, r9, r3
 80052be:	1aff      	subs	r7, r7, r3
 80052c0:	1ad3      	subs	r3, r2, r3
 80052c2:	9309      	str	r3, [sp, #36]	; 0x24
 80052c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052c6:	b1f3      	cbz	r3, 8005306 <_dtoa_r+0x7a6>
 80052c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80a0 	beq.w	8005410 <_dtoa_r+0x8b0>
 80052d0:	2c00      	cmp	r4, #0
 80052d2:	dd10      	ble.n	80052f6 <_dtoa_r+0x796>
 80052d4:	4631      	mov	r1, r6
 80052d6:	4622      	mov	r2, r4
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 fcd5 	bl	8005c88 <__pow5mult>
 80052de:	4652      	mov	r2, sl
 80052e0:	4601      	mov	r1, r0
 80052e2:	4606      	mov	r6, r0
 80052e4:	4628      	mov	r0, r5
 80052e6:	f000 fc27 	bl	8005b38 <__multiply>
 80052ea:	4680      	mov	r8, r0
 80052ec:	4651      	mov	r1, sl
 80052ee:	4628      	mov	r0, r5
 80052f0:	f000 fb56 	bl	80059a0 <_Bfree>
 80052f4:	46c2      	mov	sl, r8
 80052f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052f8:	1b1a      	subs	r2, r3, r4
 80052fa:	d004      	beq.n	8005306 <_dtoa_r+0x7a6>
 80052fc:	4651      	mov	r1, sl
 80052fe:	4628      	mov	r0, r5
 8005300:	f000 fcc2 	bl	8005c88 <__pow5mult>
 8005304:	4682      	mov	sl, r0
 8005306:	2101      	movs	r1, #1
 8005308:	4628      	mov	r0, r5
 800530a:	f000 fbff 	bl	8005b0c <__i2b>
 800530e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005310:	4604      	mov	r4, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	f340 8082 	ble.w	800541c <_dtoa_r+0x8bc>
 8005318:	461a      	mov	r2, r3
 800531a:	4601      	mov	r1, r0
 800531c:	4628      	mov	r0, r5
 800531e:	f000 fcb3 	bl	8005c88 <__pow5mult>
 8005322:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005324:	4604      	mov	r4, r0
 8005326:	2b01      	cmp	r3, #1
 8005328:	dd7b      	ble.n	8005422 <_dtoa_r+0x8c2>
 800532a:	f04f 0800 	mov.w	r8, #0
 800532e:	6923      	ldr	r3, [r4, #16]
 8005330:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005334:	6918      	ldr	r0, [r3, #16]
 8005336:	f000 fb9b 	bl	8005a70 <__hi0bits>
 800533a:	f1c0 0020 	rsb	r0, r0, #32
 800533e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005340:	4418      	add	r0, r3
 8005342:	f010 001f 	ands.w	r0, r0, #31
 8005346:	f000 8092 	beq.w	800546e <_dtoa_r+0x90e>
 800534a:	f1c0 0320 	rsb	r3, r0, #32
 800534e:	2b04      	cmp	r3, #4
 8005350:	f340 8085 	ble.w	800545e <_dtoa_r+0x8fe>
 8005354:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005356:	f1c0 001c 	rsb	r0, r0, #28
 800535a:	4403      	add	r3, r0
 800535c:	4481      	add	r9, r0
 800535e:	4407      	add	r7, r0
 8005360:	9309      	str	r3, [sp, #36]	; 0x24
 8005362:	f1b9 0f00 	cmp.w	r9, #0
 8005366:	dd05      	ble.n	8005374 <_dtoa_r+0x814>
 8005368:	4651      	mov	r1, sl
 800536a:	464a      	mov	r2, r9
 800536c:	4628      	mov	r0, r5
 800536e:	f000 fce5 	bl	8005d3c <__lshift>
 8005372:	4682      	mov	sl, r0
 8005374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005376:	2b00      	cmp	r3, #0
 8005378:	dd05      	ble.n	8005386 <_dtoa_r+0x826>
 800537a:	4621      	mov	r1, r4
 800537c:	461a      	mov	r2, r3
 800537e:	4628      	mov	r0, r5
 8005380:	f000 fcdc 	bl	8005d3c <__lshift>
 8005384:	4604      	mov	r4, r0
 8005386:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005388:	2b00      	cmp	r3, #0
 800538a:	d072      	beq.n	8005472 <_dtoa_r+0x912>
 800538c:	4621      	mov	r1, r4
 800538e:	4650      	mov	r0, sl
 8005390:	f000 fd40 	bl	8005e14 <__mcmp>
 8005394:	2800      	cmp	r0, #0
 8005396:	da6c      	bge.n	8005472 <_dtoa_r+0x912>
 8005398:	2300      	movs	r3, #0
 800539a:	4651      	mov	r1, sl
 800539c:	220a      	movs	r2, #10
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 fb20 	bl	80059e4 <__multadd>
 80053a4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80053a6:	4682      	mov	sl, r0
 80053a8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	f000 81ac 	beq.w	800570a <_dtoa_r+0xbaa>
 80053b2:	2300      	movs	r3, #0
 80053b4:	4631      	mov	r1, r6
 80053b6:	220a      	movs	r2, #10
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 fb13 	bl	80059e4 <__multadd>
 80053be:	9b06      	ldr	r3, [sp, #24]
 80053c0:	4606      	mov	r6, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	f300 8093 	bgt.w	80054ee <_dtoa_r+0x98e>
 80053c8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	dc59      	bgt.n	8005482 <_dtoa_r+0x922>
 80053ce:	e08e      	b.n	80054ee <_dtoa_r+0x98e>
 80053d0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053d2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80053d6:	e75d      	b.n	8005294 <_dtoa_r+0x734>
 80053d8:	9b08      	ldr	r3, [sp, #32]
 80053da:	1e5c      	subs	r4, r3, #1
 80053dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80053de:	42a3      	cmp	r3, r4
 80053e0:	bfbf      	itttt	lt
 80053e2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80053e4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 80053e6:	1ae3      	sublt	r3, r4, r3
 80053e8:	18d2      	addlt	r2, r2, r3
 80053ea:	bfa8      	it	ge
 80053ec:	1b1c      	subge	r4, r3, r4
 80053ee:	9b08      	ldr	r3, [sp, #32]
 80053f0:	bfbe      	ittt	lt
 80053f2:	940a      	strlt	r4, [sp, #40]	; 0x28
 80053f4:	920e      	strlt	r2, [sp, #56]	; 0x38
 80053f6:	2400      	movlt	r4, #0
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	bfb5      	itete	lt
 80053fc:	eba9 0703 	sublt.w	r7, r9, r3
 8005400:	464f      	movge	r7, r9
 8005402:	2300      	movlt	r3, #0
 8005404:	9b08      	ldrge	r3, [sp, #32]
 8005406:	e747      	b.n	8005298 <_dtoa_r+0x738>
 8005408:	464f      	mov	r7, r9
 800540a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800540c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800540e:	e74c      	b.n	80052aa <_dtoa_r+0x74a>
 8005410:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005412:	e773      	b.n	80052fc <_dtoa_r+0x79c>
 8005414:	3fe00000 	.word	0x3fe00000
 8005418:	40240000 	.word	0x40240000
 800541c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541e:	2b01      	cmp	r3, #1
 8005420:	dc18      	bgt.n	8005454 <_dtoa_r+0x8f4>
 8005422:	9b04      	ldr	r3, [sp, #16]
 8005424:	b9b3      	cbnz	r3, 8005454 <_dtoa_r+0x8f4>
 8005426:	9b05      	ldr	r3, [sp, #20]
 8005428:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800542c:	b993      	cbnz	r3, 8005454 <_dtoa_r+0x8f4>
 800542e:	9b05      	ldr	r3, [sp, #20]
 8005430:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005434:	0d1b      	lsrs	r3, r3, #20
 8005436:	051b      	lsls	r3, r3, #20
 8005438:	b17b      	cbz	r3, 800545a <_dtoa_r+0x8fa>
 800543a:	f04f 0801 	mov.w	r8, #1
 800543e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005440:	f109 0901 	add.w	r9, r9, #1
 8005444:	3301      	adds	r3, #1
 8005446:	9309      	str	r3, [sp, #36]	; 0x24
 8005448:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800544a:	2b00      	cmp	r3, #0
 800544c:	f47f af6f 	bne.w	800532e <_dtoa_r+0x7ce>
 8005450:	2001      	movs	r0, #1
 8005452:	e774      	b.n	800533e <_dtoa_r+0x7de>
 8005454:	f04f 0800 	mov.w	r8, #0
 8005458:	e7f6      	b.n	8005448 <_dtoa_r+0x8e8>
 800545a:	4698      	mov	r8, r3
 800545c:	e7f4      	b.n	8005448 <_dtoa_r+0x8e8>
 800545e:	d080      	beq.n	8005362 <_dtoa_r+0x802>
 8005460:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005462:	331c      	adds	r3, #28
 8005464:	441a      	add	r2, r3
 8005466:	4499      	add	r9, r3
 8005468:	441f      	add	r7, r3
 800546a:	9209      	str	r2, [sp, #36]	; 0x24
 800546c:	e779      	b.n	8005362 <_dtoa_r+0x802>
 800546e:	4603      	mov	r3, r0
 8005470:	e7f6      	b.n	8005460 <_dtoa_r+0x900>
 8005472:	9b08      	ldr	r3, [sp, #32]
 8005474:	2b00      	cmp	r3, #0
 8005476:	dc34      	bgt.n	80054e2 <_dtoa_r+0x982>
 8005478:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800547a:	2b02      	cmp	r3, #2
 800547c:	dd31      	ble.n	80054e2 <_dtoa_r+0x982>
 800547e:	9b08      	ldr	r3, [sp, #32]
 8005480:	9306      	str	r3, [sp, #24]
 8005482:	9b06      	ldr	r3, [sp, #24]
 8005484:	b963      	cbnz	r3, 80054a0 <_dtoa_r+0x940>
 8005486:	4621      	mov	r1, r4
 8005488:	2205      	movs	r2, #5
 800548a:	4628      	mov	r0, r5
 800548c:	f000 faaa 	bl	80059e4 <__multadd>
 8005490:	4601      	mov	r1, r0
 8005492:	4604      	mov	r4, r0
 8005494:	4650      	mov	r0, sl
 8005496:	f000 fcbd 	bl	8005e14 <__mcmp>
 800549a:	2800      	cmp	r0, #0
 800549c:	f73f adbf 	bgt.w	800501e <_dtoa_r+0x4be>
 80054a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054a2:	9f03      	ldr	r7, [sp, #12]
 80054a4:	ea6f 0b03 	mvn.w	fp, r3
 80054a8:	f04f 0800 	mov.w	r8, #0
 80054ac:	4621      	mov	r1, r4
 80054ae:	4628      	mov	r0, r5
 80054b0:	f000 fa76 	bl	80059a0 <_Bfree>
 80054b4:	2e00      	cmp	r6, #0
 80054b6:	f43f aead 	beq.w	8005214 <_dtoa_r+0x6b4>
 80054ba:	f1b8 0f00 	cmp.w	r8, #0
 80054be:	d005      	beq.n	80054cc <_dtoa_r+0x96c>
 80054c0:	45b0      	cmp	r8, r6
 80054c2:	d003      	beq.n	80054cc <_dtoa_r+0x96c>
 80054c4:	4641      	mov	r1, r8
 80054c6:	4628      	mov	r0, r5
 80054c8:	f000 fa6a 	bl	80059a0 <_Bfree>
 80054cc:	4631      	mov	r1, r6
 80054ce:	4628      	mov	r0, r5
 80054d0:	f000 fa66 	bl	80059a0 <_Bfree>
 80054d4:	e69e      	b.n	8005214 <_dtoa_r+0x6b4>
 80054d6:	2400      	movs	r4, #0
 80054d8:	4626      	mov	r6, r4
 80054da:	e7e1      	b.n	80054a0 <_dtoa_r+0x940>
 80054dc:	46c3      	mov	fp, r8
 80054de:	4626      	mov	r6, r4
 80054e0:	e59d      	b.n	800501e <_dtoa_r+0x4be>
 80054e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 80c8 	beq.w	800567a <_dtoa_r+0xb1a>
 80054ea:	9b08      	ldr	r3, [sp, #32]
 80054ec:	9306      	str	r3, [sp, #24]
 80054ee:	2f00      	cmp	r7, #0
 80054f0:	dd05      	ble.n	80054fe <_dtoa_r+0x99e>
 80054f2:	4631      	mov	r1, r6
 80054f4:	463a      	mov	r2, r7
 80054f6:	4628      	mov	r0, r5
 80054f8:	f000 fc20 	bl	8005d3c <__lshift>
 80054fc:	4606      	mov	r6, r0
 80054fe:	f1b8 0f00 	cmp.w	r8, #0
 8005502:	d05b      	beq.n	80055bc <_dtoa_r+0xa5c>
 8005504:	4628      	mov	r0, r5
 8005506:	6871      	ldr	r1, [r6, #4]
 8005508:	f000 fa0a 	bl	8005920 <_Balloc>
 800550c:	4607      	mov	r7, r0
 800550e:	b928      	cbnz	r0, 800551c <_dtoa_r+0x9bc>
 8005510:	4602      	mov	r2, r0
 8005512:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005516:	4b81      	ldr	r3, [pc, #516]	; (800571c <_dtoa_r+0xbbc>)
 8005518:	f7ff bb36 	b.w	8004b88 <_dtoa_r+0x28>
 800551c:	6932      	ldr	r2, [r6, #16]
 800551e:	f106 010c 	add.w	r1, r6, #12
 8005522:	3202      	adds	r2, #2
 8005524:	0092      	lsls	r2, r2, #2
 8005526:	300c      	adds	r0, #12
 8005528:	f000 ff9e 	bl	8006468 <memcpy>
 800552c:	2201      	movs	r2, #1
 800552e:	4639      	mov	r1, r7
 8005530:	4628      	mov	r0, r5
 8005532:	f000 fc03 	bl	8005d3c <__lshift>
 8005536:	46b0      	mov	r8, r6
 8005538:	4606      	mov	r6, r0
 800553a:	9b03      	ldr	r3, [sp, #12]
 800553c:	9a03      	ldr	r2, [sp, #12]
 800553e:	3301      	adds	r3, #1
 8005540:	9308      	str	r3, [sp, #32]
 8005542:	9b06      	ldr	r3, [sp, #24]
 8005544:	4413      	add	r3, r2
 8005546:	930b      	str	r3, [sp, #44]	; 0x2c
 8005548:	9b04      	ldr	r3, [sp, #16]
 800554a:	f003 0301 	and.w	r3, r3, #1
 800554e:	930a      	str	r3, [sp, #40]	; 0x28
 8005550:	9b08      	ldr	r3, [sp, #32]
 8005552:	4621      	mov	r1, r4
 8005554:	3b01      	subs	r3, #1
 8005556:	4650      	mov	r0, sl
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	f7ff fa75 	bl	8004a48 <quorem>
 800555e:	4641      	mov	r1, r8
 8005560:	9006      	str	r0, [sp, #24]
 8005562:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005566:	4650      	mov	r0, sl
 8005568:	f000 fc54 	bl	8005e14 <__mcmp>
 800556c:	4632      	mov	r2, r6
 800556e:	9009      	str	r0, [sp, #36]	; 0x24
 8005570:	4621      	mov	r1, r4
 8005572:	4628      	mov	r0, r5
 8005574:	f000 fc6a 	bl	8005e4c <__mdiff>
 8005578:	68c2      	ldr	r2, [r0, #12]
 800557a:	4607      	mov	r7, r0
 800557c:	bb02      	cbnz	r2, 80055c0 <_dtoa_r+0xa60>
 800557e:	4601      	mov	r1, r0
 8005580:	4650      	mov	r0, sl
 8005582:	f000 fc47 	bl	8005e14 <__mcmp>
 8005586:	4602      	mov	r2, r0
 8005588:	4639      	mov	r1, r7
 800558a:	4628      	mov	r0, r5
 800558c:	920c      	str	r2, [sp, #48]	; 0x30
 800558e:	f000 fa07 	bl	80059a0 <_Bfree>
 8005592:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005594:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005596:	9f08      	ldr	r7, [sp, #32]
 8005598:	ea43 0102 	orr.w	r1, r3, r2
 800559c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800559e:	4319      	orrs	r1, r3
 80055a0:	d110      	bne.n	80055c4 <_dtoa_r+0xa64>
 80055a2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055a6:	d029      	beq.n	80055fc <_dtoa_r+0xa9c>
 80055a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	dd02      	ble.n	80055b4 <_dtoa_r+0xa54>
 80055ae:	9b06      	ldr	r3, [sp, #24]
 80055b0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80055b4:	9b04      	ldr	r3, [sp, #16]
 80055b6:	f883 9000 	strb.w	r9, [r3]
 80055ba:	e777      	b.n	80054ac <_dtoa_r+0x94c>
 80055bc:	4630      	mov	r0, r6
 80055be:	e7ba      	b.n	8005536 <_dtoa_r+0x9d6>
 80055c0:	2201      	movs	r2, #1
 80055c2:	e7e1      	b.n	8005588 <_dtoa_r+0xa28>
 80055c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	db04      	blt.n	80055d4 <_dtoa_r+0xa74>
 80055ca:	9922      	ldr	r1, [sp, #136]	; 0x88
 80055cc:	430b      	orrs	r3, r1
 80055ce:	990a      	ldr	r1, [sp, #40]	; 0x28
 80055d0:	430b      	orrs	r3, r1
 80055d2:	d120      	bne.n	8005616 <_dtoa_r+0xab6>
 80055d4:	2a00      	cmp	r2, #0
 80055d6:	dded      	ble.n	80055b4 <_dtoa_r+0xa54>
 80055d8:	4651      	mov	r1, sl
 80055da:	2201      	movs	r2, #1
 80055dc:	4628      	mov	r0, r5
 80055de:	f000 fbad 	bl	8005d3c <__lshift>
 80055e2:	4621      	mov	r1, r4
 80055e4:	4682      	mov	sl, r0
 80055e6:	f000 fc15 	bl	8005e14 <__mcmp>
 80055ea:	2800      	cmp	r0, #0
 80055ec:	dc03      	bgt.n	80055f6 <_dtoa_r+0xa96>
 80055ee:	d1e1      	bne.n	80055b4 <_dtoa_r+0xa54>
 80055f0:	f019 0f01 	tst.w	r9, #1
 80055f4:	d0de      	beq.n	80055b4 <_dtoa_r+0xa54>
 80055f6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80055fa:	d1d8      	bne.n	80055ae <_dtoa_r+0xa4e>
 80055fc:	2339      	movs	r3, #57	; 0x39
 80055fe:	9a04      	ldr	r2, [sp, #16]
 8005600:	7013      	strb	r3, [r2, #0]
 8005602:	463b      	mov	r3, r7
 8005604:	461f      	mov	r7, r3
 8005606:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800560a:	3b01      	subs	r3, #1
 800560c:	2a39      	cmp	r2, #57	; 0x39
 800560e:	d06b      	beq.n	80056e8 <_dtoa_r+0xb88>
 8005610:	3201      	adds	r2, #1
 8005612:	701a      	strb	r2, [r3, #0]
 8005614:	e74a      	b.n	80054ac <_dtoa_r+0x94c>
 8005616:	2a00      	cmp	r2, #0
 8005618:	dd07      	ble.n	800562a <_dtoa_r+0xaca>
 800561a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800561e:	d0ed      	beq.n	80055fc <_dtoa_r+0xa9c>
 8005620:	9a04      	ldr	r2, [sp, #16]
 8005622:	f109 0301 	add.w	r3, r9, #1
 8005626:	7013      	strb	r3, [r2, #0]
 8005628:	e740      	b.n	80054ac <_dtoa_r+0x94c>
 800562a:	9b08      	ldr	r3, [sp, #32]
 800562c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800562e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005632:	4293      	cmp	r3, r2
 8005634:	d042      	beq.n	80056bc <_dtoa_r+0xb5c>
 8005636:	4651      	mov	r1, sl
 8005638:	2300      	movs	r3, #0
 800563a:	220a      	movs	r2, #10
 800563c:	4628      	mov	r0, r5
 800563e:	f000 f9d1 	bl	80059e4 <__multadd>
 8005642:	45b0      	cmp	r8, r6
 8005644:	4682      	mov	sl, r0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	f04f 020a 	mov.w	r2, #10
 800564e:	4641      	mov	r1, r8
 8005650:	4628      	mov	r0, r5
 8005652:	d107      	bne.n	8005664 <_dtoa_r+0xb04>
 8005654:	f000 f9c6 	bl	80059e4 <__multadd>
 8005658:	4680      	mov	r8, r0
 800565a:	4606      	mov	r6, r0
 800565c:	9b08      	ldr	r3, [sp, #32]
 800565e:	3301      	adds	r3, #1
 8005660:	9308      	str	r3, [sp, #32]
 8005662:	e775      	b.n	8005550 <_dtoa_r+0x9f0>
 8005664:	f000 f9be 	bl	80059e4 <__multadd>
 8005668:	4631      	mov	r1, r6
 800566a:	4680      	mov	r8, r0
 800566c:	2300      	movs	r3, #0
 800566e:	220a      	movs	r2, #10
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f9b7 	bl	80059e4 <__multadd>
 8005676:	4606      	mov	r6, r0
 8005678:	e7f0      	b.n	800565c <_dtoa_r+0xafc>
 800567a:	9b08      	ldr	r3, [sp, #32]
 800567c:	9306      	str	r3, [sp, #24]
 800567e:	9f03      	ldr	r7, [sp, #12]
 8005680:	4621      	mov	r1, r4
 8005682:	4650      	mov	r0, sl
 8005684:	f7ff f9e0 	bl	8004a48 <quorem>
 8005688:	9b03      	ldr	r3, [sp, #12]
 800568a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800568e:	f807 9b01 	strb.w	r9, [r7], #1
 8005692:	1afa      	subs	r2, r7, r3
 8005694:	9b06      	ldr	r3, [sp, #24]
 8005696:	4293      	cmp	r3, r2
 8005698:	dd07      	ble.n	80056aa <_dtoa_r+0xb4a>
 800569a:	4651      	mov	r1, sl
 800569c:	2300      	movs	r3, #0
 800569e:	220a      	movs	r2, #10
 80056a0:	4628      	mov	r0, r5
 80056a2:	f000 f99f 	bl	80059e4 <__multadd>
 80056a6:	4682      	mov	sl, r0
 80056a8:	e7ea      	b.n	8005680 <_dtoa_r+0xb20>
 80056aa:	9b06      	ldr	r3, [sp, #24]
 80056ac:	f04f 0800 	mov.w	r8, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	bfcc      	ite	gt
 80056b4:	461f      	movgt	r7, r3
 80056b6:	2701      	movle	r7, #1
 80056b8:	9b03      	ldr	r3, [sp, #12]
 80056ba:	441f      	add	r7, r3
 80056bc:	4651      	mov	r1, sl
 80056be:	2201      	movs	r2, #1
 80056c0:	4628      	mov	r0, r5
 80056c2:	f000 fb3b 	bl	8005d3c <__lshift>
 80056c6:	4621      	mov	r1, r4
 80056c8:	4682      	mov	sl, r0
 80056ca:	f000 fba3 	bl	8005e14 <__mcmp>
 80056ce:	2800      	cmp	r0, #0
 80056d0:	dc97      	bgt.n	8005602 <_dtoa_r+0xaa2>
 80056d2:	d102      	bne.n	80056da <_dtoa_r+0xb7a>
 80056d4:	f019 0f01 	tst.w	r9, #1
 80056d8:	d193      	bne.n	8005602 <_dtoa_r+0xaa2>
 80056da:	463b      	mov	r3, r7
 80056dc:	461f      	mov	r7, r3
 80056de:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056e2:	2a30      	cmp	r2, #48	; 0x30
 80056e4:	d0fa      	beq.n	80056dc <_dtoa_r+0xb7c>
 80056e6:	e6e1      	b.n	80054ac <_dtoa_r+0x94c>
 80056e8:	9a03      	ldr	r2, [sp, #12]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d18a      	bne.n	8005604 <_dtoa_r+0xaa4>
 80056ee:	2331      	movs	r3, #49	; 0x31
 80056f0:	f10b 0b01 	add.w	fp, fp, #1
 80056f4:	e797      	b.n	8005626 <_dtoa_r+0xac6>
 80056f6:	4b0a      	ldr	r3, [pc, #40]	; (8005720 <_dtoa_r+0xbc0>)
 80056f8:	f7ff ba9f 	b.w	8004c3a <_dtoa_r+0xda>
 80056fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f47f aa77 	bne.w	8004bf2 <_dtoa_r+0x92>
 8005704:	4b07      	ldr	r3, [pc, #28]	; (8005724 <_dtoa_r+0xbc4>)
 8005706:	f7ff ba98 	b.w	8004c3a <_dtoa_r+0xda>
 800570a:	9b06      	ldr	r3, [sp, #24]
 800570c:	2b00      	cmp	r3, #0
 800570e:	dcb6      	bgt.n	800567e <_dtoa_r+0xb1e>
 8005710:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005712:	2b02      	cmp	r3, #2
 8005714:	f73f aeb5 	bgt.w	8005482 <_dtoa_r+0x922>
 8005718:	e7b1      	b.n	800567e <_dtoa_r+0xb1e>
 800571a:	bf00      	nop
 800571c:	08007b99 	.word	0x08007b99
 8005720:	08007af9 	.word	0x08007af9
 8005724:	08007b1d 	.word	0x08007b1d

08005728 <_free_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4605      	mov	r5, r0
 800572c:	2900      	cmp	r1, #0
 800572e:	d040      	beq.n	80057b2 <_free_r+0x8a>
 8005730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005734:	1f0c      	subs	r4, r1, #4
 8005736:	2b00      	cmp	r3, #0
 8005738:	bfb8      	it	lt
 800573a:	18e4      	addlt	r4, r4, r3
 800573c:	f000 f8e4 	bl	8005908 <__malloc_lock>
 8005740:	4a1c      	ldr	r2, [pc, #112]	; (80057b4 <_free_r+0x8c>)
 8005742:	6813      	ldr	r3, [r2, #0]
 8005744:	b933      	cbnz	r3, 8005754 <_free_r+0x2c>
 8005746:	6063      	str	r3, [r4, #4]
 8005748:	6014      	str	r4, [r2, #0]
 800574a:	4628      	mov	r0, r5
 800574c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005750:	f000 b8e0 	b.w	8005914 <__malloc_unlock>
 8005754:	42a3      	cmp	r3, r4
 8005756:	d908      	bls.n	800576a <_free_r+0x42>
 8005758:	6820      	ldr	r0, [r4, #0]
 800575a:	1821      	adds	r1, r4, r0
 800575c:	428b      	cmp	r3, r1
 800575e:	bf01      	itttt	eq
 8005760:	6819      	ldreq	r1, [r3, #0]
 8005762:	685b      	ldreq	r3, [r3, #4]
 8005764:	1809      	addeq	r1, r1, r0
 8005766:	6021      	streq	r1, [r4, #0]
 8005768:	e7ed      	b.n	8005746 <_free_r+0x1e>
 800576a:	461a      	mov	r2, r3
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	b10b      	cbz	r3, 8005774 <_free_r+0x4c>
 8005770:	42a3      	cmp	r3, r4
 8005772:	d9fa      	bls.n	800576a <_free_r+0x42>
 8005774:	6811      	ldr	r1, [r2, #0]
 8005776:	1850      	adds	r0, r2, r1
 8005778:	42a0      	cmp	r0, r4
 800577a:	d10b      	bne.n	8005794 <_free_r+0x6c>
 800577c:	6820      	ldr	r0, [r4, #0]
 800577e:	4401      	add	r1, r0
 8005780:	1850      	adds	r0, r2, r1
 8005782:	4283      	cmp	r3, r0
 8005784:	6011      	str	r1, [r2, #0]
 8005786:	d1e0      	bne.n	800574a <_free_r+0x22>
 8005788:	6818      	ldr	r0, [r3, #0]
 800578a:	685b      	ldr	r3, [r3, #4]
 800578c:	4408      	add	r0, r1
 800578e:	6010      	str	r0, [r2, #0]
 8005790:	6053      	str	r3, [r2, #4]
 8005792:	e7da      	b.n	800574a <_free_r+0x22>
 8005794:	d902      	bls.n	800579c <_free_r+0x74>
 8005796:	230c      	movs	r3, #12
 8005798:	602b      	str	r3, [r5, #0]
 800579a:	e7d6      	b.n	800574a <_free_r+0x22>
 800579c:	6820      	ldr	r0, [r4, #0]
 800579e:	1821      	adds	r1, r4, r0
 80057a0:	428b      	cmp	r3, r1
 80057a2:	bf01      	itttt	eq
 80057a4:	6819      	ldreq	r1, [r3, #0]
 80057a6:	685b      	ldreq	r3, [r3, #4]
 80057a8:	1809      	addeq	r1, r1, r0
 80057aa:	6021      	streq	r1, [r4, #0]
 80057ac:	6063      	str	r3, [r4, #4]
 80057ae:	6054      	str	r4, [r2, #4]
 80057b0:	e7cb      	b.n	800574a <_free_r+0x22>
 80057b2:	bd38      	pop	{r3, r4, r5, pc}
 80057b4:	20000970 	.word	0x20000970

080057b8 <malloc>:
 80057b8:	4b02      	ldr	r3, [pc, #8]	; (80057c4 <malloc+0xc>)
 80057ba:	4601      	mov	r1, r0
 80057bc:	6818      	ldr	r0, [r3, #0]
 80057be:	f000 b823 	b.w	8005808 <_malloc_r>
 80057c2:	bf00      	nop
 80057c4:	2000006c 	.word	0x2000006c

080057c8 <sbrk_aligned>:
 80057c8:	b570      	push	{r4, r5, r6, lr}
 80057ca:	4e0e      	ldr	r6, [pc, #56]	; (8005804 <sbrk_aligned+0x3c>)
 80057cc:	460c      	mov	r4, r1
 80057ce:	6831      	ldr	r1, [r6, #0]
 80057d0:	4605      	mov	r5, r0
 80057d2:	b911      	cbnz	r1, 80057da <sbrk_aligned+0x12>
 80057d4:	f000 fe38 	bl	8006448 <_sbrk_r>
 80057d8:	6030      	str	r0, [r6, #0]
 80057da:	4621      	mov	r1, r4
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 fe33 	bl	8006448 <_sbrk_r>
 80057e2:	1c43      	adds	r3, r0, #1
 80057e4:	d00a      	beq.n	80057fc <sbrk_aligned+0x34>
 80057e6:	1cc4      	adds	r4, r0, #3
 80057e8:	f024 0403 	bic.w	r4, r4, #3
 80057ec:	42a0      	cmp	r0, r4
 80057ee:	d007      	beq.n	8005800 <sbrk_aligned+0x38>
 80057f0:	1a21      	subs	r1, r4, r0
 80057f2:	4628      	mov	r0, r5
 80057f4:	f000 fe28 	bl	8006448 <_sbrk_r>
 80057f8:	3001      	adds	r0, #1
 80057fa:	d101      	bne.n	8005800 <sbrk_aligned+0x38>
 80057fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005800:	4620      	mov	r0, r4
 8005802:	bd70      	pop	{r4, r5, r6, pc}
 8005804:	20000974 	.word	0x20000974

08005808 <_malloc_r>:
 8005808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800580c:	1ccd      	adds	r5, r1, #3
 800580e:	f025 0503 	bic.w	r5, r5, #3
 8005812:	3508      	adds	r5, #8
 8005814:	2d0c      	cmp	r5, #12
 8005816:	bf38      	it	cc
 8005818:	250c      	movcc	r5, #12
 800581a:	2d00      	cmp	r5, #0
 800581c:	4607      	mov	r7, r0
 800581e:	db01      	blt.n	8005824 <_malloc_r+0x1c>
 8005820:	42a9      	cmp	r1, r5
 8005822:	d905      	bls.n	8005830 <_malloc_r+0x28>
 8005824:	230c      	movs	r3, #12
 8005826:	2600      	movs	r6, #0
 8005828:	603b      	str	r3, [r7, #0]
 800582a:	4630      	mov	r0, r6
 800582c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005830:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005904 <_malloc_r+0xfc>
 8005834:	f000 f868 	bl	8005908 <__malloc_lock>
 8005838:	f8d8 3000 	ldr.w	r3, [r8]
 800583c:	461c      	mov	r4, r3
 800583e:	bb5c      	cbnz	r4, 8005898 <_malloc_r+0x90>
 8005840:	4629      	mov	r1, r5
 8005842:	4638      	mov	r0, r7
 8005844:	f7ff ffc0 	bl	80057c8 <sbrk_aligned>
 8005848:	1c43      	adds	r3, r0, #1
 800584a:	4604      	mov	r4, r0
 800584c:	d155      	bne.n	80058fa <_malloc_r+0xf2>
 800584e:	f8d8 4000 	ldr.w	r4, [r8]
 8005852:	4626      	mov	r6, r4
 8005854:	2e00      	cmp	r6, #0
 8005856:	d145      	bne.n	80058e4 <_malloc_r+0xdc>
 8005858:	2c00      	cmp	r4, #0
 800585a:	d048      	beq.n	80058ee <_malloc_r+0xe6>
 800585c:	6823      	ldr	r3, [r4, #0]
 800585e:	4631      	mov	r1, r6
 8005860:	4638      	mov	r0, r7
 8005862:	eb04 0903 	add.w	r9, r4, r3
 8005866:	f000 fdef 	bl	8006448 <_sbrk_r>
 800586a:	4581      	cmp	r9, r0
 800586c:	d13f      	bne.n	80058ee <_malloc_r+0xe6>
 800586e:	6821      	ldr	r1, [r4, #0]
 8005870:	4638      	mov	r0, r7
 8005872:	1a6d      	subs	r5, r5, r1
 8005874:	4629      	mov	r1, r5
 8005876:	f7ff ffa7 	bl	80057c8 <sbrk_aligned>
 800587a:	3001      	adds	r0, #1
 800587c:	d037      	beq.n	80058ee <_malloc_r+0xe6>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	442b      	add	r3, r5
 8005882:	6023      	str	r3, [r4, #0]
 8005884:	f8d8 3000 	ldr.w	r3, [r8]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d038      	beq.n	80058fe <_malloc_r+0xf6>
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	42a2      	cmp	r2, r4
 8005890:	d12b      	bne.n	80058ea <_malloc_r+0xe2>
 8005892:	2200      	movs	r2, #0
 8005894:	605a      	str	r2, [r3, #4]
 8005896:	e00f      	b.n	80058b8 <_malloc_r+0xb0>
 8005898:	6822      	ldr	r2, [r4, #0]
 800589a:	1b52      	subs	r2, r2, r5
 800589c:	d41f      	bmi.n	80058de <_malloc_r+0xd6>
 800589e:	2a0b      	cmp	r2, #11
 80058a0:	d917      	bls.n	80058d2 <_malloc_r+0xca>
 80058a2:	1961      	adds	r1, r4, r5
 80058a4:	42a3      	cmp	r3, r4
 80058a6:	6025      	str	r5, [r4, #0]
 80058a8:	bf18      	it	ne
 80058aa:	6059      	strne	r1, [r3, #4]
 80058ac:	6863      	ldr	r3, [r4, #4]
 80058ae:	bf08      	it	eq
 80058b0:	f8c8 1000 	streq.w	r1, [r8]
 80058b4:	5162      	str	r2, [r4, r5]
 80058b6:	604b      	str	r3, [r1, #4]
 80058b8:	4638      	mov	r0, r7
 80058ba:	f104 060b 	add.w	r6, r4, #11
 80058be:	f000 f829 	bl	8005914 <__malloc_unlock>
 80058c2:	f026 0607 	bic.w	r6, r6, #7
 80058c6:	1d23      	adds	r3, r4, #4
 80058c8:	1af2      	subs	r2, r6, r3
 80058ca:	d0ae      	beq.n	800582a <_malloc_r+0x22>
 80058cc:	1b9b      	subs	r3, r3, r6
 80058ce:	50a3      	str	r3, [r4, r2]
 80058d0:	e7ab      	b.n	800582a <_malloc_r+0x22>
 80058d2:	42a3      	cmp	r3, r4
 80058d4:	6862      	ldr	r2, [r4, #4]
 80058d6:	d1dd      	bne.n	8005894 <_malloc_r+0x8c>
 80058d8:	f8c8 2000 	str.w	r2, [r8]
 80058dc:	e7ec      	b.n	80058b8 <_malloc_r+0xb0>
 80058de:	4623      	mov	r3, r4
 80058e0:	6864      	ldr	r4, [r4, #4]
 80058e2:	e7ac      	b.n	800583e <_malloc_r+0x36>
 80058e4:	4634      	mov	r4, r6
 80058e6:	6876      	ldr	r6, [r6, #4]
 80058e8:	e7b4      	b.n	8005854 <_malloc_r+0x4c>
 80058ea:	4613      	mov	r3, r2
 80058ec:	e7cc      	b.n	8005888 <_malloc_r+0x80>
 80058ee:	230c      	movs	r3, #12
 80058f0:	4638      	mov	r0, r7
 80058f2:	603b      	str	r3, [r7, #0]
 80058f4:	f000 f80e 	bl	8005914 <__malloc_unlock>
 80058f8:	e797      	b.n	800582a <_malloc_r+0x22>
 80058fa:	6025      	str	r5, [r4, #0]
 80058fc:	e7dc      	b.n	80058b8 <_malloc_r+0xb0>
 80058fe:	605b      	str	r3, [r3, #4]
 8005900:	deff      	udf	#255	; 0xff
 8005902:	bf00      	nop
 8005904:	20000970 	.word	0x20000970

08005908 <__malloc_lock>:
 8005908:	4801      	ldr	r0, [pc, #4]	; (8005910 <__malloc_lock+0x8>)
 800590a:	f7ff b88d 	b.w	8004a28 <__retarget_lock_acquire_recursive>
 800590e:	bf00      	nop
 8005910:	2000096c 	.word	0x2000096c

08005914 <__malloc_unlock>:
 8005914:	4801      	ldr	r0, [pc, #4]	; (800591c <__malloc_unlock+0x8>)
 8005916:	f7ff b888 	b.w	8004a2a <__retarget_lock_release_recursive>
 800591a:	bf00      	nop
 800591c:	2000096c 	.word	0x2000096c

08005920 <_Balloc>:
 8005920:	b570      	push	{r4, r5, r6, lr}
 8005922:	69c6      	ldr	r6, [r0, #28]
 8005924:	4604      	mov	r4, r0
 8005926:	460d      	mov	r5, r1
 8005928:	b976      	cbnz	r6, 8005948 <_Balloc+0x28>
 800592a:	2010      	movs	r0, #16
 800592c:	f7ff ff44 	bl	80057b8 <malloc>
 8005930:	4602      	mov	r2, r0
 8005932:	61e0      	str	r0, [r4, #28]
 8005934:	b920      	cbnz	r0, 8005940 <_Balloc+0x20>
 8005936:	216b      	movs	r1, #107	; 0x6b
 8005938:	4b17      	ldr	r3, [pc, #92]	; (8005998 <_Balloc+0x78>)
 800593a:	4818      	ldr	r0, [pc, #96]	; (800599c <_Balloc+0x7c>)
 800593c:	f000 fda2 	bl	8006484 <__assert_func>
 8005940:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005944:	6006      	str	r6, [r0, #0]
 8005946:	60c6      	str	r6, [r0, #12]
 8005948:	69e6      	ldr	r6, [r4, #28]
 800594a:	68f3      	ldr	r3, [r6, #12]
 800594c:	b183      	cbz	r3, 8005970 <_Balloc+0x50>
 800594e:	69e3      	ldr	r3, [r4, #28]
 8005950:	68db      	ldr	r3, [r3, #12]
 8005952:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005956:	b9b8      	cbnz	r0, 8005988 <_Balloc+0x68>
 8005958:	2101      	movs	r1, #1
 800595a:	fa01 f605 	lsl.w	r6, r1, r5
 800595e:	1d72      	adds	r2, r6, #5
 8005960:	4620      	mov	r0, r4
 8005962:	0092      	lsls	r2, r2, #2
 8005964:	f000 fdac 	bl	80064c0 <_calloc_r>
 8005968:	b160      	cbz	r0, 8005984 <_Balloc+0x64>
 800596a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800596e:	e00e      	b.n	800598e <_Balloc+0x6e>
 8005970:	2221      	movs	r2, #33	; 0x21
 8005972:	2104      	movs	r1, #4
 8005974:	4620      	mov	r0, r4
 8005976:	f000 fda3 	bl	80064c0 <_calloc_r>
 800597a:	69e3      	ldr	r3, [r4, #28]
 800597c:	60f0      	str	r0, [r6, #12]
 800597e:	68db      	ldr	r3, [r3, #12]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e4      	bne.n	800594e <_Balloc+0x2e>
 8005984:	2000      	movs	r0, #0
 8005986:	bd70      	pop	{r4, r5, r6, pc}
 8005988:	6802      	ldr	r2, [r0, #0]
 800598a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800598e:	2300      	movs	r3, #0
 8005990:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005994:	e7f7      	b.n	8005986 <_Balloc+0x66>
 8005996:	bf00      	nop
 8005998:	08007b2a 	.word	0x08007b2a
 800599c:	08007baa 	.word	0x08007baa

080059a0 <_Bfree>:
 80059a0:	b570      	push	{r4, r5, r6, lr}
 80059a2:	69c6      	ldr	r6, [r0, #28]
 80059a4:	4605      	mov	r5, r0
 80059a6:	460c      	mov	r4, r1
 80059a8:	b976      	cbnz	r6, 80059c8 <_Bfree+0x28>
 80059aa:	2010      	movs	r0, #16
 80059ac:	f7ff ff04 	bl	80057b8 <malloc>
 80059b0:	4602      	mov	r2, r0
 80059b2:	61e8      	str	r0, [r5, #28]
 80059b4:	b920      	cbnz	r0, 80059c0 <_Bfree+0x20>
 80059b6:	218f      	movs	r1, #143	; 0x8f
 80059b8:	4b08      	ldr	r3, [pc, #32]	; (80059dc <_Bfree+0x3c>)
 80059ba:	4809      	ldr	r0, [pc, #36]	; (80059e0 <_Bfree+0x40>)
 80059bc:	f000 fd62 	bl	8006484 <__assert_func>
 80059c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059c4:	6006      	str	r6, [r0, #0]
 80059c6:	60c6      	str	r6, [r0, #12]
 80059c8:	b13c      	cbz	r4, 80059da <_Bfree+0x3a>
 80059ca:	69eb      	ldr	r3, [r5, #28]
 80059cc:	6862      	ldr	r2, [r4, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80059d4:	6021      	str	r1, [r4, #0]
 80059d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80059da:	bd70      	pop	{r4, r5, r6, pc}
 80059dc:	08007b2a 	.word	0x08007b2a
 80059e0:	08007baa 	.word	0x08007baa

080059e4 <__multadd>:
 80059e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80059e8:	4607      	mov	r7, r0
 80059ea:	460c      	mov	r4, r1
 80059ec:	461e      	mov	r6, r3
 80059ee:	2000      	movs	r0, #0
 80059f0:	690d      	ldr	r5, [r1, #16]
 80059f2:	f101 0c14 	add.w	ip, r1, #20
 80059f6:	f8dc 3000 	ldr.w	r3, [ip]
 80059fa:	3001      	adds	r0, #1
 80059fc:	b299      	uxth	r1, r3
 80059fe:	fb02 6101 	mla	r1, r2, r1, r6
 8005a02:	0c1e      	lsrs	r6, r3, #16
 8005a04:	0c0b      	lsrs	r3, r1, #16
 8005a06:	fb02 3306 	mla	r3, r2, r6, r3
 8005a0a:	b289      	uxth	r1, r1
 8005a0c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005a10:	4285      	cmp	r5, r0
 8005a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005a16:	f84c 1b04 	str.w	r1, [ip], #4
 8005a1a:	dcec      	bgt.n	80059f6 <__multadd+0x12>
 8005a1c:	b30e      	cbz	r6, 8005a62 <__multadd+0x7e>
 8005a1e:	68a3      	ldr	r3, [r4, #8]
 8005a20:	42ab      	cmp	r3, r5
 8005a22:	dc19      	bgt.n	8005a58 <__multadd+0x74>
 8005a24:	6861      	ldr	r1, [r4, #4]
 8005a26:	4638      	mov	r0, r7
 8005a28:	3101      	adds	r1, #1
 8005a2a:	f7ff ff79 	bl	8005920 <_Balloc>
 8005a2e:	4680      	mov	r8, r0
 8005a30:	b928      	cbnz	r0, 8005a3e <__multadd+0x5a>
 8005a32:	4602      	mov	r2, r0
 8005a34:	21ba      	movs	r1, #186	; 0xba
 8005a36:	4b0c      	ldr	r3, [pc, #48]	; (8005a68 <__multadd+0x84>)
 8005a38:	480c      	ldr	r0, [pc, #48]	; (8005a6c <__multadd+0x88>)
 8005a3a:	f000 fd23 	bl	8006484 <__assert_func>
 8005a3e:	6922      	ldr	r2, [r4, #16]
 8005a40:	f104 010c 	add.w	r1, r4, #12
 8005a44:	3202      	adds	r2, #2
 8005a46:	0092      	lsls	r2, r2, #2
 8005a48:	300c      	adds	r0, #12
 8005a4a:	f000 fd0d 	bl	8006468 <memcpy>
 8005a4e:	4621      	mov	r1, r4
 8005a50:	4638      	mov	r0, r7
 8005a52:	f7ff ffa5 	bl	80059a0 <_Bfree>
 8005a56:	4644      	mov	r4, r8
 8005a58:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	615e      	str	r6, [r3, #20]
 8005a60:	6125      	str	r5, [r4, #16]
 8005a62:	4620      	mov	r0, r4
 8005a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a68:	08007b99 	.word	0x08007b99
 8005a6c:	08007baa 	.word	0x08007baa

08005a70 <__hi0bits>:
 8005a70:	0c02      	lsrs	r2, r0, #16
 8005a72:	0412      	lsls	r2, r2, #16
 8005a74:	4603      	mov	r3, r0
 8005a76:	b9ca      	cbnz	r2, 8005aac <__hi0bits+0x3c>
 8005a78:	0403      	lsls	r3, r0, #16
 8005a7a:	2010      	movs	r0, #16
 8005a7c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005a80:	bf04      	itt	eq
 8005a82:	021b      	lsleq	r3, r3, #8
 8005a84:	3008      	addeq	r0, #8
 8005a86:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005a8a:	bf04      	itt	eq
 8005a8c:	011b      	lsleq	r3, r3, #4
 8005a8e:	3004      	addeq	r0, #4
 8005a90:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005a94:	bf04      	itt	eq
 8005a96:	009b      	lsleq	r3, r3, #2
 8005a98:	3002      	addeq	r0, #2
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	db05      	blt.n	8005aaa <__hi0bits+0x3a>
 8005a9e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005aa2:	f100 0001 	add.w	r0, r0, #1
 8005aa6:	bf08      	it	eq
 8005aa8:	2020      	moveq	r0, #32
 8005aaa:	4770      	bx	lr
 8005aac:	2000      	movs	r0, #0
 8005aae:	e7e5      	b.n	8005a7c <__hi0bits+0xc>

08005ab0 <__lo0bits>:
 8005ab0:	6803      	ldr	r3, [r0, #0]
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	f013 0007 	ands.w	r0, r3, #7
 8005ab8:	d00b      	beq.n	8005ad2 <__lo0bits+0x22>
 8005aba:	07d9      	lsls	r1, r3, #31
 8005abc:	d421      	bmi.n	8005b02 <__lo0bits+0x52>
 8005abe:	0798      	lsls	r0, r3, #30
 8005ac0:	bf49      	itett	mi
 8005ac2:	085b      	lsrmi	r3, r3, #1
 8005ac4:	089b      	lsrpl	r3, r3, #2
 8005ac6:	2001      	movmi	r0, #1
 8005ac8:	6013      	strmi	r3, [r2, #0]
 8005aca:	bf5c      	itt	pl
 8005acc:	2002      	movpl	r0, #2
 8005ace:	6013      	strpl	r3, [r2, #0]
 8005ad0:	4770      	bx	lr
 8005ad2:	b299      	uxth	r1, r3
 8005ad4:	b909      	cbnz	r1, 8005ada <__lo0bits+0x2a>
 8005ad6:	2010      	movs	r0, #16
 8005ad8:	0c1b      	lsrs	r3, r3, #16
 8005ada:	b2d9      	uxtb	r1, r3
 8005adc:	b909      	cbnz	r1, 8005ae2 <__lo0bits+0x32>
 8005ade:	3008      	adds	r0, #8
 8005ae0:	0a1b      	lsrs	r3, r3, #8
 8005ae2:	0719      	lsls	r1, r3, #28
 8005ae4:	bf04      	itt	eq
 8005ae6:	091b      	lsreq	r3, r3, #4
 8005ae8:	3004      	addeq	r0, #4
 8005aea:	0799      	lsls	r1, r3, #30
 8005aec:	bf04      	itt	eq
 8005aee:	089b      	lsreq	r3, r3, #2
 8005af0:	3002      	addeq	r0, #2
 8005af2:	07d9      	lsls	r1, r3, #31
 8005af4:	d403      	bmi.n	8005afe <__lo0bits+0x4e>
 8005af6:	085b      	lsrs	r3, r3, #1
 8005af8:	f100 0001 	add.w	r0, r0, #1
 8005afc:	d003      	beq.n	8005b06 <__lo0bits+0x56>
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	4770      	bx	lr
 8005b02:	2000      	movs	r0, #0
 8005b04:	4770      	bx	lr
 8005b06:	2020      	movs	r0, #32
 8005b08:	4770      	bx	lr
	...

08005b0c <__i2b>:
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	460c      	mov	r4, r1
 8005b10:	2101      	movs	r1, #1
 8005b12:	f7ff ff05 	bl	8005920 <_Balloc>
 8005b16:	4602      	mov	r2, r0
 8005b18:	b928      	cbnz	r0, 8005b26 <__i2b+0x1a>
 8005b1a:	f240 1145 	movw	r1, #325	; 0x145
 8005b1e:	4b04      	ldr	r3, [pc, #16]	; (8005b30 <__i2b+0x24>)
 8005b20:	4804      	ldr	r0, [pc, #16]	; (8005b34 <__i2b+0x28>)
 8005b22:	f000 fcaf 	bl	8006484 <__assert_func>
 8005b26:	2301      	movs	r3, #1
 8005b28:	6144      	str	r4, [r0, #20]
 8005b2a:	6103      	str	r3, [r0, #16]
 8005b2c:	bd10      	pop	{r4, pc}
 8005b2e:	bf00      	nop
 8005b30:	08007b99 	.word	0x08007b99
 8005b34:	08007baa 	.word	0x08007baa

08005b38 <__multiply>:
 8005b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3c:	4691      	mov	r9, r2
 8005b3e:	690a      	ldr	r2, [r1, #16]
 8005b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005b44:	460c      	mov	r4, r1
 8005b46:	429a      	cmp	r2, r3
 8005b48:	bfbe      	ittt	lt
 8005b4a:	460b      	movlt	r3, r1
 8005b4c:	464c      	movlt	r4, r9
 8005b4e:	4699      	movlt	r9, r3
 8005b50:	6927      	ldr	r7, [r4, #16]
 8005b52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005b56:	68a3      	ldr	r3, [r4, #8]
 8005b58:	6861      	ldr	r1, [r4, #4]
 8005b5a:	eb07 060a 	add.w	r6, r7, sl
 8005b5e:	42b3      	cmp	r3, r6
 8005b60:	b085      	sub	sp, #20
 8005b62:	bfb8      	it	lt
 8005b64:	3101      	addlt	r1, #1
 8005b66:	f7ff fedb 	bl	8005920 <_Balloc>
 8005b6a:	b930      	cbnz	r0, 8005b7a <__multiply+0x42>
 8005b6c:	4602      	mov	r2, r0
 8005b6e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005b72:	4b43      	ldr	r3, [pc, #268]	; (8005c80 <__multiply+0x148>)
 8005b74:	4843      	ldr	r0, [pc, #268]	; (8005c84 <__multiply+0x14c>)
 8005b76:	f000 fc85 	bl	8006484 <__assert_func>
 8005b7a:	f100 0514 	add.w	r5, r0, #20
 8005b7e:	462b      	mov	r3, r5
 8005b80:	2200      	movs	r2, #0
 8005b82:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005b86:	4543      	cmp	r3, r8
 8005b88:	d321      	bcc.n	8005bce <__multiply+0x96>
 8005b8a:	f104 0314 	add.w	r3, r4, #20
 8005b8e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005b92:	f109 0314 	add.w	r3, r9, #20
 8005b96:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005b9a:	9202      	str	r2, [sp, #8]
 8005b9c:	1b3a      	subs	r2, r7, r4
 8005b9e:	3a15      	subs	r2, #21
 8005ba0:	f022 0203 	bic.w	r2, r2, #3
 8005ba4:	3204      	adds	r2, #4
 8005ba6:	f104 0115 	add.w	r1, r4, #21
 8005baa:	428f      	cmp	r7, r1
 8005bac:	bf38      	it	cc
 8005bae:	2204      	movcc	r2, #4
 8005bb0:	9201      	str	r2, [sp, #4]
 8005bb2:	9a02      	ldr	r2, [sp, #8]
 8005bb4:	9303      	str	r3, [sp, #12]
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	d80c      	bhi.n	8005bd4 <__multiply+0x9c>
 8005bba:	2e00      	cmp	r6, #0
 8005bbc:	dd03      	ble.n	8005bc6 <__multiply+0x8e>
 8005bbe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d05a      	beq.n	8005c7c <__multiply+0x144>
 8005bc6:	6106      	str	r6, [r0, #16]
 8005bc8:	b005      	add	sp, #20
 8005bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bce:	f843 2b04 	str.w	r2, [r3], #4
 8005bd2:	e7d8      	b.n	8005b86 <__multiply+0x4e>
 8005bd4:	f8b3 a000 	ldrh.w	sl, [r3]
 8005bd8:	f1ba 0f00 	cmp.w	sl, #0
 8005bdc:	d023      	beq.n	8005c26 <__multiply+0xee>
 8005bde:	46a9      	mov	r9, r5
 8005be0:	f04f 0c00 	mov.w	ip, #0
 8005be4:	f104 0e14 	add.w	lr, r4, #20
 8005be8:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005bec:	f8d9 1000 	ldr.w	r1, [r9]
 8005bf0:	fa1f fb82 	uxth.w	fp, r2
 8005bf4:	b289      	uxth	r1, r1
 8005bf6:	fb0a 110b 	mla	r1, sl, fp, r1
 8005bfa:	4461      	add	r1, ip
 8005bfc:	f8d9 c000 	ldr.w	ip, [r9]
 8005c00:	0c12      	lsrs	r2, r2, #16
 8005c02:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8005c06:	fb0a c202 	mla	r2, sl, r2, ip
 8005c0a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005c0e:	b289      	uxth	r1, r1
 8005c10:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c14:	4577      	cmp	r7, lr
 8005c16:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005c1a:	f849 1b04 	str.w	r1, [r9], #4
 8005c1e:	d8e3      	bhi.n	8005be8 <__multiply+0xb0>
 8005c20:	9a01      	ldr	r2, [sp, #4]
 8005c22:	f845 c002 	str.w	ip, [r5, r2]
 8005c26:	9a03      	ldr	r2, [sp, #12]
 8005c28:	3304      	adds	r3, #4
 8005c2a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005c2e:	f1b9 0f00 	cmp.w	r9, #0
 8005c32:	d021      	beq.n	8005c78 <__multiply+0x140>
 8005c34:	46ae      	mov	lr, r5
 8005c36:	f04f 0a00 	mov.w	sl, #0
 8005c3a:	6829      	ldr	r1, [r5, #0]
 8005c3c:	f104 0c14 	add.w	ip, r4, #20
 8005c40:	f8bc b000 	ldrh.w	fp, [ip]
 8005c44:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005c48:	b289      	uxth	r1, r1
 8005c4a:	fb09 220b 	mla	r2, r9, fp, r2
 8005c4e:	4452      	add	r2, sl
 8005c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005c54:	f84e 1b04 	str.w	r1, [lr], #4
 8005c58:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005c5c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c60:	f8be 1000 	ldrh.w	r1, [lr]
 8005c64:	4567      	cmp	r7, ip
 8005c66:	fb09 110a 	mla	r1, r9, sl, r1
 8005c6a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005c6e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005c72:	d8e5      	bhi.n	8005c40 <__multiply+0x108>
 8005c74:	9a01      	ldr	r2, [sp, #4]
 8005c76:	50a9      	str	r1, [r5, r2]
 8005c78:	3504      	adds	r5, #4
 8005c7a:	e79a      	b.n	8005bb2 <__multiply+0x7a>
 8005c7c:	3e01      	subs	r6, #1
 8005c7e:	e79c      	b.n	8005bba <__multiply+0x82>
 8005c80:	08007b99 	.word	0x08007b99
 8005c84:	08007baa 	.word	0x08007baa

08005c88 <__pow5mult>:
 8005c88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c8c:	4615      	mov	r5, r2
 8005c8e:	f012 0203 	ands.w	r2, r2, #3
 8005c92:	4606      	mov	r6, r0
 8005c94:	460f      	mov	r7, r1
 8005c96:	d007      	beq.n	8005ca8 <__pow5mult+0x20>
 8005c98:	4c25      	ldr	r4, [pc, #148]	; (8005d30 <__pow5mult+0xa8>)
 8005c9a:	3a01      	subs	r2, #1
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ca2:	f7ff fe9f 	bl	80059e4 <__multadd>
 8005ca6:	4607      	mov	r7, r0
 8005ca8:	10ad      	asrs	r5, r5, #2
 8005caa:	d03d      	beq.n	8005d28 <__pow5mult+0xa0>
 8005cac:	69f4      	ldr	r4, [r6, #28]
 8005cae:	b97c      	cbnz	r4, 8005cd0 <__pow5mult+0x48>
 8005cb0:	2010      	movs	r0, #16
 8005cb2:	f7ff fd81 	bl	80057b8 <malloc>
 8005cb6:	4602      	mov	r2, r0
 8005cb8:	61f0      	str	r0, [r6, #28]
 8005cba:	b928      	cbnz	r0, 8005cc8 <__pow5mult+0x40>
 8005cbc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005cc0:	4b1c      	ldr	r3, [pc, #112]	; (8005d34 <__pow5mult+0xac>)
 8005cc2:	481d      	ldr	r0, [pc, #116]	; (8005d38 <__pow5mult+0xb0>)
 8005cc4:	f000 fbde 	bl	8006484 <__assert_func>
 8005cc8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005ccc:	6004      	str	r4, [r0, #0]
 8005cce:	60c4      	str	r4, [r0, #12]
 8005cd0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005cd4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005cd8:	b94c      	cbnz	r4, 8005cee <__pow5mult+0x66>
 8005cda:	f240 2171 	movw	r1, #625	; 0x271
 8005cde:	4630      	mov	r0, r6
 8005ce0:	f7ff ff14 	bl	8005b0c <__i2b>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	f8c8 0008 	str.w	r0, [r8, #8]
 8005cec:	6003      	str	r3, [r0, #0]
 8005cee:	f04f 0900 	mov.w	r9, #0
 8005cf2:	07eb      	lsls	r3, r5, #31
 8005cf4:	d50a      	bpl.n	8005d0c <__pow5mult+0x84>
 8005cf6:	4639      	mov	r1, r7
 8005cf8:	4622      	mov	r2, r4
 8005cfa:	4630      	mov	r0, r6
 8005cfc:	f7ff ff1c 	bl	8005b38 <__multiply>
 8005d00:	4680      	mov	r8, r0
 8005d02:	4639      	mov	r1, r7
 8005d04:	4630      	mov	r0, r6
 8005d06:	f7ff fe4b 	bl	80059a0 <_Bfree>
 8005d0a:	4647      	mov	r7, r8
 8005d0c:	106d      	asrs	r5, r5, #1
 8005d0e:	d00b      	beq.n	8005d28 <__pow5mult+0xa0>
 8005d10:	6820      	ldr	r0, [r4, #0]
 8005d12:	b938      	cbnz	r0, 8005d24 <__pow5mult+0x9c>
 8005d14:	4622      	mov	r2, r4
 8005d16:	4621      	mov	r1, r4
 8005d18:	4630      	mov	r0, r6
 8005d1a:	f7ff ff0d 	bl	8005b38 <__multiply>
 8005d1e:	6020      	str	r0, [r4, #0]
 8005d20:	f8c0 9000 	str.w	r9, [r0]
 8005d24:	4604      	mov	r4, r0
 8005d26:	e7e4      	b.n	8005cf2 <__pow5mult+0x6a>
 8005d28:	4638      	mov	r0, r7
 8005d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d2e:	bf00      	nop
 8005d30:	08007cf8 	.word	0x08007cf8
 8005d34:	08007b2a 	.word	0x08007b2a
 8005d38:	08007baa 	.word	0x08007baa

08005d3c <__lshift>:
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	460c      	mov	r4, r1
 8005d42:	4607      	mov	r7, r0
 8005d44:	4691      	mov	r9, r2
 8005d46:	6923      	ldr	r3, [r4, #16]
 8005d48:	6849      	ldr	r1, [r1, #4]
 8005d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005d4e:	68a3      	ldr	r3, [r4, #8]
 8005d50:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005d54:	f108 0601 	add.w	r6, r8, #1
 8005d58:	42b3      	cmp	r3, r6
 8005d5a:	db0b      	blt.n	8005d74 <__lshift+0x38>
 8005d5c:	4638      	mov	r0, r7
 8005d5e:	f7ff fddf 	bl	8005920 <_Balloc>
 8005d62:	4605      	mov	r5, r0
 8005d64:	b948      	cbnz	r0, 8005d7a <__lshift+0x3e>
 8005d66:	4602      	mov	r2, r0
 8005d68:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005d6c:	4b27      	ldr	r3, [pc, #156]	; (8005e0c <__lshift+0xd0>)
 8005d6e:	4828      	ldr	r0, [pc, #160]	; (8005e10 <__lshift+0xd4>)
 8005d70:	f000 fb88 	bl	8006484 <__assert_func>
 8005d74:	3101      	adds	r1, #1
 8005d76:	005b      	lsls	r3, r3, #1
 8005d78:	e7ee      	b.n	8005d58 <__lshift+0x1c>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	f100 0114 	add.w	r1, r0, #20
 8005d80:	f100 0210 	add.w	r2, r0, #16
 8005d84:	4618      	mov	r0, r3
 8005d86:	4553      	cmp	r3, sl
 8005d88:	db33      	blt.n	8005df2 <__lshift+0xb6>
 8005d8a:	6920      	ldr	r0, [r4, #16]
 8005d8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005d90:	f104 0314 	add.w	r3, r4, #20
 8005d94:	f019 091f 	ands.w	r9, r9, #31
 8005d98:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005d9c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005da0:	d02b      	beq.n	8005dfa <__lshift+0xbe>
 8005da2:	468a      	mov	sl, r1
 8005da4:	2200      	movs	r2, #0
 8005da6:	f1c9 0e20 	rsb	lr, r9, #32
 8005daa:	6818      	ldr	r0, [r3, #0]
 8005dac:	fa00 f009 	lsl.w	r0, r0, r9
 8005db0:	4310      	orrs	r0, r2
 8005db2:	f84a 0b04 	str.w	r0, [sl], #4
 8005db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dba:	459c      	cmp	ip, r3
 8005dbc:	fa22 f20e 	lsr.w	r2, r2, lr
 8005dc0:	d8f3      	bhi.n	8005daa <__lshift+0x6e>
 8005dc2:	ebac 0304 	sub.w	r3, ip, r4
 8005dc6:	3b15      	subs	r3, #21
 8005dc8:	f023 0303 	bic.w	r3, r3, #3
 8005dcc:	3304      	adds	r3, #4
 8005dce:	f104 0015 	add.w	r0, r4, #21
 8005dd2:	4584      	cmp	ip, r0
 8005dd4:	bf38      	it	cc
 8005dd6:	2304      	movcc	r3, #4
 8005dd8:	50ca      	str	r2, [r1, r3]
 8005dda:	b10a      	cbz	r2, 8005de0 <__lshift+0xa4>
 8005ddc:	f108 0602 	add.w	r6, r8, #2
 8005de0:	3e01      	subs	r6, #1
 8005de2:	4638      	mov	r0, r7
 8005de4:	4621      	mov	r1, r4
 8005de6:	612e      	str	r6, [r5, #16]
 8005de8:	f7ff fdda 	bl	80059a0 <_Bfree>
 8005dec:	4628      	mov	r0, r5
 8005dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df2:	f842 0f04 	str.w	r0, [r2, #4]!
 8005df6:	3301      	adds	r3, #1
 8005df8:	e7c5      	b.n	8005d86 <__lshift+0x4a>
 8005dfa:	3904      	subs	r1, #4
 8005dfc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e00:	459c      	cmp	ip, r3
 8005e02:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e06:	d8f9      	bhi.n	8005dfc <__lshift+0xc0>
 8005e08:	e7ea      	b.n	8005de0 <__lshift+0xa4>
 8005e0a:	bf00      	nop
 8005e0c:	08007b99 	.word	0x08007b99
 8005e10:	08007baa 	.word	0x08007baa

08005e14 <__mcmp>:
 8005e14:	4603      	mov	r3, r0
 8005e16:	690a      	ldr	r2, [r1, #16]
 8005e18:	6900      	ldr	r0, [r0, #16]
 8005e1a:	b530      	push	{r4, r5, lr}
 8005e1c:	1a80      	subs	r0, r0, r2
 8005e1e:	d10d      	bne.n	8005e3c <__mcmp+0x28>
 8005e20:	3314      	adds	r3, #20
 8005e22:	3114      	adds	r1, #20
 8005e24:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005e28:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005e2c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005e30:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005e34:	4295      	cmp	r5, r2
 8005e36:	d002      	beq.n	8005e3e <__mcmp+0x2a>
 8005e38:	d304      	bcc.n	8005e44 <__mcmp+0x30>
 8005e3a:	2001      	movs	r0, #1
 8005e3c:	bd30      	pop	{r4, r5, pc}
 8005e3e:	42a3      	cmp	r3, r4
 8005e40:	d3f4      	bcc.n	8005e2c <__mcmp+0x18>
 8005e42:	e7fb      	b.n	8005e3c <__mcmp+0x28>
 8005e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e48:	e7f8      	b.n	8005e3c <__mcmp+0x28>
	...

08005e4c <__mdiff>:
 8005e4c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e50:	460d      	mov	r5, r1
 8005e52:	4607      	mov	r7, r0
 8005e54:	4611      	mov	r1, r2
 8005e56:	4628      	mov	r0, r5
 8005e58:	4614      	mov	r4, r2
 8005e5a:	f7ff ffdb 	bl	8005e14 <__mcmp>
 8005e5e:	1e06      	subs	r6, r0, #0
 8005e60:	d111      	bne.n	8005e86 <__mdiff+0x3a>
 8005e62:	4631      	mov	r1, r6
 8005e64:	4638      	mov	r0, r7
 8005e66:	f7ff fd5b 	bl	8005920 <_Balloc>
 8005e6a:	4602      	mov	r2, r0
 8005e6c:	b928      	cbnz	r0, 8005e7a <__mdiff+0x2e>
 8005e6e:	f240 2137 	movw	r1, #567	; 0x237
 8005e72:	4b3a      	ldr	r3, [pc, #232]	; (8005f5c <__mdiff+0x110>)
 8005e74:	483a      	ldr	r0, [pc, #232]	; (8005f60 <__mdiff+0x114>)
 8005e76:	f000 fb05 	bl	8006484 <__assert_func>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8005e80:	4610      	mov	r0, r2
 8005e82:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e86:	bfa4      	itt	ge
 8005e88:	4623      	movge	r3, r4
 8005e8a:	462c      	movge	r4, r5
 8005e8c:	4638      	mov	r0, r7
 8005e8e:	6861      	ldr	r1, [r4, #4]
 8005e90:	bfa6      	itte	ge
 8005e92:	461d      	movge	r5, r3
 8005e94:	2600      	movge	r6, #0
 8005e96:	2601      	movlt	r6, #1
 8005e98:	f7ff fd42 	bl	8005920 <_Balloc>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	b918      	cbnz	r0, 8005ea8 <__mdiff+0x5c>
 8005ea0:	f240 2145 	movw	r1, #581	; 0x245
 8005ea4:	4b2d      	ldr	r3, [pc, #180]	; (8005f5c <__mdiff+0x110>)
 8005ea6:	e7e5      	b.n	8005e74 <__mdiff+0x28>
 8005ea8:	f102 0814 	add.w	r8, r2, #20
 8005eac:	46c2      	mov	sl, r8
 8005eae:	f04f 0c00 	mov.w	ip, #0
 8005eb2:	6927      	ldr	r7, [r4, #16]
 8005eb4:	60c6      	str	r6, [r0, #12]
 8005eb6:	692e      	ldr	r6, [r5, #16]
 8005eb8:	f104 0014 	add.w	r0, r4, #20
 8005ebc:	f105 0914 	add.w	r9, r5, #20
 8005ec0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8005ec4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005ec8:	3410      	adds	r4, #16
 8005eca:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8005ece:	f859 3b04 	ldr.w	r3, [r9], #4
 8005ed2:	fa1f f18b 	uxth.w	r1, fp
 8005ed6:	4461      	add	r1, ip
 8005ed8:	fa1f fc83 	uxth.w	ip, r3
 8005edc:	0c1b      	lsrs	r3, r3, #16
 8005ede:	eba1 010c 	sub.w	r1, r1, ip
 8005ee2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005ee6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005eea:	b289      	uxth	r1, r1
 8005eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8005ef0:	454e      	cmp	r6, r9
 8005ef2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005ef6:	f84a 1b04 	str.w	r1, [sl], #4
 8005efa:	d8e6      	bhi.n	8005eca <__mdiff+0x7e>
 8005efc:	1b73      	subs	r3, r6, r5
 8005efe:	3b15      	subs	r3, #21
 8005f00:	f023 0303 	bic.w	r3, r3, #3
 8005f04:	3515      	adds	r5, #21
 8005f06:	3304      	adds	r3, #4
 8005f08:	42ae      	cmp	r6, r5
 8005f0a:	bf38      	it	cc
 8005f0c:	2304      	movcc	r3, #4
 8005f0e:	4418      	add	r0, r3
 8005f10:	4443      	add	r3, r8
 8005f12:	461e      	mov	r6, r3
 8005f14:	4605      	mov	r5, r0
 8005f16:	4575      	cmp	r5, lr
 8005f18:	d30e      	bcc.n	8005f38 <__mdiff+0xec>
 8005f1a:	f10e 0103 	add.w	r1, lr, #3
 8005f1e:	1a09      	subs	r1, r1, r0
 8005f20:	f021 0103 	bic.w	r1, r1, #3
 8005f24:	3803      	subs	r0, #3
 8005f26:	4586      	cmp	lr, r0
 8005f28:	bf38      	it	cc
 8005f2a:	2100      	movcc	r1, #0
 8005f2c:	440b      	add	r3, r1
 8005f2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005f32:	b189      	cbz	r1, 8005f58 <__mdiff+0x10c>
 8005f34:	6117      	str	r7, [r2, #16]
 8005f36:	e7a3      	b.n	8005e80 <__mdiff+0x34>
 8005f38:	f855 8b04 	ldr.w	r8, [r5], #4
 8005f3c:	fa1f f188 	uxth.w	r1, r8
 8005f40:	4461      	add	r1, ip
 8005f42:	140c      	asrs	r4, r1, #16
 8005f44:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8005f48:	b289      	uxth	r1, r1
 8005f4a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005f4e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8005f52:	f846 1b04 	str.w	r1, [r6], #4
 8005f56:	e7de      	b.n	8005f16 <__mdiff+0xca>
 8005f58:	3f01      	subs	r7, #1
 8005f5a:	e7e8      	b.n	8005f2e <__mdiff+0xe2>
 8005f5c:	08007b99 	.word	0x08007b99
 8005f60:	08007baa 	.word	0x08007baa

08005f64 <__d2b>:
 8005f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f66:	2101      	movs	r1, #1
 8005f68:	4617      	mov	r7, r2
 8005f6a:	461c      	mov	r4, r3
 8005f6c:	9e08      	ldr	r6, [sp, #32]
 8005f6e:	f7ff fcd7 	bl	8005920 <_Balloc>
 8005f72:	4605      	mov	r5, r0
 8005f74:	b930      	cbnz	r0, 8005f84 <__d2b+0x20>
 8005f76:	4602      	mov	r2, r0
 8005f78:	f240 310f 	movw	r1, #783	; 0x30f
 8005f7c:	4b22      	ldr	r3, [pc, #136]	; (8006008 <__d2b+0xa4>)
 8005f7e:	4823      	ldr	r0, [pc, #140]	; (800600c <__d2b+0xa8>)
 8005f80:	f000 fa80 	bl	8006484 <__assert_func>
 8005f84:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8005f88:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8005f8c:	bb24      	cbnz	r4, 8005fd8 <__d2b+0x74>
 8005f8e:	2f00      	cmp	r7, #0
 8005f90:	9301      	str	r3, [sp, #4]
 8005f92:	d026      	beq.n	8005fe2 <__d2b+0x7e>
 8005f94:	4668      	mov	r0, sp
 8005f96:	9700      	str	r7, [sp, #0]
 8005f98:	f7ff fd8a 	bl	8005ab0 <__lo0bits>
 8005f9c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005fa0:	b1e8      	cbz	r0, 8005fde <__d2b+0x7a>
 8005fa2:	f1c0 0320 	rsb	r3, r0, #32
 8005fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8005faa:	430b      	orrs	r3, r1
 8005fac:	40c2      	lsrs	r2, r0
 8005fae:	616b      	str	r3, [r5, #20]
 8005fb0:	9201      	str	r2, [sp, #4]
 8005fb2:	9b01      	ldr	r3, [sp, #4]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	bf14      	ite	ne
 8005fb8:	2102      	movne	r1, #2
 8005fba:	2101      	moveq	r1, #1
 8005fbc:	61ab      	str	r3, [r5, #24]
 8005fbe:	6129      	str	r1, [r5, #16]
 8005fc0:	b1bc      	cbz	r4, 8005ff2 <__d2b+0x8e>
 8005fc2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8005fc6:	4404      	add	r4, r0
 8005fc8:	6034      	str	r4, [r6, #0]
 8005fca:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8005fce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005fd0:	6018      	str	r0, [r3, #0]
 8005fd2:	4628      	mov	r0, r5
 8005fd4:	b003      	add	sp, #12
 8005fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fdc:	e7d7      	b.n	8005f8e <__d2b+0x2a>
 8005fde:	6169      	str	r1, [r5, #20]
 8005fe0:	e7e7      	b.n	8005fb2 <__d2b+0x4e>
 8005fe2:	a801      	add	r0, sp, #4
 8005fe4:	f7ff fd64 	bl	8005ab0 <__lo0bits>
 8005fe8:	9b01      	ldr	r3, [sp, #4]
 8005fea:	2101      	movs	r1, #1
 8005fec:	616b      	str	r3, [r5, #20]
 8005fee:	3020      	adds	r0, #32
 8005ff0:	e7e5      	b.n	8005fbe <__d2b+0x5a>
 8005ff2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8005ff6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 8005ffa:	6030      	str	r0, [r6, #0]
 8005ffc:	6918      	ldr	r0, [r3, #16]
 8005ffe:	f7ff fd37 	bl	8005a70 <__hi0bits>
 8006002:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8006006:	e7e2      	b.n	8005fce <__d2b+0x6a>
 8006008:	08007b99 	.word	0x08007b99
 800600c:	08007baa 	.word	0x08007baa

08006010 <__ssputs_r>:
 8006010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006014:	461f      	mov	r7, r3
 8006016:	688e      	ldr	r6, [r1, #8]
 8006018:	4682      	mov	sl, r0
 800601a:	42be      	cmp	r6, r7
 800601c:	460c      	mov	r4, r1
 800601e:	4690      	mov	r8, r2
 8006020:	680b      	ldr	r3, [r1, #0]
 8006022:	d82c      	bhi.n	800607e <__ssputs_r+0x6e>
 8006024:	898a      	ldrh	r2, [r1, #12]
 8006026:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800602a:	d026      	beq.n	800607a <__ssputs_r+0x6a>
 800602c:	6965      	ldr	r5, [r4, #20]
 800602e:	6909      	ldr	r1, [r1, #16]
 8006030:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006034:	eba3 0901 	sub.w	r9, r3, r1
 8006038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800603c:	1c7b      	adds	r3, r7, #1
 800603e:	444b      	add	r3, r9
 8006040:	106d      	asrs	r5, r5, #1
 8006042:	429d      	cmp	r5, r3
 8006044:	bf38      	it	cc
 8006046:	461d      	movcc	r5, r3
 8006048:	0553      	lsls	r3, r2, #21
 800604a:	d527      	bpl.n	800609c <__ssputs_r+0x8c>
 800604c:	4629      	mov	r1, r5
 800604e:	f7ff fbdb 	bl	8005808 <_malloc_r>
 8006052:	4606      	mov	r6, r0
 8006054:	b360      	cbz	r0, 80060b0 <__ssputs_r+0xa0>
 8006056:	464a      	mov	r2, r9
 8006058:	6921      	ldr	r1, [r4, #16]
 800605a:	f000 fa05 	bl	8006468 <memcpy>
 800605e:	89a3      	ldrh	r3, [r4, #12]
 8006060:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006068:	81a3      	strh	r3, [r4, #12]
 800606a:	6126      	str	r6, [r4, #16]
 800606c:	444e      	add	r6, r9
 800606e:	6026      	str	r6, [r4, #0]
 8006070:	463e      	mov	r6, r7
 8006072:	6165      	str	r5, [r4, #20]
 8006074:	eba5 0509 	sub.w	r5, r5, r9
 8006078:	60a5      	str	r5, [r4, #8]
 800607a:	42be      	cmp	r6, r7
 800607c:	d900      	bls.n	8006080 <__ssputs_r+0x70>
 800607e:	463e      	mov	r6, r7
 8006080:	4632      	mov	r2, r6
 8006082:	4641      	mov	r1, r8
 8006084:	6820      	ldr	r0, [r4, #0]
 8006086:	f000 f9c5 	bl	8006414 <memmove>
 800608a:	2000      	movs	r0, #0
 800608c:	68a3      	ldr	r3, [r4, #8]
 800608e:	1b9b      	subs	r3, r3, r6
 8006090:	60a3      	str	r3, [r4, #8]
 8006092:	6823      	ldr	r3, [r4, #0]
 8006094:	4433      	add	r3, r6
 8006096:	6023      	str	r3, [r4, #0]
 8006098:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800609c:	462a      	mov	r2, r5
 800609e:	f000 fa35 	bl	800650c <_realloc_r>
 80060a2:	4606      	mov	r6, r0
 80060a4:	2800      	cmp	r0, #0
 80060a6:	d1e0      	bne.n	800606a <__ssputs_r+0x5a>
 80060a8:	4650      	mov	r0, sl
 80060aa:	6921      	ldr	r1, [r4, #16]
 80060ac:	f7ff fb3c 	bl	8005728 <_free_r>
 80060b0:	230c      	movs	r3, #12
 80060b2:	f8ca 3000 	str.w	r3, [sl]
 80060b6:	89a3      	ldrh	r3, [r4, #12]
 80060b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80060c0:	81a3      	strh	r3, [r4, #12]
 80060c2:	e7e9      	b.n	8006098 <__ssputs_r+0x88>

080060c4 <_svfiprintf_r>:
 80060c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060c8:	4698      	mov	r8, r3
 80060ca:	898b      	ldrh	r3, [r1, #12]
 80060cc:	4607      	mov	r7, r0
 80060ce:	061b      	lsls	r3, r3, #24
 80060d0:	460d      	mov	r5, r1
 80060d2:	4614      	mov	r4, r2
 80060d4:	b09d      	sub	sp, #116	; 0x74
 80060d6:	d50e      	bpl.n	80060f6 <_svfiprintf_r+0x32>
 80060d8:	690b      	ldr	r3, [r1, #16]
 80060da:	b963      	cbnz	r3, 80060f6 <_svfiprintf_r+0x32>
 80060dc:	2140      	movs	r1, #64	; 0x40
 80060de:	f7ff fb93 	bl	8005808 <_malloc_r>
 80060e2:	6028      	str	r0, [r5, #0]
 80060e4:	6128      	str	r0, [r5, #16]
 80060e6:	b920      	cbnz	r0, 80060f2 <_svfiprintf_r+0x2e>
 80060e8:	230c      	movs	r3, #12
 80060ea:	603b      	str	r3, [r7, #0]
 80060ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80060f0:	e0d0      	b.n	8006294 <_svfiprintf_r+0x1d0>
 80060f2:	2340      	movs	r3, #64	; 0x40
 80060f4:	616b      	str	r3, [r5, #20]
 80060f6:	2300      	movs	r3, #0
 80060f8:	9309      	str	r3, [sp, #36]	; 0x24
 80060fa:	2320      	movs	r3, #32
 80060fc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006100:	2330      	movs	r3, #48	; 0x30
 8006102:	f04f 0901 	mov.w	r9, #1
 8006106:	f8cd 800c 	str.w	r8, [sp, #12]
 800610a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80062ac <_svfiprintf_r+0x1e8>
 800610e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006112:	4623      	mov	r3, r4
 8006114:	469a      	mov	sl, r3
 8006116:	f813 2b01 	ldrb.w	r2, [r3], #1
 800611a:	b10a      	cbz	r2, 8006120 <_svfiprintf_r+0x5c>
 800611c:	2a25      	cmp	r2, #37	; 0x25
 800611e:	d1f9      	bne.n	8006114 <_svfiprintf_r+0x50>
 8006120:	ebba 0b04 	subs.w	fp, sl, r4
 8006124:	d00b      	beq.n	800613e <_svfiprintf_r+0x7a>
 8006126:	465b      	mov	r3, fp
 8006128:	4622      	mov	r2, r4
 800612a:	4629      	mov	r1, r5
 800612c:	4638      	mov	r0, r7
 800612e:	f7ff ff6f 	bl	8006010 <__ssputs_r>
 8006132:	3001      	adds	r0, #1
 8006134:	f000 80a9 	beq.w	800628a <_svfiprintf_r+0x1c6>
 8006138:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800613a:	445a      	add	r2, fp
 800613c:	9209      	str	r2, [sp, #36]	; 0x24
 800613e:	f89a 3000 	ldrb.w	r3, [sl]
 8006142:	2b00      	cmp	r3, #0
 8006144:	f000 80a1 	beq.w	800628a <_svfiprintf_r+0x1c6>
 8006148:	2300      	movs	r3, #0
 800614a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800614e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006152:	f10a 0a01 	add.w	sl, sl, #1
 8006156:	9304      	str	r3, [sp, #16]
 8006158:	9307      	str	r3, [sp, #28]
 800615a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800615e:	931a      	str	r3, [sp, #104]	; 0x68
 8006160:	4654      	mov	r4, sl
 8006162:	2205      	movs	r2, #5
 8006164:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006168:	4850      	ldr	r0, [pc, #320]	; (80062ac <_svfiprintf_r+0x1e8>)
 800616a:	f7fe fc5f 	bl	8004a2c <memchr>
 800616e:	9a04      	ldr	r2, [sp, #16]
 8006170:	b9d8      	cbnz	r0, 80061aa <_svfiprintf_r+0xe6>
 8006172:	06d0      	lsls	r0, r2, #27
 8006174:	bf44      	itt	mi
 8006176:	2320      	movmi	r3, #32
 8006178:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800617c:	0711      	lsls	r1, r2, #28
 800617e:	bf44      	itt	mi
 8006180:	232b      	movmi	r3, #43	; 0x2b
 8006182:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006186:	f89a 3000 	ldrb.w	r3, [sl]
 800618a:	2b2a      	cmp	r3, #42	; 0x2a
 800618c:	d015      	beq.n	80061ba <_svfiprintf_r+0xf6>
 800618e:	4654      	mov	r4, sl
 8006190:	2000      	movs	r0, #0
 8006192:	f04f 0c0a 	mov.w	ip, #10
 8006196:	9a07      	ldr	r2, [sp, #28]
 8006198:	4621      	mov	r1, r4
 800619a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800619e:	3b30      	subs	r3, #48	; 0x30
 80061a0:	2b09      	cmp	r3, #9
 80061a2:	d94d      	bls.n	8006240 <_svfiprintf_r+0x17c>
 80061a4:	b1b0      	cbz	r0, 80061d4 <_svfiprintf_r+0x110>
 80061a6:	9207      	str	r2, [sp, #28]
 80061a8:	e014      	b.n	80061d4 <_svfiprintf_r+0x110>
 80061aa:	eba0 0308 	sub.w	r3, r0, r8
 80061ae:	fa09 f303 	lsl.w	r3, r9, r3
 80061b2:	4313      	orrs	r3, r2
 80061b4:	46a2      	mov	sl, r4
 80061b6:	9304      	str	r3, [sp, #16]
 80061b8:	e7d2      	b.n	8006160 <_svfiprintf_r+0x9c>
 80061ba:	9b03      	ldr	r3, [sp, #12]
 80061bc:	1d19      	adds	r1, r3, #4
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	9103      	str	r1, [sp, #12]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	bfbb      	ittet	lt
 80061c6:	425b      	neglt	r3, r3
 80061c8:	f042 0202 	orrlt.w	r2, r2, #2
 80061cc:	9307      	strge	r3, [sp, #28]
 80061ce:	9307      	strlt	r3, [sp, #28]
 80061d0:	bfb8      	it	lt
 80061d2:	9204      	strlt	r2, [sp, #16]
 80061d4:	7823      	ldrb	r3, [r4, #0]
 80061d6:	2b2e      	cmp	r3, #46	; 0x2e
 80061d8:	d10c      	bne.n	80061f4 <_svfiprintf_r+0x130>
 80061da:	7863      	ldrb	r3, [r4, #1]
 80061dc:	2b2a      	cmp	r3, #42	; 0x2a
 80061de:	d134      	bne.n	800624a <_svfiprintf_r+0x186>
 80061e0:	9b03      	ldr	r3, [sp, #12]
 80061e2:	3402      	adds	r4, #2
 80061e4:	1d1a      	adds	r2, r3, #4
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	9203      	str	r2, [sp, #12]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	bfb8      	it	lt
 80061ee:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80061f2:	9305      	str	r3, [sp, #20]
 80061f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80062b0 <_svfiprintf_r+0x1ec>
 80061f8:	2203      	movs	r2, #3
 80061fa:	4650      	mov	r0, sl
 80061fc:	7821      	ldrb	r1, [r4, #0]
 80061fe:	f7fe fc15 	bl	8004a2c <memchr>
 8006202:	b138      	cbz	r0, 8006214 <_svfiprintf_r+0x150>
 8006204:	2240      	movs	r2, #64	; 0x40
 8006206:	9b04      	ldr	r3, [sp, #16]
 8006208:	eba0 000a 	sub.w	r0, r0, sl
 800620c:	4082      	lsls	r2, r0
 800620e:	4313      	orrs	r3, r2
 8006210:	3401      	adds	r4, #1
 8006212:	9304      	str	r3, [sp, #16]
 8006214:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006218:	2206      	movs	r2, #6
 800621a:	4826      	ldr	r0, [pc, #152]	; (80062b4 <_svfiprintf_r+0x1f0>)
 800621c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006220:	f7fe fc04 	bl	8004a2c <memchr>
 8006224:	2800      	cmp	r0, #0
 8006226:	d038      	beq.n	800629a <_svfiprintf_r+0x1d6>
 8006228:	4b23      	ldr	r3, [pc, #140]	; (80062b8 <_svfiprintf_r+0x1f4>)
 800622a:	bb1b      	cbnz	r3, 8006274 <_svfiprintf_r+0x1b0>
 800622c:	9b03      	ldr	r3, [sp, #12]
 800622e:	3307      	adds	r3, #7
 8006230:	f023 0307 	bic.w	r3, r3, #7
 8006234:	3308      	adds	r3, #8
 8006236:	9303      	str	r3, [sp, #12]
 8006238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800623a:	4433      	add	r3, r6
 800623c:	9309      	str	r3, [sp, #36]	; 0x24
 800623e:	e768      	b.n	8006112 <_svfiprintf_r+0x4e>
 8006240:	460c      	mov	r4, r1
 8006242:	2001      	movs	r0, #1
 8006244:	fb0c 3202 	mla	r2, ip, r2, r3
 8006248:	e7a6      	b.n	8006198 <_svfiprintf_r+0xd4>
 800624a:	2300      	movs	r3, #0
 800624c:	f04f 0c0a 	mov.w	ip, #10
 8006250:	4619      	mov	r1, r3
 8006252:	3401      	adds	r4, #1
 8006254:	9305      	str	r3, [sp, #20]
 8006256:	4620      	mov	r0, r4
 8006258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800625c:	3a30      	subs	r2, #48	; 0x30
 800625e:	2a09      	cmp	r2, #9
 8006260:	d903      	bls.n	800626a <_svfiprintf_r+0x1a6>
 8006262:	2b00      	cmp	r3, #0
 8006264:	d0c6      	beq.n	80061f4 <_svfiprintf_r+0x130>
 8006266:	9105      	str	r1, [sp, #20]
 8006268:	e7c4      	b.n	80061f4 <_svfiprintf_r+0x130>
 800626a:	4604      	mov	r4, r0
 800626c:	2301      	movs	r3, #1
 800626e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006272:	e7f0      	b.n	8006256 <_svfiprintf_r+0x192>
 8006274:	ab03      	add	r3, sp, #12
 8006276:	9300      	str	r3, [sp, #0]
 8006278:	462a      	mov	r2, r5
 800627a:	4638      	mov	r0, r7
 800627c:	4b0f      	ldr	r3, [pc, #60]	; (80062bc <_svfiprintf_r+0x1f8>)
 800627e:	a904      	add	r1, sp, #16
 8006280:	f7fd fe80 	bl	8003f84 <_printf_float>
 8006284:	1c42      	adds	r2, r0, #1
 8006286:	4606      	mov	r6, r0
 8006288:	d1d6      	bne.n	8006238 <_svfiprintf_r+0x174>
 800628a:	89ab      	ldrh	r3, [r5, #12]
 800628c:	065b      	lsls	r3, r3, #25
 800628e:	f53f af2d 	bmi.w	80060ec <_svfiprintf_r+0x28>
 8006292:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006294:	b01d      	add	sp, #116	; 0x74
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	ab03      	add	r3, sp, #12
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	462a      	mov	r2, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	4b06      	ldr	r3, [pc, #24]	; (80062bc <_svfiprintf_r+0x1f8>)
 80062a4:	a904      	add	r1, sp, #16
 80062a6:	f7fe f90d 	bl	80044c4 <_printf_i>
 80062aa:	e7eb      	b.n	8006284 <_svfiprintf_r+0x1c0>
 80062ac:	08007d04 	.word	0x08007d04
 80062b0:	08007d0a 	.word	0x08007d0a
 80062b4:	08007d0e 	.word	0x08007d0e
 80062b8:	08003f85 	.word	0x08003f85
 80062bc:	08006011 	.word	0x08006011

080062c0 <__sflush_r>:
 80062c0:	898a      	ldrh	r2, [r1, #12]
 80062c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062c4:	4605      	mov	r5, r0
 80062c6:	0710      	lsls	r0, r2, #28
 80062c8:	460c      	mov	r4, r1
 80062ca:	d457      	bmi.n	800637c <__sflush_r+0xbc>
 80062cc:	684b      	ldr	r3, [r1, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	dc04      	bgt.n	80062dc <__sflush_r+0x1c>
 80062d2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	dc01      	bgt.n	80062dc <__sflush_r+0x1c>
 80062d8:	2000      	movs	r0, #0
 80062da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80062de:	2e00      	cmp	r6, #0
 80062e0:	d0fa      	beq.n	80062d8 <__sflush_r+0x18>
 80062e2:	2300      	movs	r3, #0
 80062e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80062e8:	682f      	ldr	r7, [r5, #0]
 80062ea:	6a21      	ldr	r1, [r4, #32]
 80062ec:	602b      	str	r3, [r5, #0]
 80062ee:	d032      	beq.n	8006356 <__sflush_r+0x96>
 80062f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80062f2:	89a3      	ldrh	r3, [r4, #12]
 80062f4:	075a      	lsls	r2, r3, #29
 80062f6:	d505      	bpl.n	8006304 <__sflush_r+0x44>
 80062f8:	6863      	ldr	r3, [r4, #4]
 80062fa:	1ac0      	subs	r0, r0, r3
 80062fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80062fe:	b10b      	cbz	r3, 8006304 <__sflush_r+0x44>
 8006300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006302:	1ac0      	subs	r0, r0, r3
 8006304:	2300      	movs	r3, #0
 8006306:	4602      	mov	r2, r0
 8006308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800630a:	4628      	mov	r0, r5
 800630c:	6a21      	ldr	r1, [r4, #32]
 800630e:	47b0      	blx	r6
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	89a3      	ldrh	r3, [r4, #12]
 8006314:	d106      	bne.n	8006324 <__sflush_r+0x64>
 8006316:	6829      	ldr	r1, [r5, #0]
 8006318:	291d      	cmp	r1, #29
 800631a:	d82b      	bhi.n	8006374 <__sflush_r+0xb4>
 800631c:	4a28      	ldr	r2, [pc, #160]	; (80063c0 <__sflush_r+0x100>)
 800631e:	410a      	asrs	r2, r1
 8006320:	07d6      	lsls	r6, r2, #31
 8006322:	d427      	bmi.n	8006374 <__sflush_r+0xb4>
 8006324:	2200      	movs	r2, #0
 8006326:	6062      	str	r2, [r4, #4]
 8006328:	6922      	ldr	r2, [r4, #16]
 800632a:	04d9      	lsls	r1, r3, #19
 800632c:	6022      	str	r2, [r4, #0]
 800632e:	d504      	bpl.n	800633a <__sflush_r+0x7a>
 8006330:	1c42      	adds	r2, r0, #1
 8006332:	d101      	bne.n	8006338 <__sflush_r+0x78>
 8006334:	682b      	ldr	r3, [r5, #0]
 8006336:	b903      	cbnz	r3, 800633a <__sflush_r+0x7a>
 8006338:	6560      	str	r0, [r4, #84]	; 0x54
 800633a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800633c:	602f      	str	r7, [r5, #0]
 800633e:	2900      	cmp	r1, #0
 8006340:	d0ca      	beq.n	80062d8 <__sflush_r+0x18>
 8006342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006346:	4299      	cmp	r1, r3
 8006348:	d002      	beq.n	8006350 <__sflush_r+0x90>
 800634a:	4628      	mov	r0, r5
 800634c:	f7ff f9ec 	bl	8005728 <_free_r>
 8006350:	2000      	movs	r0, #0
 8006352:	6360      	str	r0, [r4, #52]	; 0x34
 8006354:	e7c1      	b.n	80062da <__sflush_r+0x1a>
 8006356:	2301      	movs	r3, #1
 8006358:	4628      	mov	r0, r5
 800635a:	47b0      	blx	r6
 800635c:	1c41      	adds	r1, r0, #1
 800635e:	d1c8      	bne.n	80062f2 <__sflush_r+0x32>
 8006360:	682b      	ldr	r3, [r5, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d0c5      	beq.n	80062f2 <__sflush_r+0x32>
 8006366:	2b1d      	cmp	r3, #29
 8006368:	d001      	beq.n	800636e <__sflush_r+0xae>
 800636a:	2b16      	cmp	r3, #22
 800636c:	d101      	bne.n	8006372 <__sflush_r+0xb2>
 800636e:	602f      	str	r7, [r5, #0]
 8006370:	e7b2      	b.n	80062d8 <__sflush_r+0x18>
 8006372:	89a3      	ldrh	r3, [r4, #12]
 8006374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006378:	81a3      	strh	r3, [r4, #12]
 800637a:	e7ae      	b.n	80062da <__sflush_r+0x1a>
 800637c:	690f      	ldr	r7, [r1, #16]
 800637e:	2f00      	cmp	r7, #0
 8006380:	d0aa      	beq.n	80062d8 <__sflush_r+0x18>
 8006382:	0793      	lsls	r3, r2, #30
 8006384:	bf18      	it	ne
 8006386:	2300      	movne	r3, #0
 8006388:	680e      	ldr	r6, [r1, #0]
 800638a:	bf08      	it	eq
 800638c:	694b      	ldreq	r3, [r1, #20]
 800638e:	1bf6      	subs	r6, r6, r7
 8006390:	600f      	str	r7, [r1, #0]
 8006392:	608b      	str	r3, [r1, #8]
 8006394:	2e00      	cmp	r6, #0
 8006396:	dd9f      	ble.n	80062d8 <__sflush_r+0x18>
 8006398:	4633      	mov	r3, r6
 800639a:	463a      	mov	r2, r7
 800639c:	4628      	mov	r0, r5
 800639e:	6a21      	ldr	r1, [r4, #32]
 80063a0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80063a4:	47e0      	blx	ip
 80063a6:	2800      	cmp	r0, #0
 80063a8:	dc06      	bgt.n	80063b8 <__sflush_r+0xf8>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80063b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063b4:	81a3      	strh	r3, [r4, #12]
 80063b6:	e790      	b.n	80062da <__sflush_r+0x1a>
 80063b8:	4407      	add	r7, r0
 80063ba:	1a36      	subs	r6, r6, r0
 80063bc:	e7ea      	b.n	8006394 <__sflush_r+0xd4>
 80063be:	bf00      	nop
 80063c0:	dfbffffe 	.word	0xdfbffffe

080063c4 <_fflush_r>:
 80063c4:	b538      	push	{r3, r4, r5, lr}
 80063c6:	690b      	ldr	r3, [r1, #16]
 80063c8:	4605      	mov	r5, r0
 80063ca:	460c      	mov	r4, r1
 80063cc:	b913      	cbnz	r3, 80063d4 <_fflush_r+0x10>
 80063ce:	2500      	movs	r5, #0
 80063d0:	4628      	mov	r0, r5
 80063d2:	bd38      	pop	{r3, r4, r5, pc}
 80063d4:	b118      	cbz	r0, 80063de <_fflush_r+0x1a>
 80063d6:	6a03      	ldr	r3, [r0, #32]
 80063d8:	b90b      	cbnz	r3, 80063de <_fflush_r+0x1a>
 80063da:	f7fe fa0f 	bl	80047fc <__sinit>
 80063de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d0f3      	beq.n	80063ce <_fflush_r+0xa>
 80063e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80063e8:	07d0      	lsls	r0, r2, #31
 80063ea:	d404      	bmi.n	80063f6 <_fflush_r+0x32>
 80063ec:	0599      	lsls	r1, r3, #22
 80063ee:	d402      	bmi.n	80063f6 <_fflush_r+0x32>
 80063f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063f2:	f7fe fb19 	bl	8004a28 <__retarget_lock_acquire_recursive>
 80063f6:	4628      	mov	r0, r5
 80063f8:	4621      	mov	r1, r4
 80063fa:	f7ff ff61 	bl	80062c0 <__sflush_r>
 80063fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006400:	4605      	mov	r5, r0
 8006402:	07da      	lsls	r2, r3, #31
 8006404:	d4e4      	bmi.n	80063d0 <_fflush_r+0xc>
 8006406:	89a3      	ldrh	r3, [r4, #12]
 8006408:	059b      	lsls	r3, r3, #22
 800640a:	d4e1      	bmi.n	80063d0 <_fflush_r+0xc>
 800640c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800640e:	f7fe fb0c 	bl	8004a2a <__retarget_lock_release_recursive>
 8006412:	e7dd      	b.n	80063d0 <_fflush_r+0xc>

08006414 <memmove>:
 8006414:	4288      	cmp	r0, r1
 8006416:	b510      	push	{r4, lr}
 8006418:	eb01 0402 	add.w	r4, r1, r2
 800641c:	d902      	bls.n	8006424 <memmove+0x10>
 800641e:	4284      	cmp	r4, r0
 8006420:	4623      	mov	r3, r4
 8006422:	d807      	bhi.n	8006434 <memmove+0x20>
 8006424:	1e43      	subs	r3, r0, #1
 8006426:	42a1      	cmp	r1, r4
 8006428:	d008      	beq.n	800643c <memmove+0x28>
 800642a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800642e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006432:	e7f8      	b.n	8006426 <memmove+0x12>
 8006434:	4601      	mov	r1, r0
 8006436:	4402      	add	r2, r0
 8006438:	428a      	cmp	r2, r1
 800643a:	d100      	bne.n	800643e <memmove+0x2a>
 800643c:	bd10      	pop	{r4, pc}
 800643e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006442:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006446:	e7f7      	b.n	8006438 <memmove+0x24>

08006448 <_sbrk_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	2300      	movs	r3, #0
 800644c:	4d05      	ldr	r5, [pc, #20]	; (8006464 <_sbrk_r+0x1c>)
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	f7fb fda4 	bl	8001fa0 <_sbrk>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_sbrk_r+0x1a>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_sbrk_r+0x1a>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	20000968 	.word	0x20000968

08006468 <memcpy>:
 8006468:	440a      	add	r2, r1
 800646a:	4291      	cmp	r1, r2
 800646c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006470:	d100      	bne.n	8006474 <memcpy+0xc>
 8006472:	4770      	bx	lr
 8006474:	b510      	push	{r4, lr}
 8006476:	f811 4b01 	ldrb.w	r4, [r1], #1
 800647a:	4291      	cmp	r1, r2
 800647c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006480:	d1f9      	bne.n	8006476 <memcpy+0xe>
 8006482:	bd10      	pop	{r4, pc}

08006484 <__assert_func>:
 8006484:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006486:	4614      	mov	r4, r2
 8006488:	461a      	mov	r2, r3
 800648a:	4b09      	ldr	r3, [pc, #36]	; (80064b0 <__assert_func+0x2c>)
 800648c:	4605      	mov	r5, r0
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68d8      	ldr	r0, [r3, #12]
 8006492:	b14c      	cbz	r4, 80064a8 <__assert_func+0x24>
 8006494:	4b07      	ldr	r3, [pc, #28]	; (80064b4 <__assert_func+0x30>)
 8006496:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800649a:	9100      	str	r1, [sp, #0]
 800649c:	462b      	mov	r3, r5
 800649e:	4906      	ldr	r1, [pc, #24]	; (80064b8 <__assert_func+0x34>)
 80064a0:	f000 f870 	bl	8006584 <fiprintf>
 80064a4:	f000 f880 	bl	80065a8 <abort>
 80064a8:	4b04      	ldr	r3, [pc, #16]	; (80064bc <__assert_func+0x38>)
 80064aa:	461c      	mov	r4, r3
 80064ac:	e7f3      	b.n	8006496 <__assert_func+0x12>
 80064ae:	bf00      	nop
 80064b0:	2000006c 	.word	0x2000006c
 80064b4:	08007d1f 	.word	0x08007d1f
 80064b8:	08007d2c 	.word	0x08007d2c
 80064bc:	08007d5a 	.word	0x08007d5a

080064c0 <_calloc_r>:
 80064c0:	b570      	push	{r4, r5, r6, lr}
 80064c2:	fba1 5402 	umull	r5, r4, r1, r2
 80064c6:	b934      	cbnz	r4, 80064d6 <_calloc_r+0x16>
 80064c8:	4629      	mov	r1, r5
 80064ca:	f7ff f99d 	bl	8005808 <_malloc_r>
 80064ce:	4606      	mov	r6, r0
 80064d0:	b928      	cbnz	r0, 80064de <_calloc_r+0x1e>
 80064d2:	4630      	mov	r0, r6
 80064d4:	bd70      	pop	{r4, r5, r6, pc}
 80064d6:	220c      	movs	r2, #12
 80064d8:	2600      	movs	r6, #0
 80064da:	6002      	str	r2, [r0, #0]
 80064dc:	e7f9      	b.n	80064d2 <_calloc_r+0x12>
 80064de:	462a      	mov	r2, r5
 80064e0:	4621      	mov	r1, r4
 80064e2:	f7fe fa24 	bl	800492e <memset>
 80064e6:	e7f4      	b.n	80064d2 <_calloc_r+0x12>

080064e8 <__ascii_mbtowc>:
 80064e8:	b082      	sub	sp, #8
 80064ea:	b901      	cbnz	r1, 80064ee <__ascii_mbtowc+0x6>
 80064ec:	a901      	add	r1, sp, #4
 80064ee:	b142      	cbz	r2, 8006502 <__ascii_mbtowc+0x1a>
 80064f0:	b14b      	cbz	r3, 8006506 <__ascii_mbtowc+0x1e>
 80064f2:	7813      	ldrb	r3, [r2, #0]
 80064f4:	600b      	str	r3, [r1, #0]
 80064f6:	7812      	ldrb	r2, [r2, #0]
 80064f8:	1e10      	subs	r0, r2, #0
 80064fa:	bf18      	it	ne
 80064fc:	2001      	movne	r0, #1
 80064fe:	b002      	add	sp, #8
 8006500:	4770      	bx	lr
 8006502:	4610      	mov	r0, r2
 8006504:	e7fb      	b.n	80064fe <__ascii_mbtowc+0x16>
 8006506:	f06f 0001 	mvn.w	r0, #1
 800650a:	e7f8      	b.n	80064fe <__ascii_mbtowc+0x16>

0800650c <_realloc_r>:
 800650c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006510:	4680      	mov	r8, r0
 8006512:	4614      	mov	r4, r2
 8006514:	460e      	mov	r6, r1
 8006516:	b921      	cbnz	r1, 8006522 <_realloc_r+0x16>
 8006518:	4611      	mov	r1, r2
 800651a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800651e:	f7ff b973 	b.w	8005808 <_malloc_r>
 8006522:	b92a      	cbnz	r2, 8006530 <_realloc_r+0x24>
 8006524:	f7ff f900 	bl	8005728 <_free_r>
 8006528:	4625      	mov	r5, r4
 800652a:	4628      	mov	r0, r5
 800652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006530:	f000 f841 	bl	80065b6 <_malloc_usable_size_r>
 8006534:	4284      	cmp	r4, r0
 8006536:	4607      	mov	r7, r0
 8006538:	d802      	bhi.n	8006540 <_realloc_r+0x34>
 800653a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800653e:	d812      	bhi.n	8006566 <_realloc_r+0x5a>
 8006540:	4621      	mov	r1, r4
 8006542:	4640      	mov	r0, r8
 8006544:	f7ff f960 	bl	8005808 <_malloc_r>
 8006548:	4605      	mov	r5, r0
 800654a:	2800      	cmp	r0, #0
 800654c:	d0ed      	beq.n	800652a <_realloc_r+0x1e>
 800654e:	42bc      	cmp	r4, r7
 8006550:	4622      	mov	r2, r4
 8006552:	4631      	mov	r1, r6
 8006554:	bf28      	it	cs
 8006556:	463a      	movcs	r2, r7
 8006558:	f7ff ff86 	bl	8006468 <memcpy>
 800655c:	4631      	mov	r1, r6
 800655e:	4640      	mov	r0, r8
 8006560:	f7ff f8e2 	bl	8005728 <_free_r>
 8006564:	e7e1      	b.n	800652a <_realloc_r+0x1e>
 8006566:	4635      	mov	r5, r6
 8006568:	e7df      	b.n	800652a <_realloc_r+0x1e>

0800656a <__ascii_wctomb>:
 800656a:	4603      	mov	r3, r0
 800656c:	4608      	mov	r0, r1
 800656e:	b141      	cbz	r1, 8006582 <__ascii_wctomb+0x18>
 8006570:	2aff      	cmp	r2, #255	; 0xff
 8006572:	d904      	bls.n	800657e <__ascii_wctomb+0x14>
 8006574:	228a      	movs	r2, #138	; 0x8a
 8006576:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800657a:	601a      	str	r2, [r3, #0]
 800657c:	4770      	bx	lr
 800657e:	2001      	movs	r0, #1
 8006580:	700a      	strb	r2, [r1, #0]
 8006582:	4770      	bx	lr

08006584 <fiprintf>:
 8006584:	b40e      	push	{r1, r2, r3}
 8006586:	b503      	push	{r0, r1, lr}
 8006588:	4601      	mov	r1, r0
 800658a:	ab03      	add	r3, sp, #12
 800658c:	4805      	ldr	r0, [pc, #20]	; (80065a4 <fiprintf+0x20>)
 800658e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006592:	6800      	ldr	r0, [r0, #0]
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	f000 f83d 	bl	8006614 <_vfiprintf_r>
 800659a:	b002      	add	sp, #8
 800659c:	f85d eb04 	ldr.w	lr, [sp], #4
 80065a0:	b003      	add	sp, #12
 80065a2:	4770      	bx	lr
 80065a4:	2000006c 	.word	0x2000006c

080065a8 <abort>:
 80065a8:	2006      	movs	r0, #6
 80065aa:	b508      	push	{r3, lr}
 80065ac:	f000 fa0a 	bl	80069c4 <raise>
 80065b0:	2001      	movs	r0, #1
 80065b2:	f7fb fc82 	bl	8001eba <_exit>

080065b6 <_malloc_usable_size_r>:
 80065b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065ba:	1f18      	subs	r0, r3, #4
 80065bc:	2b00      	cmp	r3, #0
 80065be:	bfbc      	itt	lt
 80065c0:	580b      	ldrlt	r3, [r1, r0]
 80065c2:	18c0      	addlt	r0, r0, r3
 80065c4:	4770      	bx	lr

080065c6 <__sfputc_r>:
 80065c6:	6893      	ldr	r3, [r2, #8]
 80065c8:	b410      	push	{r4}
 80065ca:	3b01      	subs	r3, #1
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	6093      	str	r3, [r2, #8]
 80065d0:	da07      	bge.n	80065e2 <__sfputc_r+0x1c>
 80065d2:	6994      	ldr	r4, [r2, #24]
 80065d4:	42a3      	cmp	r3, r4
 80065d6:	db01      	blt.n	80065dc <__sfputc_r+0x16>
 80065d8:	290a      	cmp	r1, #10
 80065da:	d102      	bne.n	80065e2 <__sfputc_r+0x1c>
 80065dc:	bc10      	pop	{r4}
 80065de:	f000 b933 	b.w	8006848 <__swbuf_r>
 80065e2:	6813      	ldr	r3, [r2, #0]
 80065e4:	1c58      	adds	r0, r3, #1
 80065e6:	6010      	str	r0, [r2, #0]
 80065e8:	7019      	strb	r1, [r3, #0]
 80065ea:	4608      	mov	r0, r1
 80065ec:	bc10      	pop	{r4}
 80065ee:	4770      	bx	lr

080065f0 <__sfputs_r>:
 80065f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065f2:	4606      	mov	r6, r0
 80065f4:	460f      	mov	r7, r1
 80065f6:	4614      	mov	r4, r2
 80065f8:	18d5      	adds	r5, r2, r3
 80065fa:	42ac      	cmp	r4, r5
 80065fc:	d101      	bne.n	8006602 <__sfputs_r+0x12>
 80065fe:	2000      	movs	r0, #0
 8006600:	e007      	b.n	8006612 <__sfputs_r+0x22>
 8006602:	463a      	mov	r2, r7
 8006604:	4630      	mov	r0, r6
 8006606:	f814 1b01 	ldrb.w	r1, [r4], #1
 800660a:	f7ff ffdc 	bl	80065c6 <__sfputc_r>
 800660e:	1c43      	adds	r3, r0, #1
 8006610:	d1f3      	bne.n	80065fa <__sfputs_r+0xa>
 8006612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006614 <_vfiprintf_r>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	460d      	mov	r5, r1
 800661a:	4614      	mov	r4, r2
 800661c:	4698      	mov	r8, r3
 800661e:	4606      	mov	r6, r0
 8006620:	b09d      	sub	sp, #116	; 0x74
 8006622:	b118      	cbz	r0, 800662c <_vfiprintf_r+0x18>
 8006624:	6a03      	ldr	r3, [r0, #32]
 8006626:	b90b      	cbnz	r3, 800662c <_vfiprintf_r+0x18>
 8006628:	f7fe f8e8 	bl	80047fc <__sinit>
 800662c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800662e:	07d9      	lsls	r1, r3, #31
 8006630:	d405      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006632:	89ab      	ldrh	r3, [r5, #12]
 8006634:	059a      	lsls	r2, r3, #22
 8006636:	d402      	bmi.n	800663e <_vfiprintf_r+0x2a>
 8006638:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800663a:	f7fe f9f5 	bl	8004a28 <__retarget_lock_acquire_recursive>
 800663e:	89ab      	ldrh	r3, [r5, #12]
 8006640:	071b      	lsls	r3, r3, #28
 8006642:	d501      	bpl.n	8006648 <_vfiprintf_r+0x34>
 8006644:	692b      	ldr	r3, [r5, #16]
 8006646:	b99b      	cbnz	r3, 8006670 <_vfiprintf_r+0x5c>
 8006648:	4629      	mov	r1, r5
 800664a:	4630      	mov	r0, r6
 800664c:	f000 f93a 	bl	80068c4 <__swsetup_r>
 8006650:	b170      	cbz	r0, 8006670 <_vfiprintf_r+0x5c>
 8006652:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006654:	07dc      	lsls	r4, r3, #31
 8006656:	d504      	bpl.n	8006662 <_vfiprintf_r+0x4e>
 8006658:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800665c:	b01d      	add	sp, #116	; 0x74
 800665e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006662:	89ab      	ldrh	r3, [r5, #12]
 8006664:	0598      	lsls	r0, r3, #22
 8006666:	d4f7      	bmi.n	8006658 <_vfiprintf_r+0x44>
 8006668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800666a:	f7fe f9de 	bl	8004a2a <__retarget_lock_release_recursive>
 800666e:	e7f3      	b.n	8006658 <_vfiprintf_r+0x44>
 8006670:	2300      	movs	r3, #0
 8006672:	9309      	str	r3, [sp, #36]	; 0x24
 8006674:	2320      	movs	r3, #32
 8006676:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800667a:	2330      	movs	r3, #48	; 0x30
 800667c:	f04f 0901 	mov.w	r9, #1
 8006680:	f8cd 800c 	str.w	r8, [sp, #12]
 8006684:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006834 <_vfiprintf_r+0x220>
 8006688:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800668c:	4623      	mov	r3, r4
 800668e:	469a      	mov	sl, r3
 8006690:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006694:	b10a      	cbz	r2, 800669a <_vfiprintf_r+0x86>
 8006696:	2a25      	cmp	r2, #37	; 0x25
 8006698:	d1f9      	bne.n	800668e <_vfiprintf_r+0x7a>
 800669a:	ebba 0b04 	subs.w	fp, sl, r4
 800669e:	d00b      	beq.n	80066b8 <_vfiprintf_r+0xa4>
 80066a0:	465b      	mov	r3, fp
 80066a2:	4622      	mov	r2, r4
 80066a4:	4629      	mov	r1, r5
 80066a6:	4630      	mov	r0, r6
 80066a8:	f7ff ffa2 	bl	80065f0 <__sfputs_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	f000 80a9 	beq.w	8006804 <_vfiprintf_r+0x1f0>
 80066b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80066b4:	445a      	add	r2, fp
 80066b6:	9209      	str	r2, [sp, #36]	; 0x24
 80066b8:	f89a 3000 	ldrb.w	r3, [sl]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	f000 80a1 	beq.w	8006804 <_vfiprintf_r+0x1f0>
 80066c2:	2300      	movs	r3, #0
 80066c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80066c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066cc:	f10a 0a01 	add.w	sl, sl, #1
 80066d0:	9304      	str	r3, [sp, #16]
 80066d2:	9307      	str	r3, [sp, #28]
 80066d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80066d8:	931a      	str	r3, [sp, #104]	; 0x68
 80066da:	4654      	mov	r4, sl
 80066dc:	2205      	movs	r2, #5
 80066de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066e2:	4854      	ldr	r0, [pc, #336]	; (8006834 <_vfiprintf_r+0x220>)
 80066e4:	f7fe f9a2 	bl	8004a2c <memchr>
 80066e8:	9a04      	ldr	r2, [sp, #16]
 80066ea:	b9d8      	cbnz	r0, 8006724 <_vfiprintf_r+0x110>
 80066ec:	06d1      	lsls	r1, r2, #27
 80066ee:	bf44      	itt	mi
 80066f0:	2320      	movmi	r3, #32
 80066f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066f6:	0713      	lsls	r3, r2, #28
 80066f8:	bf44      	itt	mi
 80066fa:	232b      	movmi	r3, #43	; 0x2b
 80066fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006700:	f89a 3000 	ldrb.w	r3, [sl]
 8006704:	2b2a      	cmp	r3, #42	; 0x2a
 8006706:	d015      	beq.n	8006734 <_vfiprintf_r+0x120>
 8006708:	4654      	mov	r4, sl
 800670a:	2000      	movs	r0, #0
 800670c:	f04f 0c0a 	mov.w	ip, #10
 8006710:	9a07      	ldr	r2, [sp, #28]
 8006712:	4621      	mov	r1, r4
 8006714:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006718:	3b30      	subs	r3, #48	; 0x30
 800671a:	2b09      	cmp	r3, #9
 800671c:	d94d      	bls.n	80067ba <_vfiprintf_r+0x1a6>
 800671e:	b1b0      	cbz	r0, 800674e <_vfiprintf_r+0x13a>
 8006720:	9207      	str	r2, [sp, #28]
 8006722:	e014      	b.n	800674e <_vfiprintf_r+0x13a>
 8006724:	eba0 0308 	sub.w	r3, r0, r8
 8006728:	fa09 f303 	lsl.w	r3, r9, r3
 800672c:	4313      	orrs	r3, r2
 800672e:	46a2      	mov	sl, r4
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	e7d2      	b.n	80066da <_vfiprintf_r+0xc6>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d19      	adds	r1, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9103      	str	r1, [sp, #12]
 800673c:	2b00      	cmp	r3, #0
 800673e:	bfbb      	ittet	lt
 8006740:	425b      	neglt	r3, r3
 8006742:	f042 0202 	orrlt.w	r2, r2, #2
 8006746:	9307      	strge	r3, [sp, #28]
 8006748:	9307      	strlt	r3, [sp, #28]
 800674a:	bfb8      	it	lt
 800674c:	9204      	strlt	r2, [sp, #16]
 800674e:	7823      	ldrb	r3, [r4, #0]
 8006750:	2b2e      	cmp	r3, #46	; 0x2e
 8006752:	d10c      	bne.n	800676e <_vfiprintf_r+0x15a>
 8006754:	7863      	ldrb	r3, [r4, #1]
 8006756:	2b2a      	cmp	r3, #42	; 0x2a
 8006758:	d134      	bne.n	80067c4 <_vfiprintf_r+0x1b0>
 800675a:	9b03      	ldr	r3, [sp, #12]
 800675c:	3402      	adds	r4, #2
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	9203      	str	r2, [sp, #12]
 8006764:	2b00      	cmp	r3, #0
 8006766:	bfb8      	it	lt
 8006768:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800676c:	9305      	str	r3, [sp, #20]
 800676e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006838 <_vfiprintf_r+0x224>
 8006772:	2203      	movs	r2, #3
 8006774:	4650      	mov	r0, sl
 8006776:	7821      	ldrb	r1, [r4, #0]
 8006778:	f7fe f958 	bl	8004a2c <memchr>
 800677c:	b138      	cbz	r0, 800678e <_vfiprintf_r+0x17a>
 800677e:	2240      	movs	r2, #64	; 0x40
 8006780:	9b04      	ldr	r3, [sp, #16]
 8006782:	eba0 000a 	sub.w	r0, r0, sl
 8006786:	4082      	lsls	r2, r0
 8006788:	4313      	orrs	r3, r2
 800678a:	3401      	adds	r4, #1
 800678c:	9304      	str	r3, [sp, #16]
 800678e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006792:	2206      	movs	r2, #6
 8006794:	4829      	ldr	r0, [pc, #164]	; (800683c <_vfiprintf_r+0x228>)
 8006796:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800679a:	f7fe f947 	bl	8004a2c <memchr>
 800679e:	2800      	cmp	r0, #0
 80067a0:	d03f      	beq.n	8006822 <_vfiprintf_r+0x20e>
 80067a2:	4b27      	ldr	r3, [pc, #156]	; (8006840 <_vfiprintf_r+0x22c>)
 80067a4:	bb1b      	cbnz	r3, 80067ee <_vfiprintf_r+0x1da>
 80067a6:	9b03      	ldr	r3, [sp, #12]
 80067a8:	3307      	adds	r3, #7
 80067aa:	f023 0307 	bic.w	r3, r3, #7
 80067ae:	3308      	adds	r3, #8
 80067b0:	9303      	str	r3, [sp, #12]
 80067b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067b4:	443b      	add	r3, r7
 80067b6:	9309      	str	r3, [sp, #36]	; 0x24
 80067b8:	e768      	b.n	800668c <_vfiprintf_r+0x78>
 80067ba:	460c      	mov	r4, r1
 80067bc:	2001      	movs	r0, #1
 80067be:	fb0c 3202 	mla	r2, ip, r2, r3
 80067c2:	e7a6      	b.n	8006712 <_vfiprintf_r+0xfe>
 80067c4:	2300      	movs	r3, #0
 80067c6:	f04f 0c0a 	mov.w	ip, #10
 80067ca:	4619      	mov	r1, r3
 80067cc:	3401      	adds	r4, #1
 80067ce:	9305      	str	r3, [sp, #20]
 80067d0:	4620      	mov	r0, r4
 80067d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067d6:	3a30      	subs	r2, #48	; 0x30
 80067d8:	2a09      	cmp	r2, #9
 80067da:	d903      	bls.n	80067e4 <_vfiprintf_r+0x1d0>
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d0c6      	beq.n	800676e <_vfiprintf_r+0x15a>
 80067e0:	9105      	str	r1, [sp, #20]
 80067e2:	e7c4      	b.n	800676e <_vfiprintf_r+0x15a>
 80067e4:	4604      	mov	r4, r0
 80067e6:	2301      	movs	r3, #1
 80067e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80067ec:	e7f0      	b.n	80067d0 <_vfiprintf_r+0x1bc>
 80067ee:	ab03      	add	r3, sp, #12
 80067f0:	9300      	str	r3, [sp, #0]
 80067f2:	462a      	mov	r2, r5
 80067f4:	4630      	mov	r0, r6
 80067f6:	4b13      	ldr	r3, [pc, #76]	; (8006844 <_vfiprintf_r+0x230>)
 80067f8:	a904      	add	r1, sp, #16
 80067fa:	f7fd fbc3 	bl	8003f84 <_printf_float>
 80067fe:	4607      	mov	r7, r0
 8006800:	1c78      	adds	r0, r7, #1
 8006802:	d1d6      	bne.n	80067b2 <_vfiprintf_r+0x19e>
 8006804:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006806:	07d9      	lsls	r1, r3, #31
 8006808:	d405      	bmi.n	8006816 <_vfiprintf_r+0x202>
 800680a:	89ab      	ldrh	r3, [r5, #12]
 800680c:	059a      	lsls	r2, r3, #22
 800680e:	d402      	bmi.n	8006816 <_vfiprintf_r+0x202>
 8006810:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006812:	f7fe f90a 	bl	8004a2a <__retarget_lock_release_recursive>
 8006816:	89ab      	ldrh	r3, [r5, #12]
 8006818:	065b      	lsls	r3, r3, #25
 800681a:	f53f af1d 	bmi.w	8006658 <_vfiprintf_r+0x44>
 800681e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006820:	e71c      	b.n	800665c <_vfiprintf_r+0x48>
 8006822:	ab03      	add	r3, sp, #12
 8006824:	9300      	str	r3, [sp, #0]
 8006826:	462a      	mov	r2, r5
 8006828:	4630      	mov	r0, r6
 800682a:	4b06      	ldr	r3, [pc, #24]	; (8006844 <_vfiprintf_r+0x230>)
 800682c:	a904      	add	r1, sp, #16
 800682e:	f7fd fe49 	bl	80044c4 <_printf_i>
 8006832:	e7e4      	b.n	80067fe <_vfiprintf_r+0x1ea>
 8006834:	08007d04 	.word	0x08007d04
 8006838:	08007d0a 	.word	0x08007d0a
 800683c:	08007d0e 	.word	0x08007d0e
 8006840:	08003f85 	.word	0x08003f85
 8006844:	080065f1 	.word	0x080065f1

08006848 <__swbuf_r>:
 8006848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800684a:	460e      	mov	r6, r1
 800684c:	4614      	mov	r4, r2
 800684e:	4605      	mov	r5, r0
 8006850:	b118      	cbz	r0, 800685a <__swbuf_r+0x12>
 8006852:	6a03      	ldr	r3, [r0, #32]
 8006854:	b90b      	cbnz	r3, 800685a <__swbuf_r+0x12>
 8006856:	f7fd ffd1 	bl	80047fc <__sinit>
 800685a:	69a3      	ldr	r3, [r4, #24]
 800685c:	60a3      	str	r3, [r4, #8]
 800685e:	89a3      	ldrh	r3, [r4, #12]
 8006860:	071a      	lsls	r2, r3, #28
 8006862:	d525      	bpl.n	80068b0 <__swbuf_r+0x68>
 8006864:	6923      	ldr	r3, [r4, #16]
 8006866:	b31b      	cbz	r3, 80068b0 <__swbuf_r+0x68>
 8006868:	6823      	ldr	r3, [r4, #0]
 800686a:	6922      	ldr	r2, [r4, #16]
 800686c:	b2f6      	uxtb	r6, r6
 800686e:	1a98      	subs	r0, r3, r2
 8006870:	6963      	ldr	r3, [r4, #20]
 8006872:	4637      	mov	r7, r6
 8006874:	4283      	cmp	r3, r0
 8006876:	dc04      	bgt.n	8006882 <__swbuf_r+0x3a>
 8006878:	4621      	mov	r1, r4
 800687a:	4628      	mov	r0, r5
 800687c:	f7ff fda2 	bl	80063c4 <_fflush_r>
 8006880:	b9e0      	cbnz	r0, 80068bc <__swbuf_r+0x74>
 8006882:	68a3      	ldr	r3, [r4, #8]
 8006884:	3b01      	subs	r3, #1
 8006886:	60a3      	str	r3, [r4, #8]
 8006888:	6823      	ldr	r3, [r4, #0]
 800688a:	1c5a      	adds	r2, r3, #1
 800688c:	6022      	str	r2, [r4, #0]
 800688e:	701e      	strb	r6, [r3, #0]
 8006890:	6962      	ldr	r2, [r4, #20]
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	429a      	cmp	r2, r3
 8006896:	d004      	beq.n	80068a2 <__swbuf_r+0x5a>
 8006898:	89a3      	ldrh	r3, [r4, #12]
 800689a:	07db      	lsls	r3, r3, #31
 800689c:	d506      	bpl.n	80068ac <__swbuf_r+0x64>
 800689e:	2e0a      	cmp	r6, #10
 80068a0:	d104      	bne.n	80068ac <__swbuf_r+0x64>
 80068a2:	4621      	mov	r1, r4
 80068a4:	4628      	mov	r0, r5
 80068a6:	f7ff fd8d 	bl	80063c4 <_fflush_r>
 80068aa:	b938      	cbnz	r0, 80068bc <__swbuf_r+0x74>
 80068ac:	4638      	mov	r0, r7
 80068ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b0:	4621      	mov	r1, r4
 80068b2:	4628      	mov	r0, r5
 80068b4:	f000 f806 	bl	80068c4 <__swsetup_r>
 80068b8:	2800      	cmp	r0, #0
 80068ba:	d0d5      	beq.n	8006868 <__swbuf_r+0x20>
 80068bc:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80068c0:	e7f4      	b.n	80068ac <__swbuf_r+0x64>
	...

080068c4 <__swsetup_r>:
 80068c4:	b538      	push	{r3, r4, r5, lr}
 80068c6:	4b2a      	ldr	r3, [pc, #168]	; (8006970 <__swsetup_r+0xac>)
 80068c8:	4605      	mov	r5, r0
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	460c      	mov	r4, r1
 80068ce:	b118      	cbz	r0, 80068d8 <__swsetup_r+0x14>
 80068d0:	6a03      	ldr	r3, [r0, #32]
 80068d2:	b90b      	cbnz	r3, 80068d8 <__swsetup_r+0x14>
 80068d4:	f7fd ff92 	bl	80047fc <__sinit>
 80068d8:	89a3      	ldrh	r3, [r4, #12]
 80068da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068de:	0718      	lsls	r0, r3, #28
 80068e0:	d422      	bmi.n	8006928 <__swsetup_r+0x64>
 80068e2:	06d9      	lsls	r1, r3, #27
 80068e4:	d407      	bmi.n	80068f6 <__swsetup_r+0x32>
 80068e6:	2309      	movs	r3, #9
 80068e8:	602b      	str	r3, [r5, #0]
 80068ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80068f2:	81a3      	strh	r3, [r4, #12]
 80068f4:	e034      	b.n	8006960 <__swsetup_r+0x9c>
 80068f6:	0758      	lsls	r0, r3, #29
 80068f8:	d512      	bpl.n	8006920 <__swsetup_r+0x5c>
 80068fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068fc:	b141      	cbz	r1, 8006910 <__swsetup_r+0x4c>
 80068fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006902:	4299      	cmp	r1, r3
 8006904:	d002      	beq.n	800690c <__swsetup_r+0x48>
 8006906:	4628      	mov	r0, r5
 8006908:	f7fe ff0e 	bl	8005728 <_free_r>
 800690c:	2300      	movs	r3, #0
 800690e:	6363      	str	r3, [r4, #52]	; 0x34
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006916:	81a3      	strh	r3, [r4, #12]
 8006918:	2300      	movs	r3, #0
 800691a:	6063      	str	r3, [r4, #4]
 800691c:	6923      	ldr	r3, [r4, #16]
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	89a3      	ldrh	r3, [r4, #12]
 8006922:	f043 0308 	orr.w	r3, r3, #8
 8006926:	81a3      	strh	r3, [r4, #12]
 8006928:	6923      	ldr	r3, [r4, #16]
 800692a:	b94b      	cbnz	r3, 8006940 <__swsetup_r+0x7c>
 800692c:	89a3      	ldrh	r3, [r4, #12]
 800692e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006932:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006936:	d003      	beq.n	8006940 <__swsetup_r+0x7c>
 8006938:	4621      	mov	r1, r4
 800693a:	4628      	mov	r0, r5
 800693c:	f000 f883 	bl	8006a46 <__smakebuf_r>
 8006940:	89a0      	ldrh	r0, [r4, #12]
 8006942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006946:	f010 0301 	ands.w	r3, r0, #1
 800694a:	d00a      	beq.n	8006962 <__swsetup_r+0x9e>
 800694c:	2300      	movs	r3, #0
 800694e:	60a3      	str	r3, [r4, #8]
 8006950:	6963      	ldr	r3, [r4, #20]
 8006952:	425b      	negs	r3, r3
 8006954:	61a3      	str	r3, [r4, #24]
 8006956:	6923      	ldr	r3, [r4, #16]
 8006958:	b943      	cbnz	r3, 800696c <__swsetup_r+0xa8>
 800695a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800695e:	d1c4      	bne.n	80068ea <__swsetup_r+0x26>
 8006960:	bd38      	pop	{r3, r4, r5, pc}
 8006962:	0781      	lsls	r1, r0, #30
 8006964:	bf58      	it	pl
 8006966:	6963      	ldrpl	r3, [r4, #20]
 8006968:	60a3      	str	r3, [r4, #8]
 800696a:	e7f4      	b.n	8006956 <__swsetup_r+0x92>
 800696c:	2000      	movs	r0, #0
 800696e:	e7f7      	b.n	8006960 <__swsetup_r+0x9c>
 8006970:	2000006c 	.word	0x2000006c

08006974 <_raise_r>:
 8006974:	291f      	cmp	r1, #31
 8006976:	b538      	push	{r3, r4, r5, lr}
 8006978:	4604      	mov	r4, r0
 800697a:	460d      	mov	r5, r1
 800697c:	d904      	bls.n	8006988 <_raise_r+0x14>
 800697e:	2316      	movs	r3, #22
 8006980:	6003      	str	r3, [r0, #0]
 8006982:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006986:	bd38      	pop	{r3, r4, r5, pc}
 8006988:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800698a:	b112      	cbz	r2, 8006992 <_raise_r+0x1e>
 800698c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006990:	b94b      	cbnz	r3, 80069a6 <_raise_r+0x32>
 8006992:	4620      	mov	r0, r4
 8006994:	f000 f830 	bl	80069f8 <_getpid_r>
 8006998:	462a      	mov	r2, r5
 800699a:	4601      	mov	r1, r0
 800699c:	4620      	mov	r0, r4
 800699e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80069a2:	f000 b817 	b.w	80069d4 <_kill_r>
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d00a      	beq.n	80069c0 <_raise_r+0x4c>
 80069aa:	1c59      	adds	r1, r3, #1
 80069ac:	d103      	bne.n	80069b6 <_raise_r+0x42>
 80069ae:	2316      	movs	r3, #22
 80069b0:	6003      	str	r3, [r0, #0]
 80069b2:	2001      	movs	r0, #1
 80069b4:	e7e7      	b.n	8006986 <_raise_r+0x12>
 80069b6:	2400      	movs	r4, #0
 80069b8:	4628      	mov	r0, r5
 80069ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80069be:	4798      	blx	r3
 80069c0:	2000      	movs	r0, #0
 80069c2:	e7e0      	b.n	8006986 <_raise_r+0x12>

080069c4 <raise>:
 80069c4:	4b02      	ldr	r3, [pc, #8]	; (80069d0 <raise+0xc>)
 80069c6:	4601      	mov	r1, r0
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	f7ff bfd3 	b.w	8006974 <_raise_r>
 80069ce:	bf00      	nop
 80069d0:	2000006c 	.word	0x2000006c

080069d4 <_kill_r>:
 80069d4:	b538      	push	{r3, r4, r5, lr}
 80069d6:	2300      	movs	r3, #0
 80069d8:	4d06      	ldr	r5, [pc, #24]	; (80069f4 <_kill_r+0x20>)
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	602b      	str	r3, [r5, #0]
 80069e2:	f7fb fa5a 	bl	8001e9a <_kill>
 80069e6:	1c43      	adds	r3, r0, #1
 80069e8:	d102      	bne.n	80069f0 <_kill_r+0x1c>
 80069ea:	682b      	ldr	r3, [r5, #0]
 80069ec:	b103      	cbz	r3, 80069f0 <_kill_r+0x1c>
 80069ee:	6023      	str	r3, [r4, #0]
 80069f0:	bd38      	pop	{r3, r4, r5, pc}
 80069f2:	bf00      	nop
 80069f4:	20000968 	.word	0x20000968

080069f8 <_getpid_r>:
 80069f8:	f7fb ba48 	b.w	8001e8c <_getpid>

080069fc <__swhatbuf_r>:
 80069fc:	b570      	push	{r4, r5, r6, lr}
 80069fe:	460c      	mov	r4, r1
 8006a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a04:	4615      	mov	r5, r2
 8006a06:	2900      	cmp	r1, #0
 8006a08:	461e      	mov	r6, r3
 8006a0a:	b096      	sub	sp, #88	; 0x58
 8006a0c:	da0c      	bge.n	8006a28 <__swhatbuf_r+0x2c>
 8006a0e:	89a3      	ldrh	r3, [r4, #12]
 8006a10:	2100      	movs	r1, #0
 8006a12:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006a16:	bf0c      	ite	eq
 8006a18:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006a1c:	2340      	movne	r3, #64	; 0x40
 8006a1e:	2000      	movs	r0, #0
 8006a20:	6031      	str	r1, [r6, #0]
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	b016      	add	sp, #88	; 0x58
 8006a26:	bd70      	pop	{r4, r5, r6, pc}
 8006a28:	466a      	mov	r2, sp
 8006a2a:	f000 f849 	bl	8006ac0 <_fstat_r>
 8006a2e:	2800      	cmp	r0, #0
 8006a30:	dbed      	blt.n	8006a0e <__swhatbuf_r+0x12>
 8006a32:	9901      	ldr	r1, [sp, #4]
 8006a34:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006a38:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006a3c:	4259      	negs	r1, r3
 8006a3e:	4159      	adcs	r1, r3
 8006a40:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006a44:	e7eb      	b.n	8006a1e <__swhatbuf_r+0x22>

08006a46 <__smakebuf_r>:
 8006a46:	898b      	ldrh	r3, [r1, #12]
 8006a48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006a4a:	079d      	lsls	r5, r3, #30
 8006a4c:	4606      	mov	r6, r0
 8006a4e:	460c      	mov	r4, r1
 8006a50:	d507      	bpl.n	8006a62 <__smakebuf_r+0x1c>
 8006a52:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006a56:	6023      	str	r3, [r4, #0]
 8006a58:	6123      	str	r3, [r4, #16]
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	6163      	str	r3, [r4, #20]
 8006a5e:	b002      	add	sp, #8
 8006a60:	bd70      	pop	{r4, r5, r6, pc}
 8006a62:	466a      	mov	r2, sp
 8006a64:	ab01      	add	r3, sp, #4
 8006a66:	f7ff ffc9 	bl	80069fc <__swhatbuf_r>
 8006a6a:	9900      	ldr	r1, [sp, #0]
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	4630      	mov	r0, r6
 8006a70:	f7fe feca 	bl	8005808 <_malloc_r>
 8006a74:	b948      	cbnz	r0, 8006a8a <__smakebuf_r+0x44>
 8006a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7a:	059a      	lsls	r2, r3, #22
 8006a7c:	d4ef      	bmi.n	8006a5e <__smakebuf_r+0x18>
 8006a7e:	f023 0303 	bic.w	r3, r3, #3
 8006a82:	f043 0302 	orr.w	r3, r3, #2
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	e7e3      	b.n	8006a52 <__smakebuf_r+0xc>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	6020      	str	r0, [r4, #0]
 8006a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a92:	81a3      	strh	r3, [r4, #12]
 8006a94:	9b00      	ldr	r3, [sp, #0]
 8006a96:	6120      	str	r0, [r4, #16]
 8006a98:	6163      	str	r3, [r4, #20]
 8006a9a:	9b01      	ldr	r3, [sp, #4]
 8006a9c:	b15b      	cbz	r3, 8006ab6 <__smakebuf_r+0x70>
 8006a9e:	4630      	mov	r0, r6
 8006aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aa4:	f000 f81e 	bl	8006ae4 <_isatty_r>
 8006aa8:	b128      	cbz	r0, 8006ab6 <__smakebuf_r+0x70>
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f023 0303 	bic.w	r3, r3, #3
 8006ab0:	f043 0301 	orr.w	r3, r3, #1
 8006ab4:	81a3      	strh	r3, [r4, #12]
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	431d      	orrs	r5, r3
 8006aba:	81a5      	strh	r5, [r4, #12]
 8006abc:	e7cf      	b.n	8006a5e <__smakebuf_r+0x18>
	...

08006ac0 <_fstat_r>:
 8006ac0:	b538      	push	{r3, r4, r5, lr}
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	4d06      	ldr	r5, [pc, #24]	; (8006ae0 <_fstat_r+0x20>)
 8006ac6:	4604      	mov	r4, r0
 8006ac8:	4608      	mov	r0, r1
 8006aca:	4611      	mov	r1, r2
 8006acc:	602b      	str	r3, [r5, #0]
 8006ace:	f7fb fa42 	bl	8001f56 <_fstat>
 8006ad2:	1c43      	adds	r3, r0, #1
 8006ad4:	d102      	bne.n	8006adc <_fstat_r+0x1c>
 8006ad6:	682b      	ldr	r3, [r5, #0]
 8006ad8:	b103      	cbz	r3, 8006adc <_fstat_r+0x1c>
 8006ada:	6023      	str	r3, [r4, #0]
 8006adc:	bd38      	pop	{r3, r4, r5, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000968 	.word	0x20000968

08006ae4 <_isatty_r>:
 8006ae4:	b538      	push	{r3, r4, r5, lr}
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	4d05      	ldr	r5, [pc, #20]	; (8006b00 <_isatty_r+0x1c>)
 8006aea:	4604      	mov	r4, r0
 8006aec:	4608      	mov	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fb fa40 	bl	8001f74 <_isatty>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d102      	bne.n	8006afe <_isatty_r+0x1a>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	b103      	cbz	r3, 8006afe <_isatty_r+0x1a>
 8006afc:	6023      	str	r3, [r4, #0]
 8006afe:	bd38      	pop	{r3, r4, r5, pc}
 8006b00:	20000968 	.word	0x20000968

08006b04 <pow>:
 8006b04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b08:	4614      	mov	r4, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	4680      	mov	r8, r0
 8006b0e:	4689      	mov	r9, r1
 8006b10:	f000 f866 	bl	8006be0 <__ieee754_pow>
 8006b14:	4622      	mov	r2, r4
 8006b16:	4606      	mov	r6, r0
 8006b18:	460f      	mov	r7, r1
 8006b1a:	462b      	mov	r3, r5
 8006b1c:	4620      	mov	r0, r4
 8006b1e:	4629      	mov	r1, r5
 8006b20:	f7f9 ff74 	bl	8000a0c <__aeabi_dcmpun>
 8006b24:	bbc8      	cbnz	r0, 8006b9a <pow+0x96>
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	4640      	mov	r0, r8
 8006b2c:	4649      	mov	r1, r9
 8006b2e:	f7f9 ff3b 	bl	80009a8 <__aeabi_dcmpeq>
 8006b32:	b1b8      	cbz	r0, 8006b64 <pow+0x60>
 8006b34:	2200      	movs	r2, #0
 8006b36:	2300      	movs	r3, #0
 8006b38:	4620      	mov	r0, r4
 8006b3a:	4629      	mov	r1, r5
 8006b3c:	f7f9 ff34 	bl	80009a8 <__aeabi_dcmpeq>
 8006b40:	2800      	cmp	r0, #0
 8006b42:	d141      	bne.n	8006bc8 <pow+0xc4>
 8006b44:	4620      	mov	r0, r4
 8006b46:	4629      	mov	r1, r5
 8006b48:	f000 f844 	bl	8006bd4 <finite>
 8006b4c:	b328      	cbz	r0, 8006b9a <pow+0x96>
 8006b4e:	2200      	movs	r2, #0
 8006b50:	2300      	movs	r3, #0
 8006b52:	4620      	mov	r0, r4
 8006b54:	4629      	mov	r1, r5
 8006b56:	f7f9 ff31 	bl	80009bc <__aeabi_dcmplt>
 8006b5a:	b1f0      	cbz	r0, 8006b9a <pow+0x96>
 8006b5c:	f7fd ff3a 	bl	80049d4 <__errno>
 8006b60:	2322      	movs	r3, #34	; 0x22
 8006b62:	e019      	b.n	8006b98 <pow+0x94>
 8006b64:	4630      	mov	r0, r6
 8006b66:	4639      	mov	r1, r7
 8006b68:	f000 f834 	bl	8006bd4 <finite>
 8006b6c:	b9c8      	cbnz	r0, 8006ba2 <pow+0x9e>
 8006b6e:	4640      	mov	r0, r8
 8006b70:	4649      	mov	r1, r9
 8006b72:	f000 f82f 	bl	8006bd4 <finite>
 8006b76:	b1a0      	cbz	r0, 8006ba2 <pow+0x9e>
 8006b78:	4620      	mov	r0, r4
 8006b7a:	4629      	mov	r1, r5
 8006b7c:	f000 f82a 	bl	8006bd4 <finite>
 8006b80:	b178      	cbz	r0, 8006ba2 <pow+0x9e>
 8006b82:	4632      	mov	r2, r6
 8006b84:	463b      	mov	r3, r7
 8006b86:	4630      	mov	r0, r6
 8006b88:	4639      	mov	r1, r7
 8006b8a:	f7f9 ff3f 	bl	8000a0c <__aeabi_dcmpun>
 8006b8e:	2800      	cmp	r0, #0
 8006b90:	d0e4      	beq.n	8006b5c <pow+0x58>
 8006b92:	f7fd ff1f 	bl	80049d4 <__errno>
 8006b96:	2321      	movs	r3, #33	; 0x21
 8006b98:	6003      	str	r3, [r0, #0]
 8006b9a:	4630      	mov	r0, r6
 8006b9c:	4639      	mov	r1, r7
 8006b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4630      	mov	r0, r6
 8006ba8:	4639      	mov	r1, r7
 8006baa:	f7f9 fefd 	bl	80009a8 <__aeabi_dcmpeq>
 8006bae:	2800      	cmp	r0, #0
 8006bb0:	d0f3      	beq.n	8006b9a <pow+0x96>
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	f000 f80d 	bl	8006bd4 <finite>
 8006bba:	2800      	cmp	r0, #0
 8006bbc:	d0ed      	beq.n	8006b9a <pow+0x96>
 8006bbe:	4620      	mov	r0, r4
 8006bc0:	4629      	mov	r1, r5
 8006bc2:	f000 f807 	bl	8006bd4 <finite>
 8006bc6:	e7c8      	b.n	8006b5a <pow+0x56>
 8006bc8:	2600      	movs	r6, #0
 8006bca:	4f01      	ldr	r7, [pc, #4]	; (8006bd0 <pow+0xcc>)
 8006bcc:	e7e5      	b.n	8006b9a <pow+0x96>
 8006bce:	bf00      	nop
 8006bd0:	3ff00000 	.word	0x3ff00000

08006bd4 <finite>:
 8006bd4:	f041 4000 	orr.w	r0, r1, #2147483648	; 0x80000000
 8006bd8:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006bdc:	0fc0      	lsrs	r0, r0, #31
 8006bde:	4770      	bx	lr

08006be0 <__ieee754_pow>:
 8006be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	b093      	sub	sp, #76	; 0x4c
 8006be6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006bea:	e9dd 2702 	ldrd	r2, r7, [sp, #8]
 8006bee:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006bf2:	4689      	mov	r9, r1
 8006bf4:	ea56 0102 	orrs.w	r1, r6, r2
 8006bf8:	4680      	mov	r8, r0
 8006bfa:	d111      	bne.n	8006c20 <__ieee754_pow+0x40>
 8006bfc:	1803      	adds	r3, r0, r0
 8006bfe:	f489 2200 	eor.w	r2, r9, #524288	; 0x80000
 8006c02:	4152      	adcs	r2, r2
 8006c04:	4299      	cmp	r1, r3
 8006c06:	4b82      	ldr	r3, [pc, #520]	; (8006e10 <__ieee754_pow+0x230>)
 8006c08:	4193      	sbcs	r3, r2
 8006c0a:	f080 84ba 	bcs.w	8007582 <__ieee754_pow+0x9a2>
 8006c0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006c12:	4640      	mov	r0, r8
 8006c14:	4649      	mov	r1, r9
 8006c16:	f7f9 faa9 	bl	800016c <__adddf3>
 8006c1a:	4683      	mov	fp, r0
 8006c1c:	468c      	mov	ip, r1
 8006c1e:	e06f      	b.n	8006d00 <__ieee754_pow+0x120>
 8006c20:	4b7c      	ldr	r3, [pc, #496]	; (8006e14 <__ieee754_pow+0x234>)
 8006c22:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
 8006c26:	429c      	cmp	r4, r3
 8006c28:	464d      	mov	r5, r9
 8006c2a:	4682      	mov	sl, r0
 8006c2c:	dc06      	bgt.n	8006c3c <__ieee754_pow+0x5c>
 8006c2e:	d101      	bne.n	8006c34 <__ieee754_pow+0x54>
 8006c30:	2800      	cmp	r0, #0
 8006c32:	d1ec      	bne.n	8006c0e <__ieee754_pow+0x2e>
 8006c34:	429e      	cmp	r6, r3
 8006c36:	dc01      	bgt.n	8006c3c <__ieee754_pow+0x5c>
 8006c38:	d10f      	bne.n	8006c5a <__ieee754_pow+0x7a>
 8006c3a:	b172      	cbz	r2, 8006c5a <__ieee754_pow+0x7a>
 8006c3c:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8006c40:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8006c44:	ea55 050a 	orrs.w	r5, r5, sl
 8006c48:	d1e1      	bne.n	8006c0e <__ieee754_pow+0x2e>
 8006c4a:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006c4e:	18db      	adds	r3, r3, r3
 8006c50:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8006c54:	4152      	adcs	r2, r2
 8006c56:	429d      	cmp	r5, r3
 8006c58:	e7d5      	b.n	8006c06 <__ieee754_pow+0x26>
 8006c5a:	2d00      	cmp	r5, #0
 8006c5c:	da39      	bge.n	8006cd2 <__ieee754_pow+0xf2>
 8006c5e:	4b6e      	ldr	r3, [pc, #440]	; (8006e18 <__ieee754_pow+0x238>)
 8006c60:	429e      	cmp	r6, r3
 8006c62:	dc52      	bgt.n	8006d0a <__ieee754_pow+0x12a>
 8006c64:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8006c68:	429e      	cmp	r6, r3
 8006c6a:	f340 849d 	ble.w	80075a8 <__ieee754_pow+0x9c8>
 8006c6e:	1533      	asrs	r3, r6, #20
 8006c70:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006c74:	2b14      	cmp	r3, #20
 8006c76:	dd0f      	ble.n	8006c98 <__ieee754_pow+0xb8>
 8006c78:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8006c7c:	fa22 f103 	lsr.w	r1, r2, r3
 8006c80:	fa01 f303 	lsl.w	r3, r1, r3
 8006c84:	4293      	cmp	r3, r2
 8006c86:	f040 848f 	bne.w	80075a8 <__ieee754_pow+0x9c8>
 8006c8a:	f001 0101 	and.w	r1, r1, #1
 8006c8e:	f1c1 0302 	rsb	r3, r1, #2
 8006c92:	9300      	str	r3, [sp, #0]
 8006c94:	b182      	cbz	r2, 8006cb8 <__ieee754_pow+0xd8>
 8006c96:	e05d      	b.n	8006d54 <__ieee754_pow+0x174>
 8006c98:	2a00      	cmp	r2, #0
 8006c9a:	d159      	bne.n	8006d50 <__ieee754_pow+0x170>
 8006c9c:	f1c3 0314 	rsb	r3, r3, #20
 8006ca0:	fa46 f103 	asr.w	r1, r6, r3
 8006ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ca8:	42b3      	cmp	r3, r6
 8006caa:	f040 847a 	bne.w	80075a2 <__ieee754_pow+0x9c2>
 8006cae:	f001 0101 	and.w	r1, r1, #1
 8006cb2:	f1c1 0302 	rsb	r3, r1, #2
 8006cb6:	9300      	str	r3, [sp, #0]
 8006cb8:	4b58      	ldr	r3, [pc, #352]	; (8006e1c <__ieee754_pow+0x23c>)
 8006cba:	429e      	cmp	r6, r3
 8006cbc:	d132      	bne.n	8006d24 <__ieee754_pow+0x144>
 8006cbe:	2f00      	cmp	r7, #0
 8006cc0:	f280 846b 	bge.w	800759a <__ieee754_pow+0x9ba>
 8006cc4:	4642      	mov	r2, r8
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	2000      	movs	r0, #0
 8006cca:	4954      	ldr	r1, [pc, #336]	; (8006e1c <__ieee754_pow+0x23c>)
 8006ccc:	f7f9 fd2e 	bl	800072c <__aeabi_ddiv>
 8006cd0:	e7a3      	b.n	8006c1a <__ieee754_pow+0x3a>
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	2a00      	cmp	r2, #0
 8006cd8:	d13c      	bne.n	8006d54 <__ieee754_pow+0x174>
 8006cda:	4b4e      	ldr	r3, [pc, #312]	; (8006e14 <__ieee754_pow+0x234>)
 8006cdc:	429e      	cmp	r6, r3
 8006cde:	d1eb      	bne.n	8006cb8 <__ieee754_pow+0xd8>
 8006ce0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8006ce4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8006ce8:	ea53 030a 	orrs.w	r3, r3, sl
 8006cec:	f000 8449 	beq.w	8007582 <__ieee754_pow+0x9a2>
 8006cf0:	4b4b      	ldr	r3, [pc, #300]	; (8006e20 <__ieee754_pow+0x240>)
 8006cf2:	429c      	cmp	r4, r3
 8006cf4:	dd0b      	ble.n	8006d0e <__ieee754_pow+0x12e>
 8006cf6:	2f00      	cmp	r7, #0
 8006cf8:	f2c0 8449 	blt.w	800758e <__ieee754_pow+0x9ae>
 8006cfc:	e9dd bc02 	ldrd	fp, ip, [sp, #8]
 8006d00:	4658      	mov	r0, fp
 8006d02:	4661      	mov	r1, ip
 8006d04:	b013      	add	sp, #76	; 0x4c
 8006d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0a:	2302      	movs	r3, #2
 8006d0c:	e7e2      	b.n	8006cd4 <__ieee754_pow+0xf4>
 8006d0e:	2f00      	cmp	r7, #0
 8006d10:	f04f 0b00 	mov.w	fp, #0
 8006d14:	f04f 0c00 	mov.w	ip, #0
 8006d18:	daf2      	bge.n	8006d00 <__ieee754_pow+0x120>
 8006d1a:	e9dd b302 	ldrd	fp, r3, [sp, #8]
 8006d1e:	f103 4c00 	add.w	ip, r3, #2147483648	; 0x80000000
 8006d22:	e7ed      	b.n	8006d00 <__ieee754_pow+0x120>
 8006d24:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8006d28:	d106      	bne.n	8006d38 <__ieee754_pow+0x158>
 8006d2a:	4642      	mov	r2, r8
 8006d2c:	464b      	mov	r3, r9
 8006d2e:	4640      	mov	r0, r8
 8006d30:	4649      	mov	r1, r9
 8006d32:	f7f9 fbd1 	bl	80004d8 <__aeabi_dmul>
 8006d36:	e770      	b.n	8006c1a <__ieee754_pow+0x3a>
 8006d38:	4b3a      	ldr	r3, [pc, #232]	; (8006e24 <__ieee754_pow+0x244>)
 8006d3a:	429f      	cmp	r7, r3
 8006d3c:	d10a      	bne.n	8006d54 <__ieee754_pow+0x174>
 8006d3e:	2d00      	cmp	r5, #0
 8006d40:	db08      	blt.n	8006d54 <__ieee754_pow+0x174>
 8006d42:	4640      	mov	r0, r8
 8006d44:	4649      	mov	r1, r9
 8006d46:	b013      	add	sp, #76	; 0x4c
 8006d48:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	f000 bd0a 	b.w	8007764 <__ieee754_sqrt>
 8006d50:	2300      	movs	r3, #0
 8006d52:	9300      	str	r3, [sp, #0]
 8006d54:	4640      	mov	r0, r8
 8006d56:	4649      	mov	r1, r9
 8006d58:	f000 fc58 	bl	800760c <fabs>
 8006d5c:	4683      	mov	fp, r0
 8006d5e:	468c      	mov	ip, r1
 8006d60:	f1ba 0f00 	cmp.w	sl, #0
 8006d64:	d128      	bne.n	8006db8 <__ieee754_pow+0x1d8>
 8006d66:	b124      	cbz	r4, 8006d72 <__ieee754_pow+0x192>
 8006d68:	4b2c      	ldr	r3, [pc, #176]	; (8006e1c <__ieee754_pow+0x23c>)
 8006d6a:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d122      	bne.n	8006db8 <__ieee754_pow+0x1d8>
 8006d72:	2f00      	cmp	r7, #0
 8006d74:	da07      	bge.n	8006d86 <__ieee754_pow+0x1a6>
 8006d76:	465a      	mov	r2, fp
 8006d78:	4663      	mov	r3, ip
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	4927      	ldr	r1, [pc, #156]	; (8006e1c <__ieee754_pow+0x23c>)
 8006d7e:	f7f9 fcd5 	bl	800072c <__aeabi_ddiv>
 8006d82:	4683      	mov	fp, r0
 8006d84:	468c      	mov	ip, r1
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	daba      	bge.n	8006d00 <__ieee754_pow+0x120>
 8006d8a:	9b00      	ldr	r3, [sp, #0]
 8006d8c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006d90:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006d94:	431c      	orrs	r4, r3
 8006d96:	d108      	bne.n	8006daa <__ieee754_pow+0x1ca>
 8006d98:	465a      	mov	r2, fp
 8006d9a:	4663      	mov	r3, ip
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	4661      	mov	r1, ip
 8006da0:	f7f9 f9e2 	bl	8000168 <__aeabi_dsub>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	e790      	b.n	8006ccc <__ieee754_pow+0xec>
 8006daa:	9b00      	ldr	r3, [sp, #0]
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d1a7      	bne.n	8006d00 <__ieee754_pow+0x120>
 8006db0:	f10c 4300 	add.w	r3, ip, #2147483648	; 0x80000000
 8006db4:	469c      	mov	ip, r3
 8006db6:	e7a3      	b.n	8006d00 <__ieee754_pow+0x120>
 8006db8:	0feb      	lsrs	r3, r5, #31
 8006dba:	3b01      	subs	r3, #1
 8006dbc:	930c      	str	r3, [sp, #48]	; 0x30
 8006dbe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006dc0:	9b00      	ldr	r3, [sp, #0]
 8006dc2:	4313      	orrs	r3, r2
 8006dc4:	d104      	bne.n	8006dd0 <__ieee754_pow+0x1f0>
 8006dc6:	4642      	mov	r2, r8
 8006dc8:	464b      	mov	r3, r9
 8006dca:	4640      	mov	r0, r8
 8006dcc:	4649      	mov	r1, r9
 8006dce:	e7e7      	b.n	8006da0 <__ieee754_pow+0x1c0>
 8006dd0:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <__ieee754_pow+0x248>)
 8006dd2:	429e      	cmp	r6, r3
 8006dd4:	f340 80f6 	ble.w	8006fc4 <__ieee754_pow+0x3e4>
 8006dd8:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8006ddc:	429e      	cmp	r6, r3
 8006dde:	4b10      	ldr	r3, [pc, #64]	; (8006e20 <__ieee754_pow+0x240>)
 8006de0:	dd09      	ble.n	8006df6 <__ieee754_pow+0x216>
 8006de2:	429c      	cmp	r4, r3
 8006de4:	dc0c      	bgt.n	8006e00 <__ieee754_pow+0x220>
 8006de6:	2f00      	cmp	r7, #0
 8006de8:	da0c      	bge.n	8006e04 <__ieee754_pow+0x224>
 8006dea:	2000      	movs	r0, #0
 8006dec:	b013      	add	sp, #76	; 0x4c
 8006dee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006df2:	f000 bcb2 	b.w	800775a <__math_oflow>
 8006df6:	429c      	cmp	r4, r3
 8006df8:	dbf5      	blt.n	8006de6 <__ieee754_pow+0x206>
 8006dfa:	4b08      	ldr	r3, [pc, #32]	; (8006e1c <__ieee754_pow+0x23c>)
 8006dfc:	429c      	cmp	r4, r3
 8006dfe:	dd15      	ble.n	8006e2c <__ieee754_pow+0x24c>
 8006e00:	2f00      	cmp	r7, #0
 8006e02:	dcf2      	bgt.n	8006dea <__ieee754_pow+0x20a>
 8006e04:	2000      	movs	r0, #0
 8006e06:	b013      	add	sp, #76	; 0x4c
 8006e08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	f000 bca0 	b.w	8007750 <__math_uflow>
 8006e10:	fff00000 	.word	0xfff00000
 8006e14:	7ff00000 	.word	0x7ff00000
 8006e18:	433fffff 	.word	0x433fffff
 8006e1c:	3ff00000 	.word	0x3ff00000
 8006e20:	3fefffff 	.word	0x3fefffff
 8006e24:	3fe00000 	.word	0x3fe00000
 8006e28:	41e00000 	.word	0x41e00000
 8006e2c:	4661      	mov	r1, ip
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4658      	mov	r0, fp
 8006e32:	4b5f      	ldr	r3, [pc, #380]	; (8006fb0 <__ieee754_pow+0x3d0>)
 8006e34:	f7f9 f998 	bl	8000168 <__aeabi_dsub>
 8006e38:	a355      	add	r3, pc, #340	; (adr r3, 8006f90 <__ieee754_pow+0x3b0>)
 8006e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e3e:	4604      	mov	r4, r0
 8006e40:	460d      	mov	r5, r1
 8006e42:	f7f9 fb49 	bl	80004d8 <__aeabi_dmul>
 8006e46:	a354      	add	r3, pc, #336	; (adr r3, 8006f98 <__ieee754_pow+0x3b8>)
 8006e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e4c:	4606      	mov	r6, r0
 8006e4e:	460f      	mov	r7, r1
 8006e50:	4620      	mov	r0, r4
 8006e52:	4629      	mov	r1, r5
 8006e54:	f7f9 fb40 	bl	80004d8 <__aeabi_dmul>
 8006e58:	2200      	movs	r2, #0
 8006e5a:	4682      	mov	sl, r0
 8006e5c:	468b      	mov	fp, r1
 8006e5e:	4620      	mov	r0, r4
 8006e60:	4629      	mov	r1, r5
 8006e62:	4b54      	ldr	r3, [pc, #336]	; (8006fb4 <__ieee754_pow+0x3d4>)
 8006e64:	f7f9 fb38 	bl	80004d8 <__aeabi_dmul>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	a14c      	add	r1, pc, #304	; (adr r1, 8006fa0 <__ieee754_pow+0x3c0>)
 8006e6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006e72:	f7f9 f979 	bl	8000168 <__aeabi_dsub>
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	f7f9 fb2d 	bl	80004d8 <__aeabi_dmul>
 8006e7e:	4602      	mov	r2, r0
 8006e80:	460b      	mov	r3, r1
 8006e82:	2000      	movs	r0, #0
 8006e84:	494c      	ldr	r1, [pc, #304]	; (8006fb8 <__ieee754_pow+0x3d8>)
 8006e86:	f7f9 f96f 	bl	8000168 <__aeabi_dsub>
 8006e8a:	4622      	mov	r2, r4
 8006e8c:	462b      	mov	r3, r5
 8006e8e:	4680      	mov	r8, r0
 8006e90:	4689      	mov	r9, r1
 8006e92:	4620      	mov	r0, r4
 8006e94:	4629      	mov	r1, r5
 8006e96:	f7f9 fb1f 	bl	80004d8 <__aeabi_dmul>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	4640      	mov	r0, r8
 8006ea0:	4649      	mov	r1, r9
 8006ea2:	f7f9 fb19 	bl	80004d8 <__aeabi_dmul>
 8006ea6:	a340      	add	r3, pc, #256	; (adr r3, 8006fa8 <__ieee754_pow+0x3c8>)
 8006ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eac:	f7f9 fb14 	bl	80004d8 <__aeabi_dmul>
 8006eb0:	4602      	mov	r2, r0
 8006eb2:	460b      	mov	r3, r1
 8006eb4:	4650      	mov	r0, sl
 8006eb6:	4659      	mov	r1, fp
 8006eb8:	f7f9 f956 	bl	8000168 <__aeabi_dsub>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	460b      	mov	r3, r1
 8006ec0:	4604      	mov	r4, r0
 8006ec2:	460d      	mov	r5, r1
 8006ec4:	4630      	mov	r0, r6
 8006ec6:	4639      	mov	r1, r7
 8006ec8:	f7f9 f950 	bl	800016c <__adddf3>
 8006ecc:	2000      	movs	r0, #0
 8006ece:	4632      	mov	r2, r6
 8006ed0:	463b      	mov	r3, r7
 8006ed2:	4682      	mov	sl, r0
 8006ed4:	468b      	mov	fp, r1
 8006ed6:	f7f9 f947 	bl	8000168 <__aeabi_dsub>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4620      	mov	r0, r4
 8006ee0:	4629      	mov	r1, r5
 8006ee2:	f7f9 f941 	bl	8000168 <__aeabi_dsub>
 8006ee6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006eea:	9b00      	ldr	r3, [sp, #0]
 8006eec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	4313      	orrs	r3, r2
 8006ef2:	f04f 0600 	mov.w	r6, #0
 8006ef6:	f04f 0200 	mov.w	r2, #0
 8006efa:	bf0c      	ite	eq
 8006efc:	4b2f      	ldreq	r3, [pc, #188]	; (8006fbc <__ieee754_pow+0x3dc>)
 8006efe:	4b2c      	ldrne	r3, [pc, #176]	; (8006fb0 <__ieee754_pow+0x3d0>)
 8006f00:	4604      	mov	r4, r0
 8006f02:	460d      	mov	r5, r1
 8006f04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006f08:	e9cd 2300 	strd	r2, r3, [sp]
 8006f0c:	4632      	mov	r2, r6
 8006f0e:	463b      	mov	r3, r7
 8006f10:	f7f9 f92a 	bl	8000168 <__aeabi_dsub>
 8006f14:	4652      	mov	r2, sl
 8006f16:	465b      	mov	r3, fp
 8006f18:	f7f9 fade 	bl	80004d8 <__aeabi_dmul>
 8006f1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f20:	4680      	mov	r8, r0
 8006f22:	4689      	mov	r9, r1
 8006f24:	4620      	mov	r0, r4
 8006f26:	4629      	mov	r1, r5
 8006f28:	f7f9 fad6 	bl	80004d8 <__aeabi_dmul>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4640      	mov	r0, r8
 8006f32:	4649      	mov	r1, r9
 8006f34:	f7f9 f91a 	bl	800016c <__adddf3>
 8006f38:	4632      	mov	r2, r6
 8006f3a:	463b      	mov	r3, r7
 8006f3c:	4680      	mov	r8, r0
 8006f3e:	4689      	mov	r9, r1
 8006f40:	4650      	mov	r0, sl
 8006f42:	4659      	mov	r1, fp
 8006f44:	f7f9 fac8 	bl	80004d8 <__aeabi_dmul>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	460b      	mov	r3, r1
 8006f4e:	4602      	mov	r2, r0
 8006f50:	4649      	mov	r1, r9
 8006f52:	4640      	mov	r0, r8
 8006f54:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006f58:	f7f9 f908 	bl	800016c <__adddf3>
 8006f5c:	4b18      	ldr	r3, [pc, #96]	; (8006fc0 <__ieee754_pow+0x3e0>)
 8006f5e:	4682      	mov	sl, r0
 8006f60:	4299      	cmp	r1, r3
 8006f62:	460f      	mov	r7, r1
 8006f64:	460e      	mov	r6, r1
 8006f66:	f340 82e7 	ble.w	8007538 <__ieee754_pow+0x958>
 8006f6a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8006f6e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8006f72:	4303      	orrs	r3, r0
 8006f74:	f000 81e2 	beq.w	800733c <__ieee754_pow+0x75c>
 8006f78:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	2300      	movs	r3, #0
 8006f80:	f7f9 fd1c 	bl	80009bc <__aeabi_dcmplt>
 8006f84:	3800      	subs	r0, #0
 8006f86:	bf18      	it	ne
 8006f88:	2001      	movne	r0, #1
 8006f8a:	e72f      	b.n	8006dec <__ieee754_pow+0x20c>
 8006f8c:	f3af 8000 	nop.w
 8006f90:	60000000 	.word	0x60000000
 8006f94:	3ff71547 	.word	0x3ff71547
 8006f98:	f85ddf44 	.word	0xf85ddf44
 8006f9c:	3e54ae0b 	.word	0x3e54ae0b
 8006fa0:	55555555 	.word	0x55555555
 8006fa4:	3fd55555 	.word	0x3fd55555
 8006fa8:	652b82fe 	.word	0x652b82fe
 8006fac:	3ff71547 	.word	0x3ff71547
 8006fb0:	3ff00000 	.word	0x3ff00000
 8006fb4:	3fd00000 	.word	0x3fd00000
 8006fb8:	3fe00000 	.word	0x3fe00000
 8006fbc:	bff00000 	.word	0xbff00000
 8006fc0:	408fffff 	.word	0x408fffff
 8006fc4:	4bd4      	ldr	r3, [pc, #848]	; (8007318 <__ieee754_pow+0x738>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	402b      	ands	r3, r5
 8006fca:	b943      	cbnz	r3, 8006fde <__ieee754_pow+0x3fe>
 8006fcc:	4658      	mov	r0, fp
 8006fce:	4661      	mov	r1, ip
 8006fd0:	4bd2      	ldr	r3, [pc, #840]	; (800731c <__ieee754_pow+0x73c>)
 8006fd2:	f7f9 fa81 	bl	80004d8 <__aeabi_dmul>
 8006fd6:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8006fda:	4683      	mov	fp, r0
 8006fdc:	460c      	mov	r4, r1
 8006fde:	1523      	asrs	r3, r4, #20
 8006fe0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8006fe4:	4413      	add	r3, r2
 8006fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8006fe8:	4bcd      	ldr	r3, [pc, #820]	; (8007320 <__ieee754_pow+0x740>)
 8006fea:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8006fee:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8006ff2:	429c      	cmp	r4, r3
 8006ff4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ff8:	dd08      	ble.n	800700c <__ieee754_pow+0x42c>
 8006ffa:	4bca      	ldr	r3, [pc, #808]	; (8007324 <__ieee754_pow+0x744>)
 8006ffc:	429c      	cmp	r4, r3
 8006ffe:	f340 8164 	ble.w	80072ca <__ieee754_pow+0x6ea>
 8007002:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007004:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8007008:	3301      	adds	r3, #1
 800700a:	930b      	str	r3, [sp, #44]	; 0x2c
 800700c:	2600      	movs	r6, #0
 800700e:	00f3      	lsls	r3, r6, #3
 8007010:	930d      	str	r3, [sp, #52]	; 0x34
 8007012:	4bc5      	ldr	r3, [pc, #788]	; (8007328 <__ieee754_pow+0x748>)
 8007014:	4658      	mov	r0, fp
 8007016:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800701a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800701e:	4629      	mov	r1, r5
 8007020:	461a      	mov	r2, r3
 8007022:	e9cd 3408 	strd	r3, r4, [sp, #32]
 8007026:	4623      	mov	r3, r4
 8007028:	f7f9 f89e 	bl	8000168 <__aeabi_dsub>
 800702c:	46da      	mov	sl, fp
 800702e:	462b      	mov	r3, r5
 8007030:	4652      	mov	r2, sl
 8007032:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007036:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800703a:	f7f9 f897 	bl	800016c <__adddf3>
 800703e:	4602      	mov	r2, r0
 8007040:	460b      	mov	r3, r1
 8007042:	2000      	movs	r0, #0
 8007044:	49b9      	ldr	r1, [pc, #740]	; (800732c <__ieee754_pow+0x74c>)
 8007046:	f7f9 fb71 	bl	800072c <__aeabi_ddiv>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007052:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007056:	f7f9 fa3f 	bl	80004d8 <__aeabi_dmul>
 800705a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800705e:	e9dd 3406 	ldrd	r3, r4, [sp, #24]
 8007062:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007066:	2300      	movs	r3, #0
 8007068:	2200      	movs	r2, #0
 800706a:	46ab      	mov	fp, r5
 800706c:	106d      	asrs	r5, r5, #1
 800706e:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007072:	9304      	str	r3, [sp, #16]
 8007074:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007078:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800707c:	eb05 4386 	add.w	r3, r5, r6, lsl #18
 8007080:	4640      	mov	r0, r8
 8007082:	4649      	mov	r1, r9
 8007084:	4614      	mov	r4, r2
 8007086:	461d      	mov	r5, r3
 8007088:	f7f9 fa26 	bl	80004d8 <__aeabi_dmul>
 800708c:	4602      	mov	r2, r0
 800708e:	460b      	mov	r3, r1
 8007090:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007094:	f7f9 f868 	bl	8000168 <__aeabi_dsub>
 8007098:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 f860 	bl	8000168 <__aeabi_dsub>
 80070a8:	4602      	mov	r2, r0
 80070aa:	460b      	mov	r3, r1
 80070ac:	4650      	mov	r0, sl
 80070ae:	4659      	mov	r1, fp
 80070b0:	f7f9 f85a 	bl	8000168 <__aeabi_dsub>
 80070b4:	4642      	mov	r2, r8
 80070b6:	464b      	mov	r3, r9
 80070b8:	f7f9 fa0e 	bl	80004d8 <__aeabi_dmul>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4630      	mov	r0, r6
 80070c2:	4639      	mov	r1, r7
 80070c4:	f7f9 f850 	bl	8000168 <__aeabi_dsub>
 80070c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070cc:	f7f9 fa04 	bl	80004d8 <__aeabi_dmul>
 80070d0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80070d4:	4682      	mov	sl, r0
 80070d6:	468b      	mov	fp, r1
 80070d8:	4610      	mov	r0, r2
 80070da:	4619      	mov	r1, r3
 80070dc:	f7f9 f9fc 	bl	80004d8 <__aeabi_dmul>
 80070e0:	a37b      	add	r3, pc, #492	; (adr r3, 80072d0 <__ieee754_pow+0x6f0>)
 80070e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e6:	4604      	mov	r4, r0
 80070e8:	460d      	mov	r5, r1
 80070ea:	f7f9 f9f5 	bl	80004d8 <__aeabi_dmul>
 80070ee:	a37a      	add	r3, pc, #488	; (adr r3, 80072d8 <__ieee754_pow+0x6f8>)
 80070f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070f4:	f7f9 f83a 	bl	800016c <__adddf3>
 80070f8:	4622      	mov	r2, r4
 80070fa:	462b      	mov	r3, r5
 80070fc:	f7f9 f9ec 	bl	80004d8 <__aeabi_dmul>
 8007100:	a377      	add	r3, pc, #476	; (adr r3, 80072e0 <__ieee754_pow+0x700>)
 8007102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007106:	f7f9 f831 	bl	800016c <__adddf3>
 800710a:	4622      	mov	r2, r4
 800710c:	462b      	mov	r3, r5
 800710e:	f7f9 f9e3 	bl	80004d8 <__aeabi_dmul>
 8007112:	a375      	add	r3, pc, #468	; (adr r3, 80072e8 <__ieee754_pow+0x708>)
 8007114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007118:	f7f9 f828 	bl	800016c <__adddf3>
 800711c:	4622      	mov	r2, r4
 800711e:	462b      	mov	r3, r5
 8007120:	f7f9 f9da 	bl	80004d8 <__aeabi_dmul>
 8007124:	a372      	add	r3, pc, #456	; (adr r3, 80072f0 <__ieee754_pow+0x710>)
 8007126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712a:	f7f9 f81f 	bl	800016c <__adddf3>
 800712e:	4622      	mov	r2, r4
 8007130:	462b      	mov	r3, r5
 8007132:	f7f9 f9d1 	bl	80004d8 <__aeabi_dmul>
 8007136:	a370      	add	r3, pc, #448	; (adr r3, 80072f8 <__ieee754_pow+0x718>)
 8007138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800713c:	f7f9 f816 	bl	800016c <__adddf3>
 8007140:	4622      	mov	r2, r4
 8007142:	4606      	mov	r6, r0
 8007144:	460f      	mov	r7, r1
 8007146:	462b      	mov	r3, r5
 8007148:	4620      	mov	r0, r4
 800714a:	4629      	mov	r1, r5
 800714c:	f7f9 f9c4 	bl	80004d8 <__aeabi_dmul>
 8007150:	4602      	mov	r2, r0
 8007152:	460b      	mov	r3, r1
 8007154:	4630      	mov	r0, r6
 8007156:	4639      	mov	r1, r7
 8007158:	f7f9 f9be 	bl	80004d8 <__aeabi_dmul>
 800715c:	4604      	mov	r4, r0
 800715e:	460d      	mov	r5, r1
 8007160:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007164:	4642      	mov	r2, r8
 8007166:	464b      	mov	r3, r9
 8007168:	f7f9 f800 	bl	800016c <__adddf3>
 800716c:	4652      	mov	r2, sl
 800716e:	465b      	mov	r3, fp
 8007170:	f7f9 f9b2 	bl	80004d8 <__aeabi_dmul>
 8007174:	4622      	mov	r2, r4
 8007176:	462b      	mov	r3, r5
 8007178:	f7f8 fff8 	bl	800016c <__adddf3>
 800717c:	4642      	mov	r2, r8
 800717e:	4606      	mov	r6, r0
 8007180:	460f      	mov	r7, r1
 8007182:	464b      	mov	r3, r9
 8007184:	4640      	mov	r0, r8
 8007186:	4649      	mov	r1, r9
 8007188:	f7f9 f9a6 	bl	80004d8 <__aeabi_dmul>
 800718c:	4602      	mov	r2, r0
 800718e:	460b      	mov	r3, r1
 8007190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8007194:	2200      	movs	r2, #0
 8007196:	4b66      	ldr	r3, [pc, #408]	; (8007330 <__ieee754_pow+0x750>)
 8007198:	f7f8 ffe8 	bl	800016c <__adddf3>
 800719c:	4632      	mov	r2, r6
 800719e:	463b      	mov	r3, r7
 80071a0:	f7f8 ffe4 	bl	800016c <__adddf3>
 80071a4:	2400      	movs	r4, #0
 80071a6:	460d      	mov	r5, r1
 80071a8:	4622      	mov	r2, r4
 80071aa:	460b      	mov	r3, r1
 80071ac:	4640      	mov	r0, r8
 80071ae:	4649      	mov	r1, r9
 80071b0:	f7f9 f992 	bl	80004d8 <__aeabi_dmul>
 80071b4:	2200      	movs	r2, #0
 80071b6:	4680      	mov	r8, r0
 80071b8:	4689      	mov	r9, r1
 80071ba:	4620      	mov	r0, r4
 80071bc:	4629      	mov	r1, r5
 80071be:	4b5c      	ldr	r3, [pc, #368]	; (8007330 <__ieee754_pow+0x750>)
 80071c0:	f7f8 ffd2 	bl	8000168 <__aeabi_dsub>
 80071c4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80071c8:	f7f8 ffce 	bl	8000168 <__aeabi_dsub>
 80071cc:	4602      	mov	r2, r0
 80071ce:	460b      	mov	r3, r1
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f8 ffc8 	bl	8000168 <__aeabi_dsub>
 80071d8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071dc:	f7f9 f97c 	bl	80004d8 <__aeabi_dmul>
 80071e0:	4622      	mov	r2, r4
 80071e2:	4606      	mov	r6, r0
 80071e4:	460f      	mov	r7, r1
 80071e6:	462b      	mov	r3, r5
 80071e8:	4650      	mov	r0, sl
 80071ea:	4659      	mov	r1, fp
 80071ec:	f7f9 f974 	bl	80004d8 <__aeabi_dmul>
 80071f0:	4602      	mov	r2, r0
 80071f2:	460b      	mov	r3, r1
 80071f4:	4630      	mov	r0, r6
 80071f6:	4639      	mov	r1, r7
 80071f8:	f7f8 ffb8 	bl	800016c <__adddf3>
 80071fc:	2400      	movs	r4, #0
 80071fe:	4606      	mov	r6, r0
 8007200:	460f      	mov	r7, r1
 8007202:	4602      	mov	r2, r0
 8007204:	460b      	mov	r3, r1
 8007206:	4640      	mov	r0, r8
 8007208:	4649      	mov	r1, r9
 800720a:	f7f8 ffaf 	bl	800016c <__adddf3>
 800720e:	a33c      	add	r3, pc, #240	; (adr r3, 8007300 <__ieee754_pow+0x720>)
 8007210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007214:	4620      	mov	r0, r4
 8007216:	460d      	mov	r5, r1
 8007218:	f7f9 f95e 	bl	80004d8 <__aeabi_dmul>
 800721c:	4642      	mov	r2, r8
 800721e:	464b      	mov	r3, r9
 8007220:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007224:	4620      	mov	r0, r4
 8007226:	4629      	mov	r1, r5
 8007228:	f7f8 ff9e 	bl	8000168 <__aeabi_dsub>
 800722c:	4602      	mov	r2, r0
 800722e:	460b      	mov	r3, r1
 8007230:	4630      	mov	r0, r6
 8007232:	4639      	mov	r1, r7
 8007234:	f7f8 ff98 	bl	8000168 <__aeabi_dsub>
 8007238:	a333      	add	r3, pc, #204	; (adr r3, 8007308 <__ieee754_pow+0x728>)
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	f7f9 f94b 	bl	80004d8 <__aeabi_dmul>
 8007242:	a333      	add	r3, pc, #204	; (adr r3, 8007310 <__ieee754_pow+0x730>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	4620      	mov	r0, r4
 800724e:	4629      	mov	r1, r5
 8007250:	f7f9 f942 	bl	80004d8 <__aeabi_dmul>
 8007254:	4602      	mov	r2, r0
 8007256:	460b      	mov	r3, r1
 8007258:	4630      	mov	r0, r6
 800725a:	4639      	mov	r1, r7
 800725c:	f7f8 ff86 	bl	800016c <__adddf3>
 8007260:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007262:	4b34      	ldr	r3, [pc, #208]	; (8007334 <__ieee754_pow+0x754>)
 8007264:	4413      	add	r3, r2
 8007266:	e9d3 2300 	ldrd	r2, r3, [r3]
 800726a:	f7f8 ff7f 	bl	800016c <__adddf3>
 800726e:	4680      	mov	r8, r0
 8007270:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007272:	4689      	mov	r9, r1
 8007274:	f7f9 f8c6 	bl	8000404 <__aeabi_i2d>
 8007278:	4604      	mov	r4, r0
 800727a:	460d      	mov	r5, r1
 800727c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007280:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007282:	4b2d      	ldr	r3, [pc, #180]	; (8007338 <__ieee754_pow+0x758>)
 8007284:	4413      	add	r3, r2
 8007286:	e9d3 6700 	ldrd	r6, r7, [r3]
 800728a:	4642      	mov	r2, r8
 800728c:	464b      	mov	r3, r9
 800728e:	f7f8 ff6d 	bl	800016c <__adddf3>
 8007292:	4632      	mov	r2, r6
 8007294:	463b      	mov	r3, r7
 8007296:	f7f8 ff69 	bl	800016c <__adddf3>
 800729a:	4622      	mov	r2, r4
 800729c:	462b      	mov	r3, r5
 800729e:	f7f8 ff65 	bl	800016c <__adddf3>
 80072a2:	2000      	movs	r0, #0
 80072a4:	4622      	mov	r2, r4
 80072a6:	462b      	mov	r3, r5
 80072a8:	4682      	mov	sl, r0
 80072aa:	468b      	mov	fp, r1
 80072ac:	f7f8 ff5c 	bl	8000168 <__aeabi_dsub>
 80072b0:	4632      	mov	r2, r6
 80072b2:	463b      	mov	r3, r7
 80072b4:	f7f8 ff58 	bl	8000168 <__aeabi_dsub>
 80072b8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80072bc:	f7f8 ff54 	bl	8000168 <__aeabi_dsub>
 80072c0:	4602      	mov	r2, r0
 80072c2:	460b      	mov	r3, r1
 80072c4:	4640      	mov	r0, r8
 80072c6:	4649      	mov	r1, r9
 80072c8:	e60b      	b.n	8006ee2 <__ieee754_pow+0x302>
 80072ca:	2601      	movs	r6, #1
 80072cc:	e69f      	b.n	800700e <__ieee754_pow+0x42e>
 80072ce:	bf00      	nop
 80072d0:	4a454eef 	.word	0x4a454eef
 80072d4:	3fca7e28 	.word	0x3fca7e28
 80072d8:	93c9db65 	.word	0x93c9db65
 80072dc:	3fcd864a 	.word	0x3fcd864a
 80072e0:	a91d4101 	.word	0xa91d4101
 80072e4:	3fd17460 	.word	0x3fd17460
 80072e8:	518f264d 	.word	0x518f264d
 80072ec:	3fd55555 	.word	0x3fd55555
 80072f0:	db6fabff 	.word	0xdb6fabff
 80072f4:	3fdb6db6 	.word	0x3fdb6db6
 80072f8:	33333303 	.word	0x33333303
 80072fc:	3fe33333 	.word	0x3fe33333
 8007300:	e0000000 	.word	0xe0000000
 8007304:	3feec709 	.word	0x3feec709
 8007308:	dc3a03fd 	.word	0xdc3a03fd
 800730c:	3feec709 	.word	0x3feec709
 8007310:	145b01f5 	.word	0x145b01f5
 8007314:	be3e2fe0 	.word	0xbe3e2fe0
 8007318:	7ff00000 	.word	0x7ff00000
 800731c:	43400000 	.word	0x43400000
 8007320:	0003988e 	.word	0x0003988e
 8007324:	000bb679 	.word	0x000bb679
 8007328:	08007d60 	.word	0x08007d60
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	40080000 	.word	0x40080000
 8007334:	08007d80 	.word	0x08007d80
 8007338:	08007d70 	.word	0x08007d70
 800733c:	a39c      	add	r3, pc, #624	; (adr r3, 80075b0 <__ieee754_pow+0x9d0>)
 800733e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007342:	4640      	mov	r0, r8
 8007344:	4649      	mov	r1, r9
 8007346:	f7f8 ff11 	bl	800016c <__adddf3>
 800734a:	4622      	mov	r2, r4
 800734c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007350:	462b      	mov	r3, r5
 8007352:	4650      	mov	r0, sl
 8007354:	4639      	mov	r1, r7
 8007356:	f7f8 ff07 	bl	8000168 <__aeabi_dsub>
 800735a:	4602      	mov	r2, r0
 800735c:	460b      	mov	r3, r1
 800735e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007362:	f7f9 fb49 	bl	80009f8 <__aeabi_dcmpgt>
 8007366:	2800      	cmp	r0, #0
 8007368:	f47f ae06 	bne.w	8006f78 <__ieee754_pow+0x398>
 800736c:	4aa2      	ldr	r2, [pc, #648]	; (80075f8 <__ieee754_pow+0xa18>)
 800736e:	f026 4300 	bic.w	r3, r6, #2147483648	; 0x80000000
 8007372:	4293      	cmp	r3, r2
 8007374:	f340 8100 	ble.w	8007578 <__ieee754_pow+0x998>
 8007378:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800737c:	151b      	asrs	r3, r3, #20
 800737e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007382:	fa4a fa03 	asr.w	sl, sl, r3
 8007386:	44b2      	add	sl, r6
 8007388:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800738c:	489b      	ldr	r0, [pc, #620]	; (80075fc <__ieee754_pow+0xa1c>)
 800738e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007392:	4108      	asrs	r0, r1
 8007394:	ea00 030a 	and.w	r3, r0, sl
 8007398:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800739c:	f1c1 0114 	rsb	r1, r1, #20
 80073a0:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80073a4:	fa4a fa01 	asr.w	sl, sl, r1
 80073a8:	2e00      	cmp	r6, #0
 80073aa:	f04f 0200 	mov.w	r2, #0
 80073ae:	4620      	mov	r0, r4
 80073b0:	4629      	mov	r1, r5
 80073b2:	bfb8      	it	lt
 80073b4:	f1ca 0a00 	rsblt	sl, sl, #0
 80073b8:	f7f8 fed6 	bl	8000168 <__aeabi_dsub>
 80073bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80073c0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80073c4:	2400      	movs	r4, #0
 80073c6:	4642      	mov	r2, r8
 80073c8:	464b      	mov	r3, r9
 80073ca:	f7f8 fecf 	bl	800016c <__adddf3>
 80073ce:	a37a      	add	r3, pc, #488	; (adr r3, 80075b8 <__ieee754_pow+0x9d8>)
 80073d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073d4:	4620      	mov	r0, r4
 80073d6:	460d      	mov	r5, r1
 80073d8:	f7f9 f87e 	bl	80004d8 <__aeabi_dmul>
 80073dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80073e0:	4606      	mov	r6, r0
 80073e2:	460f      	mov	r7, r1
 80073e4:	4620      	mov	r0, r4
 80073e6:	4629      	mov	r1, r5
 80073e8:	f7f8 febe 	bl	8000168 <__aeabi_dsub>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	4640      	mov	r0, r8
 80073f2:	4649      	mov	r1, r9
 80073f4:	f7f8 feb8 	bl	8000168 <__aeabi_dsub>
 80073f8:	a371      	add	r3, pc, #452	; (adr r3, 80075c0 <__ieee754_pow+0x9e0>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f9 f86b 	bl	80004d8 <__aeabi_dmul>
 8007402:	a371      	add	r3, pc, #452	; (adr r3, 80075c8 <__ieee754_pow+0x9e8>)
 8007404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007408:	4680      	mov	r8, r0
 800740a:	4689      	mov	r9, r1
 800740c:	4620      	mov	r0, r4
 800740e:	4629      	mov	r1, r5
 8007410:	f7f9 f862 	bl	80004d8 <__aeabi_dmul>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	4640      	mov	r0, r8
 800741a:	4649      	mov	r1, r9
 800741c:	f7f8 fea6 	bl	800016c <__adddf3>
 8007420:	4604      	mov	r4, r0
 8007422:	460d      	mov	r5, r1
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	4630      	mov	r0, r6
 800742a:	4639      	mov	r1, r7
 800742c:	f7f8 fe9e 	bl	800016c <__adddf3>
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	4680      	mov	r8, r0
 8007436:	4689      	mov	r9, r1
 8007438:	f7f8 fe96 	bl	8000168 <__aeabi_dsub>
 800743c:	4602      	mov	r2, r0
 800743e:	460b      	mov	r3, r1
 8007440:	4620      	mov	r0, r4
 8007442:	4629      	mov	r1, r5
 8007444:	f7f8 fe90 	bl	8000168 <__aeabi_dsub>
 8007448:	4642      	mov	r2, r8
 800744a:	4606      	mov	r6, r0
 800744c:	460f      	mov	r7, r1
 800744e:	464b      	mov	r3, r9
 8007450:	4640      	mov	r0, r8
 8007452:	4649      	mov	r1, r9
 8007454:	f7f9 f840 	bl	80004d8 <__aeabi_dmul>
 8007458:	a35d      	add	r3, pc, #372	; (adr r3, 80075d0 <__ieee754_pow+0x9f0>)
 800745a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800745e:	4604      	mov	r4, r0
 8007460:	460d      	mov	r5, r1
 8007462:	f7f9 f839 	bl	80004d8 <__aeabi_dmul>
 8007466:	a35c      	add	r3, pc, #368	; (adr r3, 80075d8 <__ieee754_pow+0x9f8>)
 8007468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800746c:	f7f8 fe7c 	bl	8000168 <__aeabi_dsub>
 8007470:	4622      	mov	r2, r4
 8007472:	462b      	mov	r3, r5
 8007474:	f7f9 f830 	bl	80004d8 <__aeabi_dmul>
 8007478:	a359      	add	r3, pc, #356	; (adr r3, 80075e0 <__ieee754_pow+0xa00>)
 800747a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800747e:	f7f8 fe75 	bl	800016c <__adddf3>
 8007482:	4622      	mov	r2, r4
 8007484:	462b      	mov	r3, r5
 8007486:	f7f9 f827 	bl	80004d8 <__aeabi_dmul>
 800748a:	a357      	add	r3, pc, #348	; (adr r3, 80075e8 <__ieee754_pow+0xa08>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	f7f8 fe6a 	bl	8000168 <__aeabi_dsub>
 8007494:	4622      	mov	r2, r4
 8007496:	462b      	mov	r3, r5
 8007498:	f7f9 f81e 	bl	80004d8 <__aeabi_dmul>
 800749c:	a354      	add	r3, pc, #336	; (adr r3, 80075f0 <__ieee754_pow+0xa10>)
 800749e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074a2:	f7f8 fe63 	bl	800016c <__adddf3>
 80074a6:	4622      	mov	r2, r4
 80074a8:	462b      	mov	r3, r5
 80074aa:	f7f9 f815 	bl	80004d8 <__aeabi_dmul>
 80074ae:	4602      	mov	r2, r0
 80074b0:	460b      	mov	r3, r1
 80074b2:	4640      	mov	r0, r8
 80074b4:	4649      	mov	r1, r9
 80074b6:	f7f8 fe57 	bl	8000168 <__aeabi_dsub>
 80074ba:	4604      	mov	r4, r0
 80074bc:	460d      	mov	r5, r1
 80074be:	4602      	mov	r2, r0
 80074c0:	460b      	mov	r3, r1
 80074c2:	4640      	mov	r0, r8
 80074c4:	4649      	mov	r1, r9
 80074c6:	f7f9 f807 	bl	80004d8 <__aeabi_dmul>
 80074ca:	2200      	movs	r2, #0
 80074cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80074d4:	4620      	mov	r0, r4
 80074d6:	4629      	mov	r1, r5
 80074d8:	f7f8 fe46 	bl	8000168 <__aeabi_dsub>
 80074dc:	4602      	mov	r2, r0
 80074de:	460b      	mov	r3, r1
 80074e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074e4:	f7f9 f922 	bl	800072c <__aeabi_ddiv>
 80074e8:	4632      	mov	r2, r6
 80074ea:	4604      	mov	r4, r0
 80074ec:	460d      	mov	r5, r1
 80074ee:	463b      	mov	r3, r7
 80074f0:	4640      	mov	r0, r8
 80074f2:	4649      	mov	r1, r9
 80074f4:	f7f8 fff0 	bl	80004d8 <__aeabi_dmul>
 80074f8:	4632      	mov	r2, r6
 80074fa:	463b      	mov	r3, r7
 80074fc:	f7f8 fe36 	bl	800016c <__adddf3>
 8007500:	4602      	mov	r2, r0
 8007502:	460b      	mov	r3, r1
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f8 fe2e 	bl	8000168 <__aeabi_dsub>
 800750c:	4642      	mov	r2, r8
 800750e:	464b      	mov	r3, r9
 8007510:	f7f8 fe2a 	bl	8000168 <__aeabi_dsub>
 8007514:	4602      	mov	r2, r0
 8007516:	460b      	mov	r3, r1
 8007518:	2000      	movs	r0, #0
 800751a:	4939      	ldr	r1, [pc, #228]	; (8007600 <__ieee754_pow+0xa20>)
 800751c:	f7f8 fe24 	bl	8000168 <__aeabi_dsub>
 8007520:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8007524:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8007528:	da29      	bge.n	800757e <__ieee754_pow+0x99e>
 800752a:	4652      	mov	r2, sl
 800752c:	f000 f874 	bl	8007618 <scalbn>
 8007530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007534:	f7ff bbfd 	b.w	8006d32 <__ieee754_pow+0x152>
 8007538:	4b32      	ldr	r3, [pc, #200]	; (8007604 <__ieee754_pow+0xa24>)
 800753a:	f021 4700 	bic.w	r7, r1, #2147483648	; 0x80000000
 800753e:	429f      	cmp	r7, r3
 8007540:	f77f af14 	ble.w	800736c <__ieee754_pow+0x78c>
 8007544:	4b30      	ldr	r3, [pc, #192]	; (8007608 <__ieee754_pow+0xa28>)
 8007546:	440b      	add	r3, r1
 8007548:	4303      	orrs	r3, r0
 800754a:	d009      	beq.n	8007560 <__ieee754_pow+0x980>
 800754c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007550:	2200      	movs	r2, #0
 8007552:	2300      	movs	r3, #0
 8007554:	f7f9 fa32 	bl	80009bc <__aeabi_dcmplt>
 8007558:	3800      	subs	r0, #0
 800755a:	bf18      	it	ne
 800755c:	2001      	movne	r0, #1
 800755e:	e452      	b.n	8006e06 <__ieee754_pow+0x226>
 8007560:	4622      	mov	r2, r4
 8007562:	462b      	mov	r3, r5
 8007564:	f7f8 fe00 	bl	8000168 <__aeabi_dsub>
 8007568:	4642      	mov	r2, r8
 800756a:	464b      	mov	r3, r9
 800756c:	f7f9 fa3a 	bl	80009e4 <__aeabi_dcmpge>
 8007570:	2800      	cmp	r0, #0
 8007572:	f43f aefb 	beq.w	800736c <__ieee754_pow+0x78c>
 8007576:	e7e9      	b.n	800754c <__ieee754_pow+0x96c>
 8007578:	f04f 0a00 	mov.w	sl, #0
 800757c:	e720      	b.n	80073c0 <__ieee754_pow+0x7e0>
 800757e:	4621      	mov	r1, r4
 8007580:	e7d6      	b.n	8007530 <__ieee754_pow+0x950>
 8007582:	f04f 0b00 	mov.w	fp, #0
 8007586:	f8df c078 	ldr.w	ip, [pc, #120]	; 8007600 <__ieee754_pow+0xa20>
 800758a:	f7ff bbb9 	b.w	8006d00 <__ieee754_pow+0x120>
 800758e:	f04f 0b00 	mov.w	fp, #0
 8007592:	f04f 0c00 	mov.w	ip, #0
 8007596:	f7ff bbb3 	b.w	8006d00 <__ieee754_pow+0x120>
 800759a:	4640      	mov	r0, r8
 800759c:	4649      	mov	r1, r9
 800759e:	f7ff bb3c 	b.w	8006c1a <__ieee754_pow+0x3a>
 80075a2:	9200      	str	r2, [sp, #0]
 80075a4:	f7ff bb88 	b.w	8006cb8 <__ieee754_pow+0xd8>
 80075a8:	2300      	movs	r3, #0
 80075aa:	f7ff bb72 	b.w	8006c92 <__ieee754_pow+0xb2>
 80075ae:	bf00      	nop
 80075b0:	652b82fe 	.word	0x652b82fe
 80075b4:	3c971547 	.word	0x3c971547
 80075b8:	00000000 	.word	0x00000000
 80075bc:	3fe62e43 	.word	0x3fe62e43
 80075c0:	fefa39ef 	.word	0xfefa39ef
 80075c4:	3fe62e42 	.word	0x3fe62e42
 80075c8:	0ca86c39 	.word	0x0ca86c39
 80075cc:	be205c61 	.word	0xbe205c61
 80075d0:	72bea4d0 	.word	0x72bea4d0
 80075d4:	3e663769 	.word	0x3e663769
 80075d8:	c5d26bf1 	.word	0xc5d26bf1
 80075dc:	3ebbbd41 	.word	0x3ebbbd41
 80075e0:	af25de2c 	.word	0xaf25de2c
 80075e4:	3f11566a 	.word	0x3f11566a
 80075e8:	16bebd93 	.word	0x16bebd93
 80075ec:	3f66c16c 	.word	0x3f66c16c
 80075f0:	5555553e 	.word	0x5555553e
 80075f4:	3fc55555 	.word	0x3fc55555
 80075f8:	3fe00000 	.word	0x3fe00000
 80075fc:	fff00000 	.word	0xfff00000
 8007600:	3ff00000 	.word	0x3ff00000
 8007604:	4090cbff 	.word	0x4090cbff
 8007608:	3f6f3400 	.word	0x3f6f3400

0800760c <fabs>:
 800760c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007610:	4619      	mov	r1, r3
 8007612:	4770      	bx	lr
 8007614:	0000      	movs	r0, r0
	...

08007618 <scalbn>:
 8007618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800761a:	4616      	mov	r6, r2
 800761c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007620:	4604      	mov	r4, r0
 8007622:	460d      	mov	r5, r1
 8007624:	460b      	mov	r3, r1
 8007626:	b992      	cbnz	r2, 800764e <scalbn+0x36>
 8007628:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800762c:	4303      	orrs	r3, r0
 800762e:	d03c      	beq.n	80076aa <scalbn+0x92>
 8007630:	4b31      	ldr	r3, [pc, #196]	; (80076f8 <scalbn+0xe0>)
 8007632:	2200      	movs	r2, #0
 8007634:	f7f8 ff50 	bl	80004d8 <__aeabi_dmul>
 8007638:	4b30      	ldr	r3, [pc, #192]	; (80076fc <scalbn+0xe4>)
 800763a:	4604      	mov	r4, r0
 800763c:	429e      	cmp	r6, r3
 800763e:	460d      	mov	r5, r1
 8007640:	da0f      	bge.n	8007662 <scalbn+0x4a>
 8007642:	a329      	add	r3, pc, #164	; (adr r3, 80076e8 <scalbn+0xd0>)
 8007644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007648:	f7f8 ff46 	bl	80004d8 <__aeabi_dmul>
 800764c:	e006      	b.n	800765c <scalbn+0x44>
 800764e:	f240 77ff 	movw	r7, #2047	; 0x7ff
 8007652:	42ba      	cmp	r2, r7
 8007654:	d109      	bne.n	800766a <scalbn+0x52>
 8007656:	4602      	mov	r2, r0
 8007658:	f7f8 fd88 	bl	800016c <__adddf3>
 800765c:	4604      	mov	r4, r0
 800765e:	460d      	mov	r5, r1
 8007660:	e023      	b.n	80076aa <scalbn+0x92>
 8007662:	460b      	mov	r3, r1
 8007664:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007668:	3a36      	subs	r2, #54	; 0x36
 800766a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800766e:	428e      	cmp	r6, r1
 8007670:	dd0e      	ble.n	8007690 <scalbn+0x78>
 8007672:	a31f      	add	r3, pc, #124	; (adr r3, 80076f0 <scalbn+0xd8>)
 8007674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007678:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 800767c:	f044 41fc 	orr.w	r1, r4, #2113929216	; 0x7e000000
 8007680:	f441 115f 	orr.w	r1, r1, #3653632	; 0x37c000
 8007684:	f441 5110 	orr.w	r1, r1, #9216	; 0x2400
 8007688:	481d      	ldr	r0, [pc, #116]	; (8007700 <scalbn+0xe8>)
 800768a:	f041 013c 	orr.w	r1, r1, #60	; 0x3c
 800768e:	e7db      	b.n	8007648 <scalbn+0x30>
 8007690:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007694:	4432      	add	r2, r6
 8007696:	428a      	cmp	r2, r1
 8007698:	dceb      	bgt.n	8007672 <scalbn+0x5a>
 800769a:	2a00      	cmp	r2, #0
 800769c:	dd08      	ble.n	80076b0 <scalbn+0x98>
 800769e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076a2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076a6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076aa:	4620      	mov	r0, r4
 80076ac:	4629      	mov	r1, r5
 80076ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076b0:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80076b4:	da0c      	bge.n	80076d0 <scalbn+0xb8>
 80076b6:	a30c      	add	r3, pc, #48	; (adr r3, 80076e8 <scalbn+0xd0>)
 80076b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076bc:	f005 4400 	and.w	r4, r5, #2147483648	; 0x80000000
 80076c0:	f044 71d2 	orr.w	r1, r4, #27525120	; 0x1a40000
 80076c4:	f441 31b7 	orr.w	r1, r1, #93696	; 0x16e00
 80076c8:	480e      	ldr	r0, [pc, #56]	; (8007704 <scalbn+0xec>)
 80076ca:	f041 011f 	orr.w	r1, r1, #31
 80076ce:	e7bb      	b.n	8007648 <scalbn+0x30>
 80076d0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80076d4:	3236      	adds	r2, #54	; 0x36
 80076d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80076da:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80076de:	4620      	mov	r0, r4
 80076e0:	4629      	mov	r1, r5
 80076e2:	2200      	movs	r2, #0
 80076e4:	4b08      	ldr	r3, [pc, #32]	; (8007708 <scalbn+0xf0>)
 80076e6:	e7af      	b.n	8007648 <scalbn+0x30>
 80076e8:	c2f8f359 	.word	0xc2f8f359
 80076ec:	01a56e1f 	.word	0x01a56e1f
 80076f0:	8800759c 	.word	0x8800759c
 80076f4:	7e37e43c 	.word	0x7e37e43c
 80076f8:	43500000 	.word	0x43500000
 80076fc:	ffff3cb0 	.word	0xffff3cb0
 8007700:	8800759c 	.word	0x8800759c
 8007704:	c2f8f359 	.word	0xc2f8f359
 8007708:	3c900000 	.word	0x3c900000

0800770c <with_errno>:
 800770c:	b570      	push	{r4, r5, r6, lr}
 800770e:	4604      	mov	r4, r0
 8007710:	460d      	mov	r5, r1
 8007712:	4616      	mov	r6, r2
 8007714:	f7fd f95e 	bl	80049d4 <__errno>
 8007718:	4629      	mov	r1, r5
 800771a:	6006      	str	r6, [r0, #0]
 800771c:	4620      	mov	r0, r4
 800771e:	bd70      	pop	{r4, r5, r6, pc}

08007720 <xflow>:
 8007720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007722:	4615      	mov	r5, r2
 8007724:	461c      	mov	r4, r3
 8007726:	b180      	cbz	r0, 800774a <xflow+0x2a>
 8007728:	4610      	mov	r0, r2
 800772a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800772e:	e9cd 0100 	strd	r0, r1, [sp]
 8007732:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7f8 fecd 	bl	80004d8 <__aeabi_dmul>
 800773e:	2222      	movs	r2, #34	; 0x22
 8007740:	b003      	add	sp, #12
 8007742:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007746:	f7ff bfe1 	b.w	800770c <with_errno>
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	e7ee      	b.n	800772e <xflow+0xe>

08007750 <__math_uflow>:
 8007750:	2200      	movs	r2, #0
 8007752:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007756:	f7ff bfe3 	b.w	8007720 <xflow>

0800775a <__math_oflow>:
 800775a:	2200      	movs	r2, #0
 800775c:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8007760:	f7ff bfde 	b.w	8007720 <xflow>

08007764 <__ieee754_sqrt>:
 8007764:	f8df c1a0 	ldr.w	ip, [pc, #416]	; 8007908 <__ieee754_sqrt+0x1a4>
 8007768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800776c:	ea3c 0c01 	bics.w	ip, ip, r1
 8007770:	460b      	mov	r3, r1
 8007772:	4606      	mov	r6, r0
 8007774:	460d      	mov	r5, r1
 8007776:	460a      	mov	r2, r1
 8007778:	4604      	mov	r4, r0
 800777a:	d10e      	bne.n	800779a <__ieee754_sqrt+0x36>
 800777c:	4602      	mov	r2, r0
 800777e:	f7f8 feab 	bl	80004d8 <__aeabi_dmul>
 8007782:	4602      	mov	r2, r0
 8007784:	460b      	mov	r3, r1
 8007786:	4630      	mov	r0, r6
 8007788:	4629      	mov	r1, r5
 800778a:	f7f8 fcef 	bl	800016c <__adddf3>
 800778e:	4606      	mov	r6, r0
 8007790:	460d      	mov	r5, r1
 8007792:	4630      	mov	r0, r6
 8007794:	4629      	mov	r1, r5
 8007796:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800779a:	2900      	cmp	r1, #0
 800779c:	dc0d      	bgt.n	80077ba <__ieee754_sqrt+0x56>
 800779e:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80077a2:	ea5c 0c00 	orrs.w	ip, ip, r0
 80077a6:	d0f4      	beq.n	8007792 <__ieee754_sqrt+0x2e>
 80077a8:	b139      	cbz	r1, 80077ba <__ieee754_sqrt+0x56>
 80077aa:	4602      	mov	r2, r0
 80077ac:	f7f8 fcdc 	bl	8000168 <__aeabi_dsub>
 80077b0:	4602      	mov	r2, r0
 80077b2:	460b      	mov	r3, r1
 80077b4:	f7f8 ffba 	bl	800072c <__aeabi_ddiv>
 80077b8:	e7e9      	b.n	800778e <__ieee754_sqrt+0x2a>
 80077ba:	1512      	asrs	r2, r2, #20
 80077bc:	f000 8089 	beq.w	80078d2 <__ieee754_sqrt+0x16e>
 80077c0:	2500      	movs	r5, #0
 80077c2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80077c6:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80077ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ce:	07d2      	lsls	r2, r2, #31
 80077d0:	bf5c      	itt	pl
 80077d2:	005b      	lslpl	r3, r3, #1
 80077d4:	eb03 73d4 	addpl.w	r3, r3, r4, lsr #31
 80077d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077dc:	bf58      	it	pl
 80077de:	0064      	lslpl	r4, r4, #1
 80077e0:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 80077e4:	0062      	lsls	r2, r4, #1
 80077e6:	2016      	movs	r0, #22
 80077e8:	4629      	mov	r1, r5
 80077ea:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
 80077ee:	1076      	asrs	r6, r6, #1
 80077f0:	190f      	adds	r7, r1, r4
 80077f2:	429f      	cmp	r7, r3
 80077f4:	bfde      	ittt	le
 80077f6:	1bdb      	suble	r3, r3, r7
 80077f8:	1939      	addle	r1, r7, r4
 80077fa:	192d      	addle	r5, r5, r4
 80077fc:	005b      	lsls	r3, r3, #1
 80077fe:	3801      	subs	r0, #1
 8007800:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007804:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007808:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800780c:	d1f0      	bne.n	80077f0 <__ieee754_sqrt+0x8c>
 800780e:	4604      	mov	r4, r0
 8007810:	2720      	movs	r7, #32
 8007812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007816:	428b      	cmp	r3, r1
 8007818:	eb0c 0e00 	add.w	lr, ip, r0
 800781c:	dc02      	bgt.n	8007824 <__ieee754_sqrt+0xc0>
 800781e:	d113      	bne.n	8007848 <__ieee754_sqrt+0xe4>
 8007820:	4596      	cmp	lr, r2
 8007822:	d811      	bhi.n	8007848 <__ieee754_sqrt+0xe4>
 8007824:	f1be 0f00 	cmp.w	lr, #0
 8007828:	eb0e 000c 	add.w	r0, lr, ip
 800782c:	da56      	bge.n	80078dc <__ieee754_sqrt+0x178>
 800782e:	2800      	cmp	r0, #0
 8007830:	db54      	blt.n	80078dc <__ieee754_sqrt+0x178>
 8007832:	f101 0801 	add.w	r8, r1, #1
 8007836:	1a5b      	subs	r3, r3, r1
 8007838:	4641      	mov	r1, r8
 800783a:	4596      	cmp	lr, r2
 800783c:	bf88      	it	hi
 800783e:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 8007842:	eba2 020e 	sub.w	r2, r2, lr
 8007846:	4464      	add	r4, ip
 8007848:	005b      	lsls	r3, r3, #1
 800784a:	3f01      	subs	r7, #1
 800784c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8007850:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8007854:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8007858:	d1dd      	bne.n	8007816 <__ieee754_sqrt+0xb2>
 800785a:	4313      	orrs	r3, r2
 800785c:	d01b      	beq.n	8007896 <__ieee754_sqrt+0x132>
 800785e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 800790c <__ieee754_sqrt+0x1a8>
 8007862:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8007910 <__ieee754_sqrt+0x1ac>
 8007866:	e9da 0100 	ldrd	r0, r1, [sl]
 800786a:	e9db 2300 	ldrd	r2, r3, [fp]
 800786e:	f7f8 fc7b 	bl	8000168 <__aeabi_dsub>
 8007872:	e9da 8900 	ldrd	r8, r9, [sl]
 8007876:	4602      	mov	r2, r0
 8007878:	460b      	mov	r3, r1
 800787a:	4640      	mov	r0, r8
 800787c:	4649      	mov	r1, r9
 800787e:	f7f9 f8a7 	bl	80009d0 <__aeabi_dcmple>
 8007882:	b140      	cbz	r0, 8007896 <__ieee754_sqrt+0x132>
 8007884:	e9da 0100 	ldrd	r0, r1, [sl]
 8007888:	e9db 2300 	ldrd	r2, r3, [fp]
 800788c:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
 8007890:	d126      	bne.n	80078e0 <__ieee754_sqrt+0x17c>
 8007892:	463c      	mov	r4, r7
 8007894:	3501      	adds	r5, #1
 8007896:	106b      	asrs	r3, r5, #1
 8007898:	0864      	lsrs	r4, r4, #1
 800789a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800789e:	07ea      	lsls	r2, r5, #31
 80078a0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80078a4:	bf48      	it	mi
 80078a6:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
 80078aa:	4620      	mov	r0, r4
 80078ac:	eb03 5106 	add.w	r1, r3, r6, lsl #20
 80078b0:	e76d      	b.n	800778e <__ieee754_sqrt+0x2a>
 80078b2:	0ae3      	lsrs	r3, r4, #11
 80078b4:	3915      	subs	r1, #21
 80078b6:	0564      	lsls	r4, r4, #21
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d0fa      	beq.n	80078b2 <__ieee754_sqrt+0x14e>
 80078bc:	02d8      	lsls	r0, r3, #11
 80078be:	d50a      	bpl.n	80078d6 <__ieee754_sqrt+0x172>
 80078c0:	f1c2 0020 	rsb	r0, r2, #32
 80078c4:	fa24 f000 	lsr.w	r0, r4, r0
 80078c8:	1e55      	subs	r5, r2, #1
 80078ca:	4094      	lsls	r4, r2
 80078cc:	4303      	orrs	r3, r0
 80078ce:	1b4a      	subs	r2, r1, r5
 80078d0:	e776      	b.n	80077c0 <__ieee754_sqrt+0x5c>
 80078d2:	4611      	mov	r1, r2
 80078d4:	e7f0      	b.n	80078b8 <__ieee754_sqrt+0x154>
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	3201      	adds	r2, #1
 80078da:	e7ef      	b.n	80078bc <__ieee754_sqrt+0x158>
 80078dc:	4688      	mov	r8, r1
 80078de:	e7aa      	b.n	8007836 <__ieee754_sqrt+0xd2>
 80078e0:	f7f8 fc44 	bl	800016c <__adddf3>
 80078e4:	e9da 8900 	ldrd	r8, r9, [sl]
 80078e8:	4602      	mov	r2, r0
 80078ea:	460b      	mov	r3, r1
 80078ec:	4640      	mov	r0, r8
 80078ee:	4649      	mov	r1, r9
 80078f0:	f7f9 f864 	bl	80009bc <__aeabi_dcmplt>
 80078f4:	b120      	cbz	r0, 8007900 <__ieee754_sqrt+0x19c>
 80078f6:	1ca1      	adds	r1, r4, #2
 80078f8:	bf08      	it	eq
 80078fa:	3501      	addeq	r5, #1
 80078fc:	3402      	adds	r4, #2
 80078fe:	e7ca      	b.n	8007896 <__ieee754_sqrt+0x132>
 8007900:	3401      	adds	r4, #1
 8007902:	f024 0401 	bic.w	r4, r4, #1
 8007906:	e7c6      	b.n	8007896 <__ieee754_sqrt+0x132>
 8007908:	7ff00000 	.word	0x7ff00000
 800790c:	200001e0 	.word	0x200001e0
 8007910:	200001e8 	.word	0x200001e8

08007914 <_init>:
 8007914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007916:	bf00      	nop
 8007918:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800791a:	bc08      	pop	{r3}
 800791c:	469e      	mov	lr, r3
 800791e:	4770      	bx	lr

08007920 <_fini>:
 8007920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007922:	bf00      	nop
 8007924:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007926:	bc08      	pop	{r3}
 8007928:	469e      	mov	lr, r3
 800792a:	4770      	bx	lr
